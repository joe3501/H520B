###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     19/May/2015  10:28:05 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\T6\FW\src\App\res_spi.c                               #
#    Command line =  E:\T6\FW\src\App\res_spi.c -lcN                          #
#                    E:\T6\FW\src\Project\EWARMv5\Debug\List\ -o              #
#                    E:\T6\FW\src\Project\EWARMv5\Debug\Obj\ --no_cse         #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    5.4\arm\INC\DLib_Config_Full.h" -I                       #
#                    E:\T6\FW\src\Project\EWARMv5\..\ -I                      #
#                    E:\T6\FW\src\Project\EWARMv5\..\..\App\ -I               #
#                    E:\T6\FW\src\Project\EWARMv5\..\..\Drivers\ -I           #
#                    E:\T6\FW\src\Project\EWARMv5\..\..\FatFs\ -I             #
#                    E:\T6\FW\src\Project\EWARMv5\..\..\Lib\inc\ -I           #
#                    E:\T6\FW\src\Project\EWARMv5\..\..\uCOS\uC-CPU\ -I       #
#                    E:\T6\FW\src\Project\EWARMv5\..\..\uCOS\uC-LIB\ -I       #
#                    E:\T6\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Ports\   #
#                    -I E:\T6\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Sourc #
#                    e\ -I E:\T6\FW\src\Project\EWARMv5\..\..\uCOS\uC-Probe\  #
#                    -I E:\T6\FW\src\Project\EWARMv5\..\..\usb_lib\ -I        #
#                    "D:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.4\arm\INC\" -Ol                                        #
#    List file    =  E:\T6\FW\src\Project\EWARMv5\Debug\List\res_spi.lst      #
#    Object file  =  E:\T6\FW\src\Project\EWARMv5\Debug\Obj\res_spi.o         #
#                                                                             #
#                                                                             #
###############################################################################

E:\T6\FW\src\App\res_spi.c
      1          
      2          
      3          
      4          /**
      5          * @file res_spi.c
      6          * @brief 刷卡机资源管理模块,用于管理字库，图片，存储参数等功能
      7          *        本模块将字库等资源存储在SPI FLASH中
      8          * @version V0.0.2
      9          * @author joe
     10          * @date 2010年2月5日
     11          * @note
     12          *     修改：
     13          *			由于项目需求需要支持GBK字库，而且增加了一个12*12的GB2312字库，SPI FLASH容量不够，所以将12*12的
     14          *			的GB2312字库放到MCU FLASH内部去了。
     15          *
     16          * @version V0.0.1
     17          * @author zhongyh
     18          * @date 2009年9月4日
     19          * @note
     20          *     每种不同的资源，在一个独立的BPT中，利用BPT_DataType来区分
     21          *
     22          * 
     23          */
     24          
     25          #include <stdio.h>
     26          #include <stdlib.h>
     27          #include <string.h>
     28          #include "stm32f10x_lib.h"
     29          #include "gui.h"
     30          #include "res_spi.h"
     31          #include "ff.h"
     32          #include "diskio.h"
     33          /**
     34          *	@brief	资源文件信息结构体
     35          */
     36          typedef struct  
     37          {
     38          	unsigned char					magic[4];
     39          	unsigned int					xor;
     40          	unsigned int					xor_data;
     41          	unsigned int					length;
     42          	unsigned char					OEMName[16];
     43          	unsigned char					Version[16];
     44          	unsigned char					Date[16];
     45          }TPackHeader;
     46          
     47          /**
     48          *	@brief	每一份资源的信息结构体
     49          */
     50          #pragma pack(1)
     51          typedef struct {
     52          	unsigned char				RIT_OEMName[16];    		// 0  
     53          	unsigned char				RIT_ManName[16];    		// 10 
     54          	unsigned char				RIT_ModuleName[16];			// 20 
     55          	unsigned short				RIT_ProdID;					// 30 产品ID
     56          	unsigned short				RIT_CodeVersion;    		// 32 引导代码版本
     57          	unsigned short				RIT_Date;            		// 34 更新时间
     58          	unsigned char				RIT_SN[10];            		// 36 序列号
     59          	unsigned int				RIT_TotSect;        		// 40 引导分区占的扇区数
     60          	unsigned int				RIT_CodeSec;        		// 44 引导代码占的扇区数
     61          	unsigned char				RIT_VerifyType;        		// 48 引导代码校验方式
     62          	unsigned char				RIT_Endian;        			// 49 CPU Core
     63          	unsigned short				RIT_DataType;         		// 4A 此份数据的类型（如果不是引导代码，则指引导数据类型）
     64          	unsigned int				RIT_StartAddr;        		// 4C 启动代码在ram中存放的起始地址
     65          	unsigned int				RIT_RunAddr;        		// 50 运行代码时PC跳转的地址
     66          	unsigned char   			RIT_DataID;					// 54 此份资源的ID号
     67          	unsigned char				RIT_Reserved0;				// 55
     68          	unsigned char				RIT_Align;					// 56 此份资源的最小对齐单位，为2^n字节
     69          	unsigned char				RIT_Reserved1;				// 57
     70          	unsigned char				RIT_StrVer[13];				// 58  资源的版本号，格式为20100610_0001
     71          	unsigned char				RIT_Reserved[0x18B];		// 65 
     72          	unsigned int				RIT_DataCRC32;				// 1F0 数据区的CRC32，即从下一个扇区起，到RIT_CodeSec止的所有数据的CRC32值或CRC，此项根据xml文件中的配置来生成。
     73          	unsigned int				RIT_Next;            		// 1F4 下一份RIT在磁盘中的绝对地址
     74          	unsigned int				RIT_CheckSum;        		// 1F8 此份资源表RIT的CRC32校验值。， 
     75          	unsigned int				RIT_TrailSig;       		// 1FC 结束标志(0x00,0x00,0x55,0xAB)
     76          }TResInfoTable;
     77          
     78          #pragma pack()
     79          
     80          static unsigned char			res_buffer[512];
     81          
     82          static FIL							resource_file;		//资源文件专享一个文件句柄
     83          FATFS								res_fs;
     84          #define res_file					"/resdata.bin"
     85          
     86          /**
     87          * @def 每一份资源类型在BPT中，BPT_DataType对应的值
     88          */
     89          #define RESTYPE_CODE		0x80					// 系统升级代码
     90          #define RESTYPE_FNT			0x10					// 字库资源号
     91          #define RESTYPE_PIC			0x11					// 图片资源号
     92          
     93          /**
     94          * @brief 从指定地址开始载入BPT，并检查是否相同
     95          */
     96          static int res_loadres(unsigned int dwLBA, unsigned char *pType, unsigned char *pID)
     97          {
     98          
     99          	TResInfoTable			*pResTable;
    100          	unsigned int			rd;
    101          
    102          	if (f_lseek(&resource_file,dwLBA*512) != FR_OK)
    103          	{
    104          		return -1;
    105          	}
    106          
    107          	if (f_read(&resource_file,res_buffer,512,&rd) != FR_OK)
    108          	{
    109          		return -1;
    110          	}
    111          
    112          
    113          	pResTable	= (TResInfoTable*)res_buffer;
    114          
    115          	if( res_buffer[510] != 0x55 ||
    116          		res_buffer[511] != 0xAB)
    117          	{
    118          		return -1;
    119          	}
    120          
    121          	*pType					= pResTable->RIT_DataType;
    122          	*pID					= pResTable->RIT_DataID;
    123          
    124          	return 0;
    125          }
    126          
    127          /**
    128          * @brief 资源模块初始化
    129          * @return 0:成功初始化
    130          *        -1:初始化SD卡失败
    131          *        -2:SPI Flash中找不到资源
    132          */
    133          int res_init(void)
    134          {
    135          
    136          	unsigned int					dwLBA;
    137          	unsigned char					res_type, res_id;
    138          	unsigned int					rd;
    139          
    140          	FRESULT				ret;
    141          
    142          	//if (SPI_SD_Init() != SD_RESPONSE_NO_ERROR)
    143          	//{
    144          	//	return -1;
    145          	//}
    146          
    147          	//挂载文件系统
    148          	f_mount(0, &res_fs);										//装载文件系统
    149          
    150          	
    151          	ret = f_open(&resource_file, res_file, FA_OPEN_EXISTING | FA_READ ); 
    152          	if(ret != FR_OK )
    153          	{
    154          		if (ret == FR_NO_FILESYSTEM)
    155          		{
    156          			//如果是还没有创建文件系统，那么就格式化文件系统
    157          			ret = f_mkfs(0,1,512);
    158          
    159          			if (ret != FR_OK)
    160          			{
    161          				return -1;
    162          			}
    163          		}             
    164                 return -1;
    165          	}
    166          
    167          	f_lseek(&resource_file,0);
    168          
    169          	// ==========================================================================================================
    170          	// 1. 校验资源文件
    171          	if( f_read(&resource_file, res_buffer, 512, &rd) != FR_OK )
    172          	{
    173          		f_close(&resource_file);
    174          		return -2;
    175          	}
    176          
    177          
    178          	// 校验文件头
    179          	if( res_buffer[0] != 'J' || res_buffer[1] != 'B' || res_buffer[2] != 'L' || res_buffer[3] != '3' )
    180          	{
    181          		f_close(&resource_file);
    182          		return -2;
    183          	}
    184          
    185          	// 装入资源
    186          	dwLBA							= 0;
    187          	do
    188          	{
    189          		// 装入一个表
    190          		dwLBA += 1;
    191          		if( res_loadres(dwLBA, &res_type, &res_id) != 0)
    192          		{
    193          			f_close(&resource_file);
    194          			return -2;
    195          		}
    196          
    197          		// 判断资源类型
    198          		if(RESTYPE_FNT == res_type)
    199          		{
    200          			gui_setup_font(dwLBA+1, res_id);		// 安装字体
    201          		}
    202          		else if(RESTYPE_PIC == res_type)
    203          		{
    204          			gui_setup_picture(dwLBA + 1);
    205          		}
    206          		else
    207          		{
    208          			//return -2;
    209          		}
    210          
    211          		// 取下一份资源地址
    212          		dwLBA						= *(unsigned int*)&res_buffer[0x1F4];
    213          	}while(dwLBA != 0xFFFFFFFF);
    214          
    215          	return 0;
    216          }
    217          
    218          /**
    219          * @brief 从SPI FLASH中读取一个扇区的资源，并放在res_buffer中
    220          * @param[in] unsigned int dwLBA要读取的资源地址
    221          * @return unsigned char *数据存放在地址
    222          */
    223          unsigned char *read_resdata(unsigned int dwLBA)
    224          {
    225          	unsigned int	rd;
    226          	unsigned int	retry_cnt = 2; 
    227          
    228          	if (resource_file.flag & FA__ERROR)
    229          	{
    230          		resource_file.flag &= ~FA__ERROR;
    231          	}
    232          
    233          	while(retry_cnt)
    234          	{
    235          		if (f_lseek(&resource_file,dwLBA*512) != FR_OK)
    236          		{
    237          			retry_cnt--;
    238          			f_mount(1,&res_fs);
    239          			if(f_open(&resource_file,res_file,FA_OPEN_EXISTING | FA_READ) != FR_OK)
    240          			{
    241          				return (unsigned char *) 0; 
    242          			}
    243          			else
    244          			{
    245          				continue;
    246          			}
    247          		}
    248          
    249          		if (f_read(&resource_file,res_buffer,512,&rd) != FR_OK)
    250          		{
    251          			retry_cnt--;
    252          			f_mount(1,&res_fs);
    253          			if(f_open(&resource_file,res_file,FA_OPEN_EXISTING | FA_READ) != FR_OK)
    254          			{
    255          				return (unsigned char *) 0; 
    256          			}
    257          			else
    258          			{
    259          				continue;
    260          			}
    261          		}
    262          
    263          		return res_buffer;
    264          	}
    265          
    266          	return (unsigned char *) 0;
    267          }
    268          
    269          
    270          #if 0
    271          void spi_flash_drv_test(void)
    272          {
    273          	unsigned char buf[512];
    274          
    275          	spi_flash_init();
    276          
    277          	spi_flash_erase();	//先擦除整个SPI_FLASH
    278          
    279          	memset(buf,0x50,512);
    280          	disk_write(1,buf,0,1);
    281          
    282          	memset(buf,0,512);
    283          	disk_read(1,buf,0,1);
    284          
    285          	memset(buf,0x51,512);
    286          	disk_write(1,buf,1,1);
    287          
    288          	memset(buf,0,512);
    289          	disk_read(1,buf,1,1);
    290          
    291          	memset(buf,0x58,512);
    292          	disk_write(1,buf,8,1);
    293          
    294          	memset(buf,0,512);
    295          	disk_read(1,buf,8,1);
    296          
    297          	spi_flash_erasesector(0);	//擦除第一个4K
    298          
    299          	//检查擦除第一个4K时是否将第5个Sector也擦除了
    300          	memset(buf,0,512);
    301          	disk_read(1,buf,8,1);
    302          
    303          	//检查擦除第一个4K之后，是否可以再次编程
    304          	memset(buf,0x50,512);		
    305          	disk_write(1,buf,0,1);		//写第1个Sector
    306          
    307          	memset(buf,0,512);
    308          	disk_read(1,buf,0,1);
    309          
    310          	memset(buf,0x57,512);
    311          	disk_write(1,buf,7,1);		//写第8个sector		
    312          
    313          	memset(buf,0,512);
    314          	disk_read(1,buf,7,1);
    315          
    316          
    317          	spi_flash_erasesector(0x1000);	//擦除第2个4K
    318          
    319          	//检查擦除第2个4K时是否将第5个Sector也擦除了
    320          	memset(buf,0,512);
    321          	disk_read(1,buf,8,1);
    322          }
    323          #endif
    324          
    325          

   Maximum stack usage in bytes:

     Function     .cstack
     --------     -------
     read_resdata     16
     res_init         16
     res_loadres      16


   Section sizes:

     Function/Label             Bytes
     --------------             -----
     res_buffer                  512
     resource_file               548
     res_fs                      560
     res_loadres                 100
     res_init                    228
     read_resdata                136
     ??DataTable28                 4
     ??DataTable29                 4
     ??DataTable30                 4
     ??DataTable31                 4
     ?<Constant "/resdata.bin">   16

 
 1 620 bytes in section .bss
    16 bytes in section .rodata
   480 bytes in section .text
 
   480 bytes of CODE  memory
    16 bytes of CONST memory
 1 620 bytes of DATA  memory

Errors: none
Warnings: none
