###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     23/Jan/2016  16:23:11 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\H520B\FW\src\Project\main.c                           #
#    Command line =  E:\H520B\FW\src\Project\main.c -lcN                      #
#                    E:\H520B\FW\src\Project\EWARMv5\Debug\List\ -o           #
#                    E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\ --no_cse      #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    5.4\arm\INC\DLib_Config_Full.h" -I                       #
#                    E:\H520B\FW\src\Project\EWARMv5\..\ -I                   #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\App\ -I            #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Drivers\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\FatFs\ -I          #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Lib\inc\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-CPU\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-LIB\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Ports #
#                    \ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\ #
#                    Source\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC #
#                    -Probe\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\usb_lib #
#                    \ -I "C:\Program Files\IAR Systems\Embedded Workbench    #
#                    5.4\arm\INC\" -Ol                                        #
#    List file    =  E:\H520B\FW\src\Project\EWARMv5\Debug\List\main.lst      #
#    Object file  =  E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\main.o         #
#                                                                             #
#                                                                             #
###############################################################################

E:\H520B\FW\src\Project\main.c
      1          /**
      2          * @file main.c
      3          * @brief 2.4GPOS项目主程序
      4          *
      5          * @version V0.0.1
      6          * @author joe
      7          * @date 2010年4月26日
      8          * @note
      9          *		none
     10          *
     11          * @copy
     12          *
     13          * 此代码为深圳合杰电子有限公司项目代码，任何人及公司未经许可不得复制传播，或用于
     14          * 本公司以外的项目。本司保留一切追究权利。
     15          *
     16          * <h1><center>&copy; COPYRIGHT 2015 heroje</center></h1>
     17          */
     18          
     19          /* Private Includes ------------------------------------------------------------------*/
     20          #include "stm32f10x_lib.h"
     21          #include "ucos_ii.h"
     22          #include <string.h>
     23          #include <stdlib.h>
     24          #include "app.h"
     25          #include "hw_platform.h"
     26          #include "data_uart.h"
     27          #include "keypad.h"
     28          #include "TimeBase.h"
     29          #include "Terminal_para.h"
     30          #include "record_m.h"
     31          #include "stm32f10x_flash_config.h"
     32          #include "scanner.h"
     33          #include "usb_lib.h"
     34          #include "PCUsart.h"
     35          #include "JMemory.h"
     36          #include "usb_pwr.h"
     37          /* Private define ------------------------------------------------------------*/
     38          
     39          // Cortex System Control register address
     40          #define SCB_SysCtrl					((u32)0xE000ED10)
     41          // SLEEPDEEP bit mask
     42          #define SysCtrl_SLEEPDEEP_Set		((u32)0x00000004)
     43          
     44          
     45          
     46          /* Global variables ---------------------------------------------------------*/
     47          ErrorStatus			HSEStartUpStatus;							//Extern crystal OK Flag
     48          unsigned int		pos_state;									//POS state flag
     49          //unsigned char		factory_test_start_flag;
     50          
     51          
     52          // 0x20000000-0x20000010 此字节为主程序与BootCode间的参数传递区
     53          __no_init unsigned int status_iap @ "VENDOR_RAM";
     54          __no_init unsigned int nouse[3] @ "VENDOR_RAM";
     55          
     56          /* Private functions ---------------------------------------------------------*/
     57          static void Unconfigure_All(void);
     58          static void GPIO_AllAinConfig(void);
     59          void RCC_Configuration(void);
     60          
     61          /* External variables -----------------------------------------------*/
     62          extern	TTerminalPara			g_param;					//Terminal Param
     63          
     64          /*******************************************************************************
     65          * Function Name  : main
     66          * Description    : Main program.
     67          * Input          : None
     68          * Output         : None
     69          * Return         : None
     70          *******************************************************************************/
     71          int main(void)
     72          {
     73          	/* System Clocks Configuration **********************************************/
     74          	RCC_Configuration(); 
     75          //#ifdef RELEASE_VER
     76          	/* NVIC Configuration *******************************************************/
     77          //	NVIC_SetVectorTable(NVIC_VectTab_FLASH, IAP_SIZE);		//需要加密的 bootcode
     78          //#else	
     79          	/* NVIC Configuration *******************************************************/
     80          	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0);
     81          //#endif
     82          	
     83          	// Clear SLEEPDEEP bit of Cortex System Control Register
     84          	*(vu32 *) SCB_SysCtrl &= ~SysCtrl_SLEEPDEEP_Set;
     85          
     86          	Unconfigure_All();
     87          	// 数据串口(调试口)初始化
     88          	data_uart_init();
     89          
     90          #ifdef DEBUG_VER
     91          	printf("H520B startup...\r\n");
     92          #endif
     93          
     94          	//初始化时基函数
     95          	TimeBase_Init();
     96          
     97          	hw_platform_init();
     98          
     99          	usb_device_init(USB_KEYBOARD);
    100          
    101          	hw_platform_beep_ctrl(300,3000);
    102          	hw_platform_beep_ctrl(300,2000);
    103          	hw_platform_beep_ctrl(300,1500);
    104          	hw_platform_beep_ctrl(300,4000);
    105          
    106          	app_startup();
    107          }
    108          
    109          /*******************************************************************************
    110          * Function Name  : RCC_Configuration
    111          * Description    : Configures the different system clocks.
    112          * Input          : None
    113          * Output         : None
    114          * Return         : None
    115          *******************************************************************************/
    116          void RCC_Configuration(void)
    117          {   
    118          	vu32 i=0;
    119          
    120          	/* RCC system reset(for debug purpose) */
    121          	RCC_DeInit();
    122          
    123          	/* Enable HSE							*/
    124          	RCC_HSEConfig(RCC_HSE_ON);
    125          	// 这里要做延时，才能兼容某些比较差的晶体，以便顺利起震	
    126          	for(i=0; i<200000; i++);
    127          
    128          	/* Wait till HSE is ready			*/
    129          	HSEStartUpStatus = RCC_WaitForHSEStartUp();
    130          
    131          	if(HSEStartUpStatus == SUCCESS)
    132          	{
    133          		/* Enable Prefetch Buffer		*/
    134          		FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
    135          
    136          		/* Flash 2 wait state			*/
    137          		FLASH_SetLatency(FLASH_Latency_2);
    138          
    139          		/* HCLK = SYSCLK					*/
    140          		RCC_HCLKConfig(RCC_SYSCLK_Div1); 
    141          
    142          		/* PCLK2 = HCLK					*/
    143          		RCC_PCLK2Config(RCC_HCLK_Div1); 
    144          
    145          		/* PCLK1 = HCLK/2					*/
    146          		RCC_PCLK1Config(RCC_HCLK_Div2);
    147          
    148          		/* PLLCLK = 12MHz * 6 = 72 MHz	*/
    149          		RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_6);
    150          
    151          		/* PLLCLK = 8MHz * 9 = 72 MHz	*/
    152          		//RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
    153          
    154          		/* Enable PLL						*/
    155          		RCC_PLLCmd(ENABLE);
    156          
    157          		/* Wait till PLL is ready		*/
    158          		while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
    159          		{
    160          		}
    161          
    162          		/* Select PLL as system clock source */
    163          		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
    164          
    165          		/* Wait till PLL is used as system clock source */
    166          		while(RCC_GetSYSCLKSource() != 0x08)
    167          		{
    168          		}
    169          	}
    170          }
    171          
    172          /*******************************************************************************
    173          * Function Name  : Unconfigure_All
    174          * Description    : set all the RCC data to the default values 
    175          *                  configure all the GPIO as input
    176          * Input          : None
    177          * Output         : None
    178          * Return         : None
    179          *******************************************************************************/
    180          static void Unconfigure_All(void)
    181          {
    182          	//RCC_DeInit();
    183          
    184          	/* RCC configuration */
    185          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ALL, DISABLE);
    186          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_ALL, DISABLE);
    187          
    188          	GPIO_AllAinConfig();
    189          }
    190          
    191          
    192          /*******************************************************************************
    193          * Function Name  : GPIO_AllAinConfig
    194          * Description    : Configure all GPIO port pins in Analog Input mode 
    195          *                  (floating input trigger OFF)
    196          * Input          : None
    197          * Output         : None
    198          * Return         : None
    199          *******************************************************************************/
    200          static void GPIO_AllAinConfig(void)
    201          {
    202          	GPIO_InitTypeDef GPIO_InitStructure;
    203          
    204          	/* Configure all GPIO port pins in Analog Input mode (floating input trigger OFF) */
    205          	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
    206          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
    207          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
    208          	GPIO_Init(GPIOA, &GPIO_InitStructure);
    209          	GPIO_Init(GPIOB, &GPIO_InitStructure);
    210          	GPIO_Init(GPIOC, &GPIO_InitStructure);
    211          	//GPIO_Init(GPIOD, &GPIO_InitStructure);
    212          	//GPIO_Init(GPIOE, &GPIO_InitStructure);
    213          }
    214          
    215          /************************************************
    216          * Function Name  : EnterLowPowerMode()
    217          ************************************************/
    218          void EnterLowPowerMode(void)
    219          {
    220          	GPIO_InitTypeDef GPIO_InitStructure;
    221          #if(BT_MODULE == USE_BT816)
    222          	BT816_hid_disconnect();
    223          	BT816_enter_sleep();
    224          #endif
    225          	stop_real_timer();
    226          	hw_platform_led_ctrl(LED_RED,0);
    227          	hw_platform_led_ctrl(LED_BLUE,0);
    228          	hw_platform_led_ctrl(LED_GREEN,0);
    229          	hw_platform_led_ctrl(LED_YELLOW,0);
    230          
    231          	//先关闭所有外设的时钟
    232          	//RCC_APB2PeriphClockCmd(RCC_APB2Periph_ALL, DISABLE);
    233          	//RCC_APB1PeriphClockCmd(RCC_APB1Periph_ALL, DISABLE);
    234          	//RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ALL, DISABLE);
    235          
    236          	//但是需要开启PWR模块的时钟
    237          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE); // Enable PWR clock
    238          
    239          	// enable Debug in Stop mode
    240          	//DBGMCU->CR |= DBGMCU_CR_DBG_STOP;
    241          	
    242          	//进入低功耗模式
    243          	EXTI_ClearFlag(0xffff);
    244          	PWR_EnterSTOPMode(PWR_Regulator_ON, PWR_STOPEntry_WFI);
    245          }
    246          
    247          /************************************************
    248          * Function Name  : ExitLowPowerMode()
    249          ************************************************/
    250          void ExitLowPowerMode(void)
    251          {
    252          	GPIO_InitTypeDef GPIO_InitStructure;
    253          	//重新配置时钟
    254          	RCC_Configuration();
    255          
    256          #if(BT_MODULE == USE_BT816)
    257          	BT816_wakeup();
    258          #endif
    259          	start_real_timer();
    260          	scanner_mod_init();
    261          }
    262          
    263          
    264          /*******************************************************************************
    265          * Function Name  : assert_failed
    266          * Description    : Reports the name of the source file and the source line number
    267          *                  where the assert_param error has occurred.
    268          * Input          : - file: pointer to the source file name
    269          *                  - line: assert_param error line source number
    270          * Output         : None
    271          * Return         : None
    272          *******************************************************************************/
    273          
    274          //void assert_failed(u8* file, u32 line)
    275          //{ 
    276          /* User can add his own implementation to report the file name and line number,
    277          ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    278          
    279          /* Infinite loop */
    280          //while (1)
    281          //{
    282          //}
    283          //}
    284          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/
    285          

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     EnterLowPowerMode      8
     ExitLowPowerMode       8
     GPIO_AllAinConfig      8
     RCC_Configuration      8
     Unconfigure_All        8
     main                   8


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     HSEStartUpStatus     1
     pos_state            4
     status_iap           4
     nouse               12
     main               112
     RCC_Configuration  140
     Unconfigure_All     32
     GPIO_AllAinConfig   60
     EnterLowPowerMode   74
     ExitLowPowerMode    20

 
   5 bytes in section .bss
 438 bytes in section .text
  16 bytes in section VENDOR_RAM
 
 438 bytes of CODE memory
  21 bytes of DATA memory

Errors: none
Warnings: 2
