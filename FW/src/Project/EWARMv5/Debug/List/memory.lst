###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     26/Jan/2016  15:31:57 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\H520B\FW\src\usb_lib\memory.c                         #
#    Command line =  E:\H520B\FW\src\usb_lib\memory.c -lcN                    #
#                    E:\H520B\FW\src\Project\EWARMv5\Debug\List\ -o           #
#                    E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\ --no_cse      #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    5.4\arm\INC\DLib_Config_Full.h" -I                       #
#                    E:\H520B\FW\src\Project\EWARMv5\..\ -I                   #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\App\ -I            #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Drivers\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\FatFs\ -I          #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Lib\inc\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-CPU\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-LIB\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Ports #
#                    \ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\ #
#                    Source\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC #
#                    -Probe\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\usb_lib #
#                    \ -I "C:\Program Files\IAR Systems\Embedded Workbench    #
#                    5.4\arm\INC\" -Ol                                        #
#    List file    =  E:\H520B\FW\src\Project\EWARMv5\Debug\List\memory.lst    #
#    Object file  =  E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\memory.o       #
#                                                                             #
#                                                                             #
###############################################################################

E:\H520B\FW\src\usb_lib\memory.c
      1          /******************** (C) COPYRIGHT 2010 STMicroelectronics ********************
      2          * File Name          : memory.c
      3          * Author             : MCD Application Team
      4          * Version            : V3.1.1
      5          * Date               : 04/07/2010
      6          * Description        : Memory management layer
      7          ********************************************************************************
      8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          *******************************************************************************/
     15          
     16          /* Includes ------------------------------------------------------------------*/
     17          
     18          #include "memory.h"
     19          #include "usb_scsi.h"
     20          #include "usb_bot.h"
     21          #include "usb_regs.h"
     22          #include "usb_mem.h"
     23          #include "usb_conf.h"
     24          #include "hw_config.h"
     25          #include "mass_mal.h"
     26          #include "usb_lib.h"
     27          #include "usb_sil.h"
     28          
     29          /* Private typedef -----------------------------------------------------------*/
     30          /* Private define ------------------------------------------------------------*/
     31          /* Private macro -------------------------------------------------------------*/
     32          /* Private variables ---------------------------------------------------------*/
     33          volatile u32 Block_Read_count = 0;
     34          volatile u32 Block_offset;
     35          volatile u32 Counter = 0;
     36          u32  Idx;
     37          //u32 Data_Buffer[BULK_MAX_PACKET_SIZE *2]; /* 512 bytes*/
     38          u32 Data_Buffer[512]; /* 512 bytes*/
     39          u8 TransferState = TXFR_IDLE;
     40          /* Extern variables ----------------------------------------------------------*/
     41          extern u8 Bulk_Data_Buff[BULK_MAX_PACKET_SIZE];  /* data buffer*/
     42          extern u16 Data_Len;
     43          extern u8 Bot_State;
     44          extern Bulk_Only_CBW CBW;
     45          extern Bulk_Only_CSW CSW;
     46          extern u32 Mass_Memory_Size[2];
     47          extern u32 Mass_Block_Size[2];
     48          
     49          /* Private function prototypes -----------------------------------------------*/
     50          /* Extern function prototypes ------------------------------------------------*/
     51          /* Private functions ---------------------------------------------------------*/
     52          
     53          /*******************************************************************************
     54          * Function Name  : Read_Memory
     55          * Description    : Handle the Read operation from the microSD card.
     56          * Input          : None.
     57          * Output         : None.
     58          * Return         : None.
     59          *******************************************************************************/
     60          void Read_Memory(u8 lun, u32 Memory_Offset, u32 Transfer_Length)
     61          {
     62            static u32 Offset, Length;
     63          
     64            if (TransferState == TXFR_IDLE )
     65            {
     66              Block_Read_count = 0;		//20120830 joeÔö¼ÓµÄ
     67              Offset = Memory_Offset * Mass_Block_Size[lun];
     68              Length = Transfer_Length * Mass_Block_Size[lun];
     69              TransferState = TXFR_ONGOING;
     70            }
     71          
     72            if (TransferState == TXFR_ONGOING )
     73            {
     74              if (!Block_Read_count)
     75              {
     76                MAL_Read(lun ,
     77                         Offset ,
     78                         Data_Buffer,
     79                         Mass_Block_Size[lun]);
     80          
     81                USB_SIL_Write(EP1_IN, (u8 *)Data_Buffer, BULK_MAX_PACKET_SIZE);
     82          
     83                Block_Read_count = Mass_Block_Size[lun] - BULK_MAX_PACKET_SIZE;
     84                Block_offset = BULK_MAX_PACKET_SIZE;
     85              }
     86              else
     87              {
     88                USB_SIL_Write(EP1_IN, (u8 *)Data_Buffer + Block_offset, BULK_MAX_PACKET_SIZE);
     89          
     90                Block_Read_count -= BULK_MAX_PACKET_SIZE;
     91                Block_offset += BULK_MAX_PACKET_SIZE;
     92              }
     93          
     94              SetEPTxCount(ENDP1, BULK_MAX_PACKET_SIZE);
     95              SetEPTxStatus(ENDP1, EP_TX_VALID);
     96              Offset += BULK_MAX_PACKET_SIZE;
     97              Length -= BULK_MAX_PACKET_SIZE;
     98          
     99              CSW.dDataResidue -= BULK_MAX_PACKET_SIZE;
    100              //Led_RW_ON();
    101            }
    102            if (Length == 0)
    103            {
    104              Block_Read_count = 0;
    105              Block_offset = 0;
    106              Offset = 0;
    107              Bot_State = BOT_DATA_IN_LAST;
    108              TransferState = TXFR_IDLE;
    109              //Led_RW_OFF();
    110            }
    111          }
    112          
    113          /*******************************************************************************
    114          * Function Name  : Write_Memory
    115          * Description    : Handle the Write operation to the microSD card.
    116          * Input          : None.
    117          * Output         : None.
    118          * Return         : None.
    119          *******************************************************************************/
    120          void Write_Memory (u8 lun, u32 Memory_Offset, u32 Transfer_Length)
    121          {
    122          
    123            static u32 W_Offset, W_Length;
    124          
    125            u32 temp =  Counter + BULK_MAX_PACKET_SIZE;
    126          
    127            if (TransferState == TXFR_IDLE )
    128            {
    129              W_Offset = Memory_Offset * Mass_Block_Size[lun];
    130              W_Length = Transfer_Length * Mass_Block_Size[lun];
    131              TransferState = TXFR_ONGOING;
    132            }
    133          
    134            if (TransferState == TXFR_ONGOING )
    135            {
    136          
    137              for (Idx = 0 ; Counter < temp; Counter++)
    138              {
    139                *((u8 *)Data_Buffer + Counter) = Bulk_Data_Buff[Idx++];
    140              }
    141          
    142              W_Offset += Data_Len;
    143              W_Length -= Data_Len;
    144          
    145              if (!(W_Length % Mass_Block_Size[lun]))
    146              {
    147                Counter = 0;
    148                MAL_Write(lun ,
    149                          W_Offset - Mass_Block_Size[lun],
    150                          Data_Buffer,
    151                          Mass_Block_Size[lun]);
    152              }
    153          
    154              CSW.dDataResidue -= Data_Len;
    155              SetEPRxStatus(ENDP2, EP_RX_VALID); /* enable the next transaction*/   
    156          
    157              //Led_RW_ON();
    158            }
    159          
    160            if ((W_Length == 0) || (Bot_State == BOT_CSW_Send))
    161            {
    162              Counter = 0;
    163              Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
    164              TransferState = TXFR_IDLE;
    165              //Led_RW_OFF();
    166            }
    167          }
    168          /******************* (C) COPYRIGHT 2010 STMicroelectronics *****END OF FILE****/
    169          

   Maximum stack usage in bytes:

     Function     .cstack
     --------     -------
     Read_Memory       8
     Write_Memory     16


   Section sizes:

     Function/Label   Bytes
     --------------   -----
     Block_Read_count    4
     Block_offset        4
     Counter             4
     Idx                 4
     Data_Buffer      2048
     TransferState       1
     Read_Memory       264
     Offset              4
     Length              4
     Write_Memory      288
     W_Offset            4
     W_Length            4
     ??DataTable22       4
     ??DataTable23       4
     ??DataTable25       4
     ??DataTable26       4
     ??DataTable27       4

 
 2 081 bytes in section .bss
   572 bytes in section .text
 
   572 bytes of CODE memory
 2 081 bytes of DATA memory

Errors: none
Warnings: none
