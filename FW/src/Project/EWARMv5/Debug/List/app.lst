###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     26/Jan/2016  15:31:50 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\H520B\FW\src\App\app.c                                #
#    Command line =  E:\H520B\FW\src\App\app.c -lcN                           #
#                    E:\H520B\FW\src\Project\EWARMv5\Debug\List\ -o           #
#                    E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\ --no_cse      #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    5.4\arm\INC\DLib_Config_Full.h" -I                       #
#                    E:\H520B\FW\src\Project\EWARMv5\..\ -I                   #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\App\ -I            #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Drivers\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\FatFs\ -I          #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Lib\inc\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-CPU\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-LIB\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Ports #
#                    \ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\ #
#                    Source\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC #
#                    -Probe\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\usb_lib #
#                    \ -I "C:\Program Files\IAR Systems\Embedded Workbench    #
#                    5.4\arm\INC\" -Ol                                        #
#    List file    =  E:\H520B\FW\src\Project\EWARMv5\Debug\List\app.lst       #
#    Object file  =  E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\app.o          #
#                                                                             #
#                                                                             #
###############################################################################

E:\H520B\FW\src\App\app.c
      1          /**
      2          * @file app.c
      3          * @brief H520B 蓝牙条码数据采集器项目APP
      4          * @version V0.0.1
      5          * @author joe.zhou
      6          * @date 2015年08月31日
      7          * @note
      8          * @copy
      9          *
     10          * 此代码为深圳合杰电子有限公司项目代码，任何人及公司未经许可不得复制传播，或用于
     11          * 本公司以外的项目。本司保留一切追究权利。
     12          *
     13          * <h1><center>&copy; COPYRIGHT 2015 heroje</center></h1>
     14          *
     15          */
     16          #include "ucos_ii.h"
     17          #include "app.h"
     18          #include "hw_platform.h"
     19          #include "usb_pwr.h"
     20          #include <string.h>
     21          #include <assert.h>
     22          #include "JMemory.h"
     23          #include "TimeBase.h"
     24          #include "hw_config.h"
     25          #include "basic_fun.h"
     26          #include <stdio.h>
     27          #include "record_m.h"
     28          #include "Terminal_Para.h"
     29          #include "usb_lib.h"
     30          #include "PCUsart.h"
     31          
     32          //定义主状态机线程与蓝牙模块线程之间通讯的IPC对象
     33          #define BARCODE_CASH_NUM	15			//定义等待蓝牙模块线程发送的条码缓冲区为15个条码
     34          #define MAX_BARCODE_LEN		80			//定义条码最大长度为80个字节
     35          
     36          //define the stack size of each task
     37          #define STACK_SIZE_TASKEC			128	
     38          #define STACK_SIZE_TASKSM			356
     39          #define STACK_SIZE_TASKBT			128
     40          #define STACK_SIZE_TASKINI			224
     41          
     42          static OS_STK	thread_eventcapture_stk[STACK_SIZE_TASKEC];		//the stack of the Event_capture_thread
     43          static OS_STK	thread_statemachine_stk[STACK_SIZE_TASKSM];		//the stack of the State_Machine_thread
     44          static OS_STK	thread_bt_stk[STACK_SIZE_TASKBT];				//the stack of the BT_Daemon_thread
     45          static OS_STK	*p_init_thread_stk;								//此线程的栈动态创建，线程结束自己释放
     46          
     47          static void *barcode_pool[BARCODE_CASH_NUM];	//保存获取到的条码字符串的地址数组
     48          static unsigned char barcode_cash[BARCODE_CASH_NUM][MAX_BARCODE_LEN+2];	//最后一个字节表示此行数据是否被送入pool中待发送了
     49          static	unsigned char	lowpower_state;
     50          static	unsigned char	lowpower_cnt;
     51          static  TBATCH_NODE		batch_node;
     52          /*
     53          ------------------------------------------------------------
     54          |               barcode[MAX_BARCODE_LEN+1]              |flag|
     55          ------------------------------------------------------------
     56          |               barcode[MAX_BARCODE_LEN+1]              |flag|
     57          ------------------------------------------------------------
     58          |               barcode[MAX_BARCODE_LEN+1]              |flag|
     59          ------------------------------------------------------------
     60          .........
     61          ------------------------------------------------------------
     62          |               barcode[MAX_BARCODE_LEN+1]              |flag|
     63          ------------------------------------------------------------
     64          */
     65          //定义条码的静态缓冲区，以免动态分配内存
     66          static OS_EVENT	*pBarcode_Queue;			//barcode消息队列
     67          
     68          
     69          #define EVENT_CASH_NUM		8			//定义事件的缓存数量
     70          //定义事件监测线程与主状态机之间通讯的IPC对象
     71          static void *event_pool[EVENT_CASH_NUM];		//事件缓存
     72          OS_EVENT	*pEvent_Queue;			//事件消息队列
     73          
     74          static OS_EVENT *pIOSem;				//IO信号量
     75          //
     76          
     77          unsigned int	device_current_state;		//设备主状态机
     78          
     79          unsigned int	keypress_timeout;
     80          unsigned char	barcode[MAX_BARCODE_LEN+1];
     81          
     82          void u_disk_proc(void);
     83          int lowpower_tip(void);
     84          void system_err_tip(void);
     85          
     86          extern void EnterLowPowerMode(void);
     87          extern void ExitLowPowerMode(void);
     88          
     89          
     90          /**
     91          * @brief	扫描条码成功的提示
     92          */
     93          static inline void scan_barcode_ok_tip(void)
     94          {
     95          	hw_platform_led_ctrl(LED_YELLOW,1);
     96          	if (g_param.motor_enable)
     97          	{
     98          		hw_platform_beep_motor_ctrl(100,4000);
     99          	}
    100          	else
    101          	{
    102          		hw_platform_beep_ctrl(100,4000);
    103          	}
    104          	
    105          	OSTimeDlyHMSM(0,0,0,10);
    106          	hw_platform_led_ctrl(LED_YELLOW,0);
    107          }
    108          
    109          /**
    110          * @brief	将条码推入条码的静态缓冲区，返回保存的地址
    111          * @param[in] unsigned char* barcode				需要缓存的条码
    112          * @return   缓存的地址
    113          * @note 策略:只要找到一个空位置就放进去，每一列的最后一个字节为0表示该位置是空的
    114          *											     最后一个字节0x55表示该位置已经缓存了条码
    115          */
    116          unsigned char * push_barcode_into_cash(unsigned char* barcode)
    117          {
    118          	unsigned int	i;
    119          	for (i = 0; i < BARCODE_CASH_NUM;i++)
    120          	{
    121          		if (barcode_cash[i][MAX_BARCODE_LEN+1] == 0)
    122          		{
    123          			if (strlen((char const*)barcode) > MAX_BARCODE_LEN)
    124          			{
    125          				memcpy(barcode_cash[i],barcode,MAX_BARCODE_LEN);
    126          				barcode_cash[i][MAX_BARCODE_LEN] = 0;
    127          			}
    128          			else
    129          			{
    130          				strcpy((char*)barcode_cash[i],(char const*)barcode);
    131          			}
    132          			barcode_cash[i][MAX_BARCODE_LEN+1] = 0x55;		//表示已经缓存数据了
    133          			return (void*)barcode_cash[i];
    134          		}
    135          	}
    136          
    137          	return (void*)0;
    138          }
    139          
    140          
    141          /**
    142          * @brief	将已经发送出去的缓存地址pull出来
    143          * @param[in] unsigned char* barcode_addr    一个合法的缓存区的地址
    144          * @return   none
    145          */
    146          void pull_barcode_from_cash(unsigned char* barcode_addr)
    147          {
    148          	assert((int)barcode_addr >= (int)barcode_cash[0]);
    149          	assert((int)barcode_addr <= (int)barcode_cash[BARCODE_CASH_NUM-1]);
    150          	assert(((int)barcode_addr - (int)barcode_cash[0])%(MAX_BARCODE_LEN+2) == 0);
    151          
    152          	//memset(barcode_addr,0,MAX_BARCODE_LEN+2);
    153          	barcode_addr[MAX_BARCODE_LEN+1] = 0;		//把标志恢复为0即可
    154          	return;
    155          }
    156          
    157          
    158          
    159          /**
    160          * @brief	进入Memory模式时，需要进行的一些设置
    161          */
    162          static inline void enter_into_Memory_Mode(void)
    163          {
    164          #ifdef DEBUG_VER
    165          	printf("enter into Memory Mode\r\n");
    166          #endif
    167          #if(BT_MODULE == USE_BT816)
    168          	BT816_enter_sleep();
    169          #endif
    170          	g_param.last_state = 1;
    171          	SaveTerminalPara();
    172          }
    173          
    174          /**
    175          * @brief	退出Memory模式时，需要进行的一些设置
    176          */
    177          static inline void exit_from_Memory_Mode(void)
    178          {
    179          #ifdef DEBUG_VER
    180          	printf("exit from Memory Mode\r\n");
    181          #endif
    182          	//@todo...
    183          }
    184          
    185          /**
    186          * @brief	进入USB HID模式时，需要进行的一些设置
    187          */
    188          static inline void enter_into_USB_HID_Mode(void)
    189          {
    190          #ifdef DEBUG_VER
    191          	printf("enter into USB HID Mode\r\n");
    192          #endif
    193          #if(BT_MODULE == USE_BT816)
    194          	BT816_enter_sleep();
    195          #endif
    196          	hw_platform_led_ctrl(LED_RED,1);
    197          	//hw_platform_beep_ctrl(100,1045);
    198          	//hw_platform_beep_ctrl(100,1171);
    199          	//hw_platform_beep_ctrl(100,1316);
    200          	//hw_platform_beep_ctrl(100,1393);
    201          	//hw_platform_beep_ctrl(100,1563);
    202          	//hw_platform_beep_ctrl(100,1755);
    203          	//hw_platform_beep_ctrl(100,1971);
    204          
    205          	hw_platform_beep_ctrl(100,1316);
    206          	hw_platform_beep_ctrl(100,1316);
    207          	hw_platform_beep_ctrl(100,1393);
    208          	hw_platform_beep_ctrl(100,1563);
    209          	hw_platform_beep_ctrl(100,1563);
    210          	hw_platform_beep_ctrl(100,1393);
    211          	hw_platform_beep_ctrl(100,1316);
    212          	hw_platform_beep_ctrl(100,1171);
    213          }
    214          
    215          /**
    216          * @brief	退出USB HID模式时，需要进行的一些设置
    217          */
    218          static inline void exit_from_USB_HID_Mode(void)
    219          {
    220          #ifdef DEBUG_VER
    221          	printf("exit from USB HID Mode\r\n");
    222          #endif
    223          	hw_platform_led_ctrl(LED_RED,0);
    224          }
    225          
    226          /**
    227          * @brief	进入BT模式时，需要进行的一些设置
    228          * @param[in] unsigned char	child_state		0: disconnect  1：connected  2：:waitpair
    229          */
    230          static inline void enter_into_BT_Mode(unsigned char child_state)
    231          {
    232          #ifdef DEBUG_VER
    233          	printf("enter into BT Mode:%d\r\n",child_state);
    234          #endif
    235          #if(BT_MODULE == USE_BT816)
    236          	BT816_wakeup();
    237          #endif
    238          	if (child_state == 2)
    239          	{
    240          #if(BT_MODULE == USE_WBTDS01)
    241          		WBTD_Reset();
    242          #else
    243          		BT816_enter_pair_mode();
    244          #endif
    245          		hw_platform_beep_ctrl(300,3000);
    246          		hw_platform_start_led_blink(LED_BLUE,10);
    247          #if(BT_MODULE == USE_WBTDS01)
    248          		WBTD_set_autocon(0);
    249          #endif
    250          	}
    251          	else if (child_state == 0)
    252          	{
    253          		hw_platform_start_led_blink(LED_BLUE,150);
    254          	}
    255          	else
    256          	{
    257          		hw_platform_led_ctrl(LED_BLUE,1);
    258          	}
    259          	g_param.last_state = 0;
    260          	SaveTerminalPara();
    261          }
    262          
    263          /**
    264          * @brief	退出BT模式时，需要进行的一些设置
    265          * @param[in] unsigned char	child_state		0: disconnect  1：connected  2：:waitpair
    266          */
    267          static inline void exit_from_BT_Mode(unsigned char child_state)
    268          {
    269          #ifdef DEBUG_VER
    270          	printf("exit from BT Mode:%d\r\n",child_state);
    271          #endif
    272          	if (child_state == 1)
    273          	{
    274          #if(BT_MODULE == USE_WBTDS01)
    275          		WBTD_set_autocon(1);
    276          #else
    277          		//BT816_set_autocon(0);
    278          		BT816_hid_disconnect();
    279          #endif
    280          		//delay_ms(1);
    281          		hw_platform_beep_ctrl(300,3000);
    282          		hw_platform_led_ctrl(LED_BLUE,0);
    283          #if(BT_MODULE == USE_WBTDS01)
    284          		WBTD_Reset();//主动断开与蓝牙主机的连接	
    285          #endif	
    286          	}
    287          	else
    288          	{
    289          		hw_platform_stop_led_blink(LED_BLUE);
    290          	}
    291          }
    292          
    293          
    294          /**
    295          * @brief	通过USB HID发送条码
    296          */
    297          static void barcode_hid_send(unsigned char* barcode)
    298          {
    299          	unsigned int	i,code_len;
    300          	unsigned char key_value_report[8];
    301          
    302              code_len = strlen((char const*)barcode);
    303          	OSSchedLock();
    304          	for (i = 0; i < code_len; i++)
    305          	{
    306          		ascii_to_keyreport(barcode[i],key_value_report);
    307          
    308          		SendData_To_PC(key_value_report, 3);
    309          		SendData_To_PC("\x00\x00\x00", 3);
    310          	}
    311          
    312          	memcpy(key_value_report,"\x00\x00\x28",3);	//换行
    313          
    314          	SendData_To_PC(key_value_report, 3);
    315          	SendData_To_PC("\x00\x00\x00", 3);	//弹起
    316          	OSSchedUnlock();
    317          }
    318          
    319          /**
    320          * @brief	应用的初始化
    321          */
    322          void app_init(void)
    323          {
    324          	//创建一个消息队列，用于将事件捕获线程和蓝牙模块线程获取的异步事件通知给主状态机线程
    325          	pEvent_Queue = OSQCreate((void**)&event_pool,EVENT_CASH_NUM);
    326          	assert(pEvent_Queue != (OS_EVENT*)0);
    327          
    328          	//创建一个消息队列，用于将主状态机线程获取的条码传送到蓝牙模块线程.
    329          	pBarcode_Queue =OSQCreate((void**)&barcode_pool,BARCODE_CASH_NUM);
    330          	assert(pBarcode_Queue != (OS_EVENT*)0);
    331          	memset(barcode_cash,0,BARCODE_CASH_NUM*(MAX_BARCODE_LEN+2));
    332          
    333          	//创建一个信号量，用于IO中断通知事件捕获线程，有外部IO产生，需要事件捕获线程开始采取捕获事件的动作
    334          	pIOSem = OSSemCreate(0);
    335          	assert(pIOSem != (OS_EVENT*)0);
    336          
    337          	lowpower_state = 0;
    338          	lowpower_cnt = 0;
    339          }
    340          
    341          /**
    342          * @brief	维护主状态机的线程
    343          */
    344          void State_Machine_thread(void *p)
    345          {
    346          	unsigned int	i,cnt,event;
    347          	unsigned char	err;
    348          	unsigned char   codetype[20];
    349          	unsigned int    codelen;
    350          	int				ret,index;
    351          	unsigned int	last_state;
    352          	unsigned char	*rec;
    353          
    354          	Jfree(p_init_thread_stk);	//退出初始化线程时，释放自己的任务栈
    355          
    356          	//hw_platform_led_blink_test();		//for test
    357          	//lowpower_tip();					//for test
    358          	//record_m_test();					//for test
    359          	
    360          	while(1)
    361          	{
    362          		event = (unsigned int)OSQPend(pEvent_Queue,25,&err);
    363          		if (event == 0)
    364          		{
    365          			if ((g_param.lower_power_timeout)&&(device_current_state != STATE_HID_Mode))
    366          			{
    367          				keypress_timeout++;
    368          				if (keypress_timeout == g_param.lower_power_timeout*4*60)
    369          				{
    370          					hw_platform_beep_ctrl(500,3000);
    371          #ifndef DEBUG_VER
    372          					EnterLowPowerMode();
    373          					ExitLowPowerMode();
    374          #endif	
    375          					hw_platform_beep_ctrl(500,3000);
    376          				}
    377          			}
    378          			continue;
    379          		}
    380          #ifdef DEBUG_VER
    381          		printf("current state:%d\r\n",device_current_state);
    382          		printf("event:%d\r\n",event);
    383          #endif
    384          		if(device_current_state ==  STATE_BT_Mode_Disconnect)
    385          		{
    386          			switch(event)
    387          			{
    388          			//case EVENT_SCAN_KEY_SINGLE_CLICK:
    389          			//case EVENT_SCAN_KEY_DOUBLE_CLICK:
    390          			//	ret = scanner_get_barcode(barcode,MAX_BARCODE_LEN,codetype,&codelen);	//扫描条码
    391          			//	hw_platform_stop_led_blink(LED_GREEN);
    392          			//	if (ret == 0)
    393          			case EVENT_SCAN_GOT_BARCODE:
    394          				scan_barcode_ok_tip();
    395          				if (lowpower_state)
    396          				{
    397          					lowpower_tip();
    398          				}
    399          				//只是扫描到条码而已，什么都不做
    400          				break;
    401          			case EVENT_SCAN_KEY_LONG_PRESS:
    402          				//切换到Memory Mode
    403          				hw_platform_stop_led_blink(LED_GREEN);
    404          				exit_from_BT_Mode(0);
    405          				device_current_state = STATE_Memory_Mode;
    406          				hw_platform_beep_ctrl(300,3000);
    407          				enter_into_Memory_Mode();
    408          				break;
    409          			case EVENT_ERASE_KEY_SINGLE_CLICK:
    410          				break;
    411          			case EVENT_ERASE_KEY_LONG_PRESS:
    412          				//切换到配对模式
    413          				exit_from_BT_Mode(0);
    414          				device_current_state = STATE_BT_Mode_WaitPair;
    415          				enter_into_BT_Mode(2);
    416          				break;
    417          			case EVENT_RESET_KEY_PRESS:
    418          				break;
    419          			case EVENT_BT_CONNECTED:
    420          				//切换到蓝牙连接模式
    421          				exit_from_BT_Mode(0);
    422          				device_current_state = STATE_BT_Mode_Connect;
    423          				enter_into_BT_Mode(1);
    424          				break;
    425          			case EVENT_BT_DISCONNECTED:
    426          				break;
    427          			case EVENT_USB_CABLE_INSERT:
    428          				//切换到USB HID模式
    429          				exit_from_BT_Mode(0);
    430          				last_state = STATE_BT_Mode_Disconnect;
    431          				device_current_state = STATE_HID_Mode;
    432          				enter_into_USB_HID_Mode();
    433          				break;
    434          			case EVENT_USB_CABLE_REMOVE:
    435          				break;
    436          			case EVENT_LOW_POWER:
    437          				lowpower_tip();
    438          				break;
    439          			default:
    440          				break;
    441          			}
    442          		}
    443          		else if(device_current_state ==  STATE_BT_Mode_Connect)
    444          		{
    445          			switch(event)
    446          			{
    447          			//case EVENT_SCAN_KEY_SINGLE_CLICK:
    448          				//扫描条码
    449          			//	ret = scanner_get_barcode(barcode,MAX_BARCODE_LEN,codetype,&codelen);
    450          			//	hw_platform_stop_led_blink(LED_GREEN);
    451          			//	if (ret != 0)
    452          			//	{
    453          			//		break;
    454          			//	}
    455          			case EVENT_SCAN_GOT_BARCODE:
    456          				scan_barcode_ok_tip();
    457          				if (lowpower_state)
    458          				{
    459          					lowpower_tip();
    460          				}
    461          				//扫描到条码了
    462          				//将获取到的条码先push到cash缓存起来，然后Post到系统的
    463          				//Queue，由蓝牙模块线程负责去发送到主机
    464          repost:
    465          				ret = OSQPost(pBarcode_Queue,(void*)push_barcode_into_cash((unsigned char*)barcode));
    466          				if(ret != OS_ERR_NONE)
    467          				{
    468          					if(ret == OS_ERR_Q_FULL || ret == OS_ERR_PEVENT_NULL)
    469          					{
    470          						//如果队列满了或者空事件时，那么需要延时重试
    471          						OSTimeDlyHMSM(0,0,0,100);
    472          						goto repost;
    473          					}
    474          					else
    475          					{
    476          						assert(0);	//系统错误
    477          					}
    478          				}
    479          				break;
    480          			case EVENT_SCAN_KEY_DOUBLE_CLICK:
    481          				if (g_param.ios_softkeypad_enable)
    482          				{
    483          #if(BT_MODULE == USE_WBTDS01)
    484          					WBTD_set_ioskeypad(1);
    485          #else
    486          					BT816_toggle_ioskeypad();
    487          #endif
    488          				}
    489          				break;
    490          			case EVENT_SCAN_KEY_LONG_PRESS:
    491          				hw_platform_stop_led_blink(LED_GREEN);
    492          				//切换到Memory mode
    493          				exit_from_BT_Mode(1);
    494          				device_current_state = STATE_Memory_Mode;
    495          				hw_platform_beep_ctrl(300,3000);
    496          				enter_into_Memory_Mode();
    497          				break;
    498          			case EVENT_ERASE_KEY_SINGLE_CLICK:
    499          #if(BT_MODULE == USE_WBTDS01)
    500          				//WBTD_hid_send_test();
    501          #else
    502          				//BT816_hid_send_test();
    503          #endif
    504          				break;
    505          			case EVENT_ERASE_KEY_LONG_PRESS:
    506          				//进入配对模式
    507          				exit_from_BT_Mode(1);
    508          				device_current_state = STATE_BT_Mode_WaitPair;
    509          				enter_into_BT_Mode(2);
    510          				break;
    511          			case EVENT_RESET_KEY_PRESS:
    512          				//@todo...
    513          				break;
    514          			case EVENT_BT_CONNECTED:
    515          				break;
    516          			case EVENT_BT_DISCONNECTED:
    517          				//切换到蓝牙断开状态
    518          				exit_from_BT_Mode(1);
    519          				device_current_state = STATE_BT_Mode_Disconnect;
    520          				enter_into_BT_Mode(0);
    521          				break;
    522          			case EVENT_USB_CABLE_INSERT:
    523          				//切换到USB HID模式
    524          				exit_from_BT_Mode(1);
    525          				last_state = STATE_BT_Mode_Disconnect;
    526          				device_current_state = STATE_HID_Mode;
    527          				enter_into_USB_HID_Mode();
    528          				break;
    529          			case EVENT_USB_CABLE_REMOVE:
    530          				break;
    531          			case EVENT_LOW_POWER:
    532          				lowpower_tip();
    533          				break;
    534          			default:
    535          				break;
    536          			}
    537          		}
    538          		else if(device_current_state ==  STATE_BT_Mode_WaitPair)
    539          		{
    540          			switch(event)
    541          			{
    542          			//case EVENT_SCAN_KEY_SINGLE_CLICK:
    543          			//case EVENT_SCAN_KEY_DOUBLE_CLICK:
    544          			//	ret = scanner_get_barcode(barcode,MAX_BARCODE_LEN,codetype,&codelen);	//扫描条码
    545          			//	hw_platform_stop_led_blink(LED_GREEN);
    546          			//	if (ret == 0)
    547          			case EVENT_SCAN_GOT_BARCODE:
    548          				
    549          				scan_barcode_ok_tip();
    550          				
    551          				if (lowpower_state)
    552          				{
    553          					lowpower_tip();
    554          				}
    555          				//只是扫描到条码而已，什么都不做
    556          				break;
    557          			case EVENT_SCAN_KEY_LONG_PRESS:
    558          				hw_platform_stop_led_blink(LED_GREEN);
    559          				//切换到Memory Mode
    560          				exit_from_BT_Mode(2);
    561          				device_current_state = STATE_Memory_Mode;
    562          				hw_platform_beep_ctrl(300,3000);
    563          				enter_into_Memory_Mode();
    564          				break;
    565          			case EVENT_ERASE_KEY_SINGLE_CLICK:
    566          				break;
    567          			case EVENT_ERASE_KEY_LONG_PRESS:
    568          				//已经是配对模式，什么都不做
    569          				break;
    570          			case EVENT_RESET_KEY_PRESS:
    571          				//@todo...
    572          				break;
    573          			case EVENT_BT_CONNECTED:
    574          				//切换到蓝牙连接状态
    575          				exit_from_BT_Mode(2);
    576          				device_current_state = STATE_BT_Mode_Connect;
    577          				enter_into_BT_Mode(1);
    578          				break;
    579          			case EVENT_BT_DISCONNECTED:
    580          				break;
    581          			case EVENT_USB_CABLE_INSERT:
    582          				//切换到USB HID模式
    583          				exit_from_BT_Mode(2);
    584          				last_state = STATE_BT_Mode_WaitPair;
    585          				device_current_state = STATE_HID_Mode;
    586          				enter_into_USB_HID_Mode();
    587          				break;
    588          			case EVENT_USB_CABLE_REMOVE:
    589          				break;
    590          			case EVENT_LOW_POWER:
    591          				lowpower_tip();
    592          				break;
    593          			default:
    594          				break;
    595          			}
    596          		}
    597          		else if(device_current_state ==  STATE_Memory_Mode)
    598          		{
    599          			switch(event)
    600          			{
    601          			//case EVENT_SCAN_KEY_SINGLE_CLICK:
    602          				//扫描条码
    603          			//	ret = scanner_get_barcode(barcode,MAX_BARCODE_LEN,codetype,&codelen);
    604          			//	hw_platform_stop_led_blink(LED_GREEN);
    605          			//	if (ret != 0)
    606          			//	{
    607          			//		break;
    608          			//	}
    609          			case EVENT_SCAN_GOT_BARCODE:
    610          				scan_barcode_ok_tip();
    611          				if (lowpower_state)
    612          				{
    613          					lowpower_tip();
    614          				}
    615          				//扫描到条码了
    616          				//将获取到的条码保存到memory
    617          				memset((void*)&batch_node,0,sizeof(TBATCH_NODE));
    618          				strcpy((char*)batch_node.barcode,(char const*)barcode);
    619          				ret = record_add((unsigned char*)&batch_node);
    620          				if (ret)
    621          				{
    622          					//记录保存失败，给出提示给用户
    623          					//@todo...
    624          
    625          				}
    626          				break;
    627          			case EVENT_SCAN_KEY_LONG_PRESS:
    628          				hw_platform_stop_led_blink(LED_GREEN);
    629          				//切换至蓝牙模式
    630          				exit_from_Memory_Mode();
    631          				device_current_state = STATE_BT_Mode_Disconnect;
    632          				enter_into_BT_Mode(0);
    633          				break;
    634          			case EVENT_ERASE_KEY_SINGLE_CLICK:
    635          				//删除扫到的条码对应的最后一笔资料
    636          				ret = scanner_get_barcode(barcode,MAX_BARCODE_LEN,codetype,&codelen);
    637          				if (ret != 0)
    638          				{
    639          					break;
    640          				}
    641          				scan_barcode_ok_tip();
    642          				if (lowpower_state)
    643          				{
    644          					lowpower_tip();
    645          				}
    646          				OSSchedLock();
    647          				rec = rec_searchby_tag(barcode,&index);
    648          				OSSchedUnlock();
    649          				if (rec)
    650          				{
    651          					ret = delete_one_node(index);
    652          					if (ret)
    653          					{
    654          						//提示用户，删除失败
    655          						//@todo...
    656          					}
    657          				}
    658          				break;
    659          			case EVENT_ERASE_KEY_LONG_PRESS:
    660          				//删除所有的条码记录
    661          				ret = record_clear();
    662          				if (ret)
    663          				{
    664          					//提示用户，删除失败
    665          					//@todo...
    666          				}
    667          				hw_platform_beep_ctrl(300,3000);
    668          				break;
    669          			case EVENT_RESET_KEY_PRESS:
    670          				//@todo...
    671          				break;
    672          			case EVENT_BT_CONNECTED:
    673          				break;
    674          			case EVENT_BT_DISCONNECTED:
    675          				break;
    676          			case EVENT_USB_CABLE_INSERT:
    677          				//切换到USB HID模式
    678          				exit_from_Memory_Mode();
    679          				last_state = STATE_Memory_Mode;
    680          				device_current_state = STATE_HID_Mode;
    681          				enter_into_USB_HID_Mode();
    682          				break;
    683          			case EVENT_USB_CABLE_REMOVE:
    684          				break;
    685          			case EVENT_LOW_POWER:
    686          				lowpower_tip();
    687          				break;
    688          			default:
    689          				break;
    690          			}
    691          		}
    692          		else if(device_current_state ==  STATE_HID_Mode)
    693          		{
    694          			switch(event)
    695          			{
    696          			//case EVENT_SCAN_KEY_SINGLE_CLICK:
    697          			//	ret = scanner_get_barcode(barcode,MAX_BARCODE_LEN,codetype,&codelen);
    698          			//	hw_platform_stop_led_blink(LED_GREEN);
    699          			//	if(ret !=0)	//扫描条码
    700          			//	{
    701          			//		break;
    702          			//	}
    703          			case EVENT_SCAN_GOT_BARCODE:
    704          				scan_barcode_ok_tip();
    705          				//将扫描到的条码通过HID 接口发送出去
    706          				barcode_hid_send(barcode);
    707          				break;
    708          			case EVENT_SCAN_KEY_LONG_PRESS:
    709          				hw_platform_stop_led_blink(LED_GREEN);
    710          				break;
    711          			case EVENT_ERASE_KEY_SINGLE_CLICK:
    712          				break;
    713          			case EVENT_ERASE_KEY_LONG_PRESS:
    714          				//将所有保存在Memory中的条码，全部上传到PC
    715          				hw_platform_beep_ctrl(300,3000);
    716          				cnt = record_module_count();
    717          				for (i = 0; i < cnt;i++)
    718          				{
    719          					rec = get_node((i==0)?0:2,0);
    720          					if (rec)
    721          					{
    722          						barcode_hid_send(((TBATCH_NODE*)rec)->barcode);
    723          					}
    724          					else
    725          					{
    726          						//提示用户读取失败一次
    727          						//@todo...
    728          					}
    729          				}
    730          				hw_platform_beep_ctrl(300,3000);
    731          				break;
    732          			case EVENT_RESET_KEY_PRESS:
    733          				//@todo...
    734          				break;
    735          			case EVENT_BT_CONNECTED:
    736          				break;
    737          			case EVENT_BT_DISCONNECTED:
    738          				break;
    739          			case EVENT_USB_CABLE_INSERT:
    740          				break;
    741          			case EVENT_USB_CABLE_REMOVE:
    742          				//切换到之前的状态
    743          				exit_from_USB_HID_Mode();
    744          				device_current_state = last_state;
    745          				if (device_current_state == STATE_Memory_Mode)
    746          				{
    747          					enter_into_Memory_Mode();
    748          				}
    749          				else if (device_current_state == STATE_BT_Mode_WaitPair)
    750          				{
    751          					enter_into_BT_Mode(2);
    752          				}
    753          				else
    754          				{
    755          					enter_into_BT_Mode(0);
    756          				}
    757          				break;
    758          			case EVENT_LOW_POWER:
    759          				break;
    760          			default:
    761          				break;
    762          			}
    763          		}
    764          	}
    765          }
    766          
    767          /**
    768          * @brief	获取部分异步事件的线程
    769          * @note     另外一些异步事件的检测在中断服务程序中post或者另外的线程post出来
    770          *			比如：按键事件会在定时器中断的服务程序post出来
    771          *				  USB线的插入（实际上是USB HID device被枚举成功）会在USB的中断服务程序给出
    772          *				  蓝牙连接的状态变化会在蓝牙模块的维护线程给出
    773          *				  此线程只负责一些周期性的状态检查事件，电池电量低、USB线是否被拔出
    774          */
    775          void Event_capture_thread(void *p)
    776          {
    777          #ifdef DEBUG_VER
    778          	printf("Enter into Event_capture_thread!\r\n");
    779          #endif
    780          	while (1)
    781          	{
    782          		if (device_current_state == STATE_HID_Mode)
    783          		{
    784          			lowpower_state = 0;
    785          			lowpower_cnt = 0;
    786          			//判断USB线的拔出
    787          			if (bDeviceState == UNCONNECTED)
    788          			{
    789          #ifdef DEBUG_VER
    790          				printf("usb cable remove detected!\r\n");
    791          #endif
    792          				OSQPost(pEvent_Queue,(void*)EVENT_USB_CABLE_REMOVE);
    793          			}
    794          
    795          			if (hw_platform_ChargeState_Detect())
    796          			{
    797          				//充电完成
    798          				hw_platform_led_ctrl(LED_RED,0);
    799          			}
    800          
    801          			OSTimeDlyHMSM(0,0,0,50);	//50ms的频率运行此线程
    802          		}
    803          		else
    804          		{
    805          			//判断电池电量低
    806          			if (hw_platform_get_PowerClass() == 0)
    807          			{
    808          				lowpower_cnt++;
    809          				if (lowpower_cnt>10)
    810          				{
    811          #ifdef DEBUG_VER
    812          					printf("low power detected!\r\n");
    813          #endif
    814          					if (lowpower_state == 0)
    815          					{
    816          						OSQPost(pEvent_Queue,(void*)EVENT_LOW_POWER);
    817          						lowpower_state = 1;
    818          					}
    819          					
    820          				}
    821          			}
    822          			else
    823          			{
    824          				lowpower_cnt = 0;
    825          			}
    826          
    827          			if (bDeviceState == CONFIGURED)
    828          			{
    829          #ifdef DEBUG_VER
    830          				printf("USB HID Enum OK detected!\r\n");
    831          #endif
    832          				OSQPost(pEvent_Queue,(void*)EVENT_USB_CABLE_INSERT);
    833          			}
    834          			OSTimeDlyHMSM(0,0,0,50);	//50ms的频率运行此线程
    835          		}
    836          	}
    837          }
    838          
    839          
    840          /*
    841           * @brief 蓝牙模块维护线程
    842           * @note  此线程需要完成两个任务：
    843           *        1 : 监测蓝牙模块是否有返回连接状态变化的指示信号回来，如果监测到了，发出事件消息出来
    844           *        2 ：检测是否有数据需要通过蓝牙模块发送，如果有就发送出去
    845          */
    846          void BT_Daemon_thread(void *p)
    847          {
    848          #if(BT_MODULE == USE_BT816)
    849          	static unsigned int last_status;
    850          #endif
    851          	int ret;
    852              unsigned int len;
    853          	unsigned char	err;
    854          	unsigned char	*pbarcode;
    855          
    856          #if(BT_MODULE == USE_WBTDS01)
    857          	ret = WBTD_init();
    858          #else
    859          	ret = BT816_init();
    860          	last_status = BT_MODULE_STATUS_DISCONNECT;
    861          #endif
    862          	if (ret)
    863          	{
    864          #if(BT_MODULE == USE_WBTDS01)
    865          		WBTD_Reset();
    866          		ret = WBTD_init();
    867          #else
    868          		ret = BT816_init();
    869          #endif
    870          		assert(ret == 0);
    871          	}
    872          
    873          #ifdef DEBUG_VER
    874          	printf("BT Module init Success!\r\n");
    875          #endif
    876          
    877          #if(BT_MODULE == USE_BT816)
    878          	//BT816_hid_connect_last_host();		//试图连接最近一次的蓝牙主机
    879          #endif
    880          
    881          
    882          	//for test SPP mode
    883          	//while(1)
    884          	//{
    885          	//	if (spp_buffer_head)
    886          	//	{
    887          	//		printf("spp reclen=%d\r\n",spp_buffer_head);
    888          
    889          	//		for (len = 0; len < spp_buffer_head;len++)
    890          	//		{
    891          	//			printf("0x%x,",spp_rec_buffer[len]);
    892          	//		}
    893          	//		printf("\r\n");
    894          
    895          	//		spp_buffer_head = 0;
    896          	//	}
    897          
    898          	//	OSTimeDlyHMSM(0,0,0,50);
    899          	//}
    900          
    901          	while (1)
    902          	{
    903          #if(BT_MODULE == USE_WBTDS01)
    904          		ret = WBTD_got_notify_type();
    905          		if ((ret == BT_MODULE_STATUS_CONNECTED) || (ret == BT_MODULE_STATUS_DISCONNECT))
    906          		{
    907          #ifdef DEBUG_VER
    908          			printf("BT Module Status = %s!\r\n",(ret==1)?"Connected":"Disconnect");
    909          #endif
    910          			OSQPost(pEvent_Queue,(void*)((ret == BT_MODULE_STATUS_CONNECTED)?EVENT_BT_CONNECTED:EVENT_BT_DISCONNECTED));
    911          		}
    912          #else
    913          		ret = BT816_hid_status();
    914          		if ((ret == BT_MODULE_STATUS_CONNECTED)||(ret == BT_MODULE_STATUS_DISCONNECT))
    915          		{
    916          			if (ret != last_status)
    917          			{
    918          				last_status = ret;
    919          
    920          #ifdef DEBUG_VER
    921          				printf("BT Module Status = %s!\r\n",(ret==BT_MODULE_STATUS_CONNECTED)?"Connected":"Disconnect");
    922          #endif
    923          				OSQPost(pEvent_Queue,(void*)((ret == BT_MODULE_STATUS_CONNECTED)?EVENT_BT_CONNECTED:EVENT_BT_DISCONNECTED));
    924          			}
    925          			else
    926          			{
    927          				if ((ret == BT_MODULE_STATUS_DISCONNECT)&&(device_current_state != STATE_BT_Mode_WaitPair))
    928          				{
    929          					//发送一个键值，试图重连蓝牙主机
    930          					//BT816_hid_send("1",1);
    931          					BT816_hid_connect_last_host();
    932          				}
    933          			}
    934          		}
    935          #endif
    936          
    937          
    938          		pbarcode = (unsigned char*)OSQPend(pBarcode_Queue,20,&err);
    939          		if (pbarcode)
    940          		{
    941          #ifdef DEBUG_VER
    942          			printf("BT Module got data(%s) to send!\r\n",pbarcode);
    943          #endif
    944          #if(BT_MODULE == USE_WBTDS01)
    945          			if (WBTD_hid_send(pbarcode,strlen((char const*)pbarcode),&len))
    946          #else
    947          			if (BT816_hid_send(pbarcode,strlen((char const*)pbarcode)))
    948          #endif
    949          			{
    950          				//发送失败应该怎么处理，什么都不做了么????!!!!
    951          				//@todo...
    952          #ifdef DEBUG_VER
    953          				printf("BT Module send data Fail!\r\n");
    954          #endif
    955          			}
    956          			else
    957          			{
    958          				pull_barcode_from_cash(pbarcode);
    959          				//OSTimeDlyHMSM(0,0,0,50);
    960          
    961          #ifdef DEBUG_VER
    962          				printf("BT Module send data Success!\r\n");
    963          #endif
    964          			}
    965          		}
    966          	}
    967          }
    968          
    969          
    970          /*
    971           * @brief进入U盘模式
    972          */
    973          void u_disk_proc(void)
    974          {
    975          	//g_mass_storage_device_type = MASSTORAGE_DEVICE_TYPE_SPI_FLASH;
    976          	//usb_device_init(USB_MASSSTORAGE);
    977          
    978          	OSSchedLock();
    979          
    980          	while(hw_platform_USBcable_Insert_Detect() == 1)
    981          	{	
    982          		if(bDeviceState != CONFIGURED)
    983          		{
    984          			break;
    985          		}
    986          
    987          		delay_ms(1);
    988          	}
    989          
    990          	OSSchedUnlock();
    991          }
    992          
    993          /*
    994           * @brief 低电量提示,红灯持续5S的闪烁
    995           * @return 0:提示期间没有USB线的插入		1:提示期间有USB线的插入
    996          */
    997          int lowpower_tip(void)
    998          {
    999          	int i;
   1000          	OSSchedLock();
   1001          	hw_platform_start_led_blink(LED_RED,5);
   1002          	for (i = 0; i<20;i++)
   1003          	{
   1004          		hw_platform_beep_ctrl(50,1000);
   1005          		if (hw_platform_USBcable_Insert_Detect())
   1006          		{
   1007          			hw_platform_stop_led_blink(LED_RED);
   1008          			OSSchedUnlock();
   1009          			return 1;
   1010          		}
   1011          	}
   1012          	hw_platform_stop_led_blink(LED_RED);
   1013          	OSSchedUnlock();
   1014          	return 0;
   1015          }
   1016          
   1017          /*
   1018           * @brief 系统错误的提示
   1019          */
   1020          void system_err_tip(void)
   1021          {
   1022          	while(1)
   1023          	{
   1024          		//@todo...
   1025          	}
   1026          }
   1027          
   1028          
   1029          // Cortex System Control register address
   1030          #define SCB_SysCtrl					((u32)0xE000ED10)
   1031          // SLEEPDEEP bit mask
   1032          #define SysCtrl_SLEEPDEEP_Set		((u32)0x00000004)
   1033          
   1034          /*
   1035           * @brief 初始化线程
   1036           */
   1037          void app_init_thread(void *p)
   1038          {
   1039          	int ret;
   1040          #ifdef DEBUG_VER
   1041          	printf("app init thread startup...\r\n");
   1042          #endif
   1043          
   1044          	OS_CPU_SysTickInit();
   1045          
   1046          	app_init();
   1047          
   1048          	Keypad_Init();
   1049          
   1050          	ret = record_module_init();
   1051          	if (ret != 0)
   1052          	{
   1053          		system_err_tip();
   1054          	}
   1055          
   1056          	if (recover_record_by_logfile())
   1057          	{
   1058          		system_err_tip();
   1059          	}
   1060          
   1061          	if (ReadTerminalPara())
   1062          	{
   1063          		if (DefaultTerminalPara())
   1064          		{
   1065          			system_err_tip();
   1066          		}
   1067          	}
   1068          
   1069          	if (g_param.last_state == 1)
   1070          	{
   1071          		device_current_state = STATE_Memory_Mode;	//脱机状态
   1072          		enter_into_Memory_Mode();
   1073          	}
   1074          	else
   1075          	{
   1076          		device_current_state = STATE_BT_Mode_Disconnect;	//蓝牙模式未连接状态
   1077          		hw_platform_start_led_blink(LED_BLUE,150);
   1078          	}
   1079          
   1080          	scanner_mod_init();
   1081          
   1082          	//usb_device_init(USB_KEYBOARD);
   1083          
   1084          	OSTaskCreateExt(State_Machine_thread,
   1085          		(void *)0,
   1086          		&thread_statemachine_stk[STACK_SIZE_TASKSM-1],
   1087          		8,
   1088          		8,
   1089          		&thread_statemachine_stk[0],
   1090          		STACK_SIZE_TASKSM,
   1091          		(void *)0,
   1092          		(INT16U)(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
   1093          
   1094          	OSTaskCreateExt(Event_capture_thread,
   1095          		(void *)0,
   1096          		&thread_eventcapture_stk[STACK_SIZE_TASKEC-1],
   1097          		7,
   1098          		7,
   1099          		&thread_eventcapture_stk[0],
   1100          		STACK_SIZE_TASKEC,
   1101          		(void *)0,
   1102          		(INT16U)(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
   1103          
   1104          	OSTaskCreateExt(BT_Daemon_thread,
   1105          		(void *)0,
   1106          		&thread_bt_stk[STACK_SIZE_TASKBT-1],
   1107          		6,
   1108          		6,
   1109          		&thread_bt_stk[0],
   1110          		STACK_SIZE_TASKBT,
   1111          		(void *)0,
   1112          		(INT16U)(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
   1113          
   1114          	OSTimeDlyHMSM(0,0,0,10);
   1115          	OSTaskDel(OS_PRIO_SELF);
   1116          }
   1117          
   1118          /*
   1119           * @brief 启动应用
   1120           */
   1121          void app_startup(void)
   1122          {
   1123          	memset((void*)thread_eventcapture_stk, 0xAA, sizeof(thread_eventcapture_stk));
   1124          	memset((void*)thread_statemachine_stk, 0xBB, sizeof(thread_statemachine_stk));
   1125          	memset((void*)thread_bt_stk, 0xCC, sizeof(thread_bt_stk));
   1126          
   1127          	OSInit();
   1128          
   1129          	OSDebugInit();
   1130          
   1131          	p_init_thread_stk = (OS_STK*)Jmalloc(STACK_SIZE_TASKINI*sizeof(OS_STK));
   1132          	assert(p_init_thread_stk != 0);
   1133          
   1134          	OSTaskCreateExt(app_init_thread,
   1135          		(void *)0,
   1136          		&p_init_thread_stk[STACK_SIZE_TASKINI-1],
   1137          		5,
   1138          		5,
   1139          		&p_init_thread_stk[0],
   1140          		STACK_SIZE_TASKINI,
   1141          		(void *)0,
   1142          		(INT16U)(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
   1143          
   1144          	OSStart();
   1145          }
   1146          

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     BT_Daemon_thread            16
     Event_capture_thread         8
     State_Machine_thread        56
     app_init                     8
     app_init_thread             32
     app_startup                 32
     barcode_hid_send            24
     enter_into_BT_Mode           8
     enter_into_Memory_Mode       8
     enter_into_USB_HID_Mode      8
     exit_from_BT_Mode            8
     exit_from_Memory_Mode        0
     exit_from_USB_HID_Mode       8
     lowpower_tip                 8
     memcpy                       8
     memset                       8
     pull_barcode_from_cash       8
     push_barcode_into_cash      16
     scan_barcode_ok_tip          8
     system_err_tip               0
     u_disk_proc                  8


   Section sizes:

     Function/Label                              Bytes
     --------------                              -----
     memcpy                                        14
     memset                                        20
     thread_eventcapture_stk                      512
     thread_statemachine_stk                     1424
     thread_bt_stk                                512
     p_init_thread_stk                              4
     barcode_pool                                  60
     barcode_cash                                1232
     lowpower_state                                 1
     lowpower_cnt                                   1
     batch_node                                    84
     pBarcode_Queue                                 4
     event_pool                                    32
     pEvent_Queue                                   4
     pIOSem                                         4
     device_current_state                           4
     keypress_timeout                               4
     barcode                                       84
     scan_barcode_ok_tip                           64
     push_barcode_into_cash                       114
     pull_barcode_from_cash                       108
     enter_into_Memory_Mode                        20
     exit_from_Memory_Mode                          2
     enter_into_USB_HID_Mode                       96
     exit_from_USB_HID_Mode                        12
     enter_into_BT_Mode                            78
     exit_from_BT_Mode                             42
     barcode_hid_send                              92
     app_init                                     176
     State_Machine_thread                        1196
     Event_capture_thread                         160
     BT_Daemon_thread                             156
     last_status                                    4
     u_disk_proc                                   38
     lowpower_tip                                  70
     system_err_tip                                 2
     app_init_thread                              232
     app_startup                                  136
     ??DataTable20                                  4
     ??DataTable68                                  4
     ??DataTable71                                  4
     ??DataTable74                                  4
     ??DataTable75                                  4
     ??DataTable76                                  4
     ??DataTable77                                  4
     ??DataTable79                                  4
     ??DataTable83                                  4
     ??DataTable84                                  4
     ??DataTable85                                  4
     ??DataTable88                                  4
     ??DataTable90                                  4
     ?<Constant "(int)barcode_addr >= ...">        44
     ?<Constant "E:\\H520B\\FW\\src\\App\\a...">   28
     ?<Constant "(int)barcode_addr <= ...">        60
     ?<Constant "((int)barcode_addr - ...">        68
     ?<Constant "\000\000\000">                     4
     ?<Constant "\000\000(">                        4
     ?<Constant "pEvent_Queue != (OS_E...">        32
     ?<Constant "pBarcode_Queue != (OS...">        32
     ?<Constant "pIOSem != (OS_EVENT*)0">          24
     ?<Constant "0">                                2
     ?<Constant "ret == 0">                        12
     ?<Constant "p_init_thread_stk != 0">          24

 
 3 970 bytes in section .bss
   334 bytes in section .rodata
 2 880 bytes in section .text
 
 2 846 bytes of CODE  memory (+ 34 bytes shared)
   334 bytes of CONST memory
 3 970 bytes of DATA  memory

Errors: none
Warnings: 1
