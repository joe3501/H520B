###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     29/Sep/2015  11:20:10 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\H520B\FW\src\App\app.c                                #
#    Command line =  E:\H520B\FW\src\App\app.c -lcN                           #
#                    E:\H520B\FW\src\Project\EWARMv5\Debug\List\ -o           #
#                    E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\ --no_cse      #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    5.4\arm\INC\DLib_Config_Full.h" -I                       #
#                    E:\H520B\FW\src\Project\EWARMv5\..\ -I                   #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\App\ -I            #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Drivers\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\FatFs\ -I          #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Lib\inc\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-CPU\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-LIB\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Ports #
#                    \ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\ #
#                    Source\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC #
#                    -Probe\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\usb_lib #
#                    \ -I "C:\Program Files\IAR Systems\Embedded Workbench    #
#                    5.4\arm\INC\" -Ol                                        #
#    List file    =  E:\H520B\FW\src\Project\EWARMv5\Debug\List\app.lst       #
#    Object file  =  E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\app.o          #
#                                                                             #
#                                                                             #
###############################################################################

E:\H520B\FW\src\App\app.c
      1          /**
      2          * @file app.c
      3          * @brief H520B 蓝牙条码数据采集器项目APP
      4          * @version V0.0.1
      5          * @author joe.zhou
      6          * @date 2015年08月31日
      7          * @note
      8          * @copy
      9          *
     10          * 此代码为深圳合杰电子有限公司项目代码，任何人及公司未经许可不得复制传播，或用于
     11          * 本公司以外的项目。本司保留一切追究权利。
     12          *
     13          * <h1><center>&copy; COPYRIGHT 2015 heroje</center></h1>
     14          *
     15          */
     16          #include "ucos_ii.h"
     17          #include "app.h"
     18          #include "hw_platform.h"
     19          #include "usb_pwr.h"
     20          #include <string.h>
     21          #include <assert.h>
     22          #include "JMemory.h"
     23          #include "TimeBase.h"
     24          #include "hw_config.h"
     25          #include "basic_fun.h"
     26          #include <stdio.h>
     27          #include "record_m.h"
     28          #include "Terminal_Para.h"
     29          #include "usb_lib.h"
     30          #include "PCUsart.h"
     31          
     32          //定义主状态机线程与蓝牙模块线程之间通讯的IPC对象
     33          #define BARCODE_CASH_NUM	15			//定义等待蓝牙模块线程发送的条码缓冲区为15个条码
     34          #define MAX_BARCODE_LEN		80			//定义条码最大长度为80个字节
     35          
     36          //define the stack size of each task
     37          #define STACK_SIZE_TASKEC			128	
     38          #define STACK_SIZE_TASKSM			356
     39          #define STACK_SIZE_TASKBT			128
     40          #define STACK_SIZE_TASKINI			224
     41          
     42          static OS_STK	thread_eventcapture_stk[STACK_SIZE_TASKEC];		//the stack of the Event_capture_thread
     43          static OS_STK	thread_statemachine_stk[STACK_SIZE_TASKSM];		//the stack of the State_Machine_thread
     44          static OS_STK	thread_bt_stk[STACK_SIZE_TASKBT];				//the stack of the BT_Daemon_thread
     45          static OS_STK	*p_init_thread_stk;								//此线程的栈动态创建，线程结束自己释放
     46          
     47          static void *barcode_pool[BARCODE_CASH_NUM];	//保存获取到的条码字符串的地址数组
     48          static unsigned char barcode_cash[BARCODE_CASH_NUM][MAX_BARCODE_LEN+2];	//最后一个字节表示此行数据是否被送入pool中待发送了
     49          static	unsigned char	lowpower_state;
     50          static	unsigned char	lowpower_cnt;
     51          static  TBATCH_NODE		batch_node;
     52          /*
     53          ------------------------------------------------------------
     54          |               barcode[MAX_BARCODE_LEN+1]              |flag|
     55          ------------------------------------------------------------
     56          |               barcode[MAX_BARCODE_LEN+1]              |flag|
     57          ------------------------------------------------------------
     58          |               barcode[MAX_BARCODE_LEN+1]              |flag|
     59          ------------------------------------------------------------
     60          .........
     61          ------------------------------------------------------------
     62          |               barcode[MAX_BARCODE_LEN+1]              |flag|
     63          ------------------------------------------------------------
     64          */
     65          //定义条码的静态缓冲区，以免动态分配内存
     66          static OS_EVENT	*pBarcode_Queue;			//barcode消息队列
     67          
     68          
     69          #define EVENT_CASH_NUM		8			//定义事件的缓存数量
     70          //定义事件监测线程与主状态机之间通讯的IPC对象
     71          static void *event_pool[EVENT_CASH_NUM];		//事件缓存
     72          OS_EVENT	*pEvent_Queue;			//事件消息队列
     73          
     74          static OS_EVENT *pIOSem;				//IO信号量
     75          //
     76          
     77          unsigned int	device_current_state;		//设备主状态机
     78          
     79          unsigned int	keypress_timeout;
     80          
     81          
     82          void u_disk_proc(void);
     83          int lowpower_tip(void);
     84          void system_err_tip(void);
     85          
     86          extern void EnterLowPowerMode(void);
     87          extern void ExitLowPowerMode(void);
     88          
     89          
     90          /**
     91          * @brief	扫描条码成功的提示
     92          */
     93          static inline void scan_barcode_ok_tip(void)
     94          {
     95          	hw_platform_led_ctrl(LED_YELLOW,1);
     96          	if (g_param.motor_enable)
     97          	{
     98          		hw_platform_beep_motor_ctrl(100,4000);
     99          	}
    100          	else
    101          	{
    102          		hw_platform_beep_ctrl(100,4000);
    103          	}
    104          	
    105          	OSTimeDlyHMSM(0,0,0,10);
    106          	hw_platform_led_ctrl(LED_YELLOW,0);
    107          }
    108          
    109          /**
    110          * @brief	将条码推入条码的静态缓冲区，返回保存的地址
    111          * @param[in] unsigned char* barcode				需要缓存的条码
    112          * @return   缓存的地址
    113          * @note 策略:只要找到一个空位置就放进去，每一列的最后一个字节为0表示该位置是空的
    114          *											     最后一个字节0x55表示该位置已经缓存了条码
    115          */
    116          unsigned char * push_barcode_into_cash(unsigned char* barcode)
    117          {
    118          	unsigned int	i;
    119          	for (i = 0; i < BARCODE_CASH_NUM;i++)
    120          	{
    121          		if (barcode_cash[i][MAX_BARCODE_LEN+1] == 0)
    122          		{
    123          			if (strlen((char const*)barcode) > MAX_BARCODE_LEN)
    124          			{
    125          				memcpy(barcode_cash[i],barcode,MAX_BARCODE_LEN);
    126          				barcode_cash[i][MAX_BARCODE_LEN] = 0;
    127          			}
    128          			else
    129          			{
    130          				strcpy((char*)barcode_cash[i],(char const*)barcode);
    131          			}
    132          			barcode_cash[i][MAX_BARCODE_LEN+1] = 0x55;		//表示已经缓存数据了
    133          			return (void*)barcode_cash[i];
    134          		}
    135          	}
    136          
    137          	return (void*)0;
    138          }
    139          
    140          
    141          /**
    142          * @brief	将已经发送出去的缓存地址pull出来
    143          * @param[in] unsigned char* barcode_addr    一个合法的缓存区的地址
    144          * @return   none
    145          */
    146          void pull_barcode_from_cash(unsigned char* barcode_addr)
    147          {
    148          	assert((int)barcode_addr >= (int)barcode_cash[0]);
    149          	assert((int)barcode_addr <= (int)barcode_cash[BARCODE_CASH_NUM-1]);
    150          	assert(((int)barcode_addr - (int)barcode_cash[0])%(MAX_BARCODE_LEN+2) == 0);
    151          
    152          	//memset(barcode_addr,0,MAX_BARCODE_LEN+2);
    153          	barcode_addr[MAX_BARCODE_LEN+1] = 0;		//把标志恢复为0即可
    154          	return;
    155          }
    156          
    157          
    158          
    159          /**
    160          * @brief	进入Memory模式时，需要进行的一些设置
    161          */
    162          static inline void enter_into_Memory_Mode(void)
    163          {
    164          #ifdef DEBUG_VER
    165          	printf("enter into Memory Mode\r\n");
    166          #endif
    167          	g_param.last_state = 1;
    168          	SaveTerminalPara();
    169          }
    170          
    171          /**
    172          * @brief	退出Memory模式时，需要进行的一些设置
    173          */
    174          static inline void exit_from_Memory_Mode(void)
    175          {
    176          #ifdef DEBUG_VER
    177          	printf("exit from Memory Mode\r\n");
    178          #endif
    179          	//@todo...
    180          }
    181          
    182          /**
    183          * @brief	进入USB HID模式时，需要进行的一些设置
    184          */
    185          static inline void enter_into_USB_HID_Mode(void)
    186          {
    187          #ifdef DEBUG_VER
    188          	printf("enter into USB HID Mode\r\n");
    189          #endif
    190          	hw_platform_led_ctrl(LED_RED,1);
    191          	//hw_platform_beep_ctrl(100,1045);
    192          	//hw_platform_beep_ctrl(100,1171);
    193          	//hw_platform_beep_ctrl(100,1316);
    194          	//hw_platform_beep_ctrl(100,1393);
    195          	//hw_platform_beep_ctrl(100,1563);
    196          	//hw_platform_beep_ctrl(100,1755);
    197          	//hw_platform_beep_ctrl(100,1971);
    198          
    199          	hw_platform_beep_ctrl(100,1316);
    200          	hw_platform_beep_ctrl(100,1316);
    201          	hw_platform_beep_ctrl(100,1393);
    202          	hw_platform_beep_ctrl(100,1563);
    203          	hw_platform_beep_ctrl(100,1563);
    204          	hw_platform_beep_ctrl(100,1393);
    205          	hw_platform_beep_ctrl(100,1316);
    206          	hw_platform_beep_ctrl(100,1171);
    207          }
    208          
    209          /**
    210          * @brief	退出USB HID模式时，需要进行的一些设置
    211          */
    212          static inline void exit_from_USB_HID_Mode(void)
    213          {
    214          #ifdef DEBUG_VER
    215          	printf("exit from USB HID Mode\r\n");
    216          #endif
    217          	hw_platform_led_ctrl(LED_RED,0);
    218          }
    219          
    220          /**
    221          * @brief	进入BT模式时，需要进行的一些设置
    222          * @param[in] unsigned char	child_state		0: disconnect  1：connected  2：:waitpair
    223          */
    224          static inline void enter_into_BT_Mode(unsigned char child_state)
    225          {
    226          #ifdef DEBUG_VER
    227          	printf("enter into BT Mode:%d\r\n",child_state);
    228          #endif
    229          	if (child_state == 2)
    230          	{
    231          		WBTD_Reset();
    232          		hw_platform_beep_ctrl(300,3000);
    233          		hw_platform_start_led_blink(LED_BLUE,10);
    234          		WBTD_set_autocon(0);
    235          	}
    236          	else if (child_state == 0)
    237          	{
    238          		hw_platform_start_led_blink(LED_BLUE,150);
    239          	}
    240          	else
    241          	{
    242          		hw_platform_led_ctrl(LED_BLUE,1);
    243          	}
    244          	g_param.last_state = 0;
    245          	SaveTerminalPara();
    246          }
    247          
    248          /**
    249          * @brief	退出BT模式时，需要进行的一些设置
    250          * @param[in] unsigned char	child_state		0: disconnect  1：connected  2：:waitpair
    251          */
    252          static inline void exit_from_BT_Mode(unsigned char child_state)
    253          {
    254          #ifdef DEBUG_VER
    255          	printf("exit from BT Mode:%d\r\n",child_state);
    256          #endif
    257          	if (child_state == 1)
    258          	{
    259          		WBTD_set_autocon(1);
    260          		//delay_ms(1);
    261          		hw_platform_beep_ctrl(300,3000);
    262          		hw_platform_led_ctrl(LED_BLUE,0);
    263          		WBTD_Reset();//主动断开与蓝牙主机的连接
    264          		
    265          	}
    266          	else
    267          	{
    268          		hw_platform_stop_led_blink(LED_BLUE);
    269          	}
    270          }
    271          
    272          
    273          /**
    274          * @brief	通过USB HID发送条码
    275          */
    276          static void barcode_hid_send(unsigned char* barcode)
    277          {
    278          	unsigned int	i,code_len;
    279          	unsigned char key_value_report[8];
    280          
    281              code_len = strlen((char const*)barcode);
    282          	OSSchedLock();
    283          	for (i = 0; i < code_len; i++)
    284          	{
    285          		ascii_to_keyreport(barcode[i],key_value_report);
    286          
    287          		SendData_To_PC(key_value_report, 3);
    288          		SendData_To_PC("\x00\x00\x00", 3);
    289          	}
    290          
    291          	memcpy(key_value_report,"\x00\x00\x28",3);	//换行
    292          
    293          	SendData_To_PC(key_value_report, 3);
    294          	SendData_To_PC("\x00\x00\x00", 3);	//弹起
    295          	OSSchedUnlock();
    296          }
    297          
    298          /**
    299          * @brief	应用的初始化
    300          */
    301          void app_init(void)
    302          {
    303          	//创建一个消息队列，用于将事件捕获线程和蓝牙模块线程获取的异步事件通知给主状态机线程
    304          	pEvent_Queue = OSQCreate((void**)&event_pool,EVENT_CASH_NUM);
    305          	assert(pEvent_Queue != (OS_EVENT*)0);
    306          
    307          	//创建一个消息队列，用于将主状态机线程获取的条码传送到蓝牙模块线程.
    308          	pBarcode_Queue =OSQCreate((void**)&barcode_pool,BARCODE_CASH_NUM);
    309          	assert(pBarcode_Queue != (OS_EVENT*)0);
    310          	memset(barcode_cash,0,BARCODE_CASH_NUM*(MAX_BARCODE_LEN+2));
    311          
    312          	//创建一个信号量，用于IO中断通知事件捕获线程，有外部IO产生，需要事件捕获线程开始采取捕获事件的动作
    313          	pIOSem = OSSemCreate(0);
    314          	assert(pIOSem != (OS_EVENT*)0);
    315          
    316          	lowpower_state = 0;
    317          	lowpower_cnt = 0;
    318          }
    319          
    320          /**
    321          * @brief	维护主状态机的线程
    322          */
    323          void State_Machine_thread(void *p)
    324          {
    325          	unsigned int	i,cnt,event;
    326          	unsigned char	err;
    327          	unsigned char	barcode[MAX_BARCODE_LEN+1];
    328          	unsigned char   codetype[20];
    329          	unsigned int    codelen;
    330          	int				ret,index;
    331          	unsigned int	last_state;
    332          	unsigned char	*rec;
    333          
    334          	Jfree(p_init_thread_stk);	//退出初始化线程时，释放自己的任务栈
    335          
    336          	//hw_platform_led_blink_test();		//for test
    337          	//lowpower_tip();					//for test
    338          	//record_m_test();					//for test
    339          	
    340          	while(1)
    341          	{
    342          		event = (unsigned int)OSQPend(pEvent_Queue,25,&err);
    343          		if (event == 0)
    344          		{
    345          			if ((g_param.lower_power_timeout)&&(device_current_state != STATE_HID_Mode))
    346          			{
    347          				keypress_timeout++;
    348          				if (keypress_timeout == g_param.lower_power_timeout*4*60)
    349          				{
    350          					hw_platform_beep_ctrl(500,3000);
    351          					EnterLowPowerMode();
    352          					ExitLowPowerMode();
    353          					hw_platform_beep_ctrl(500,3000);
    354          				}
    355          			}
    356          			continue;
    357          		}
    358          #ifdef DEBUG_VER
    359          		printf("current state:%d\r\n",device_current_state);
    360          		printf("event:%d\r\n",event);
    361          #endif
    362          		if(device_current_state ==  STATE_BT_Mode_Disconnect)
    363          		{
    364          			switch(event)
    365          			{
    366          			case EVENT_SCAN_KEY_SINGLE_CLICK:
    367          			case EVENT_SCAN_KEY_DOUBLE_CLICK:
    368          				ret = scanner_get_barcode(barcode,MAX_BARCODE_LEN,codetype,&codelen);	//扫描条码
    369          				hw_platform_stop_led_blink(LED_GREEN);
    370          				if (ret == 0)
    371          				{
    372          					scan_barcode_ok_tip();
    373          				}
    374          
    375          				if (lowpower_state)
    376          				{
    377          					lowpower_tip();
    378          				}
    379          				//只是扫描到条码而已，什么都不做
    380          				break;
    381          			case EVENT_SCAN_KEY_LONG_PRESS:
    382          				//切换到Memory Mode
    383          				hw_platform_stop_led_blink(LED_GREEN);
    384          				exit_from_BT_Mode(0);
    385          				device_current_state = STATE_Memory_Mode;
    386          				hw_platform_beep_ctrl(300,3000);
    387          				enter_into_Memory_Mode();
    388          				break;
    389          			case EVENT_ERASE_KEY_SINGLE_CLICK:
    390          				break;
    391          			case EVENT_ERASE_KEY_LONG_PRESS:
    392          				//切换到配对模式
    393          				exit_from_BT_Mode(0);
    394          				device_current_state = STATE_BT_Mode_WaitPair;
    395          				enter_into_BT_Mode(2);
    396          				break;
    397          			case EVENT_RESET_KEY_PRESS:
    398          				break;
    399          			case EVENT_BT_CONNECTED:
    400          				//切换到蓝牙连接模式
    401          				exit_from_BT_Mode(0);
    402          				device_current_state = STATE_BT_Mode_Connect;
    403          				enter_into_BT_Mode(1);
    404          				break;
    405          			case EVENT_BT_DISCONNECTED:
    406          				break;
    407          			case EVENT_USB_CABLE_INSERT:
    408          				//切换到USB HID模式
    409          				exit_from_BT_Mode(0);
    410          				last_state = STATE_BT_Mode_Disconnect;
    411          				device_current_state = STATE_HID_Mode;
    412          				enter_into_USB_HID_Mode();
    413          				break;
    414          			case EVENT_USB_CABLE_REMOVE:
    415          				break;
    416          			case EVENT_LOW_POWER:
    417          				lowpower_tip();
    418          				break;
    419          			default:
    420          				break;
    421          			}
    422          		}
    423          		else if(device_current_state ==  STATE_BT_Mode_Connect)
    424          		{
    425          			switch(event)
    426          			{
    427          			case EVENT_SCAN_KEY_SINGLE_CLICK:
    428          				//扫描条码
    429          				ret = scanner_get_barcode(barcode,MAX_BARCODE_LEN,codetype,&codelen);
    430          				hw_platform_stop_led_blink(LED_GREEN);
    431          				if (ret != 0)
    432          				{
    433          					break;
    434          				}
    435          
    436          				scan_barcode_ok_tip();
    437          				if (lowpower_state)
    438          				{
    439          					lowpower_tip();
    440          				}
    441          				//扫描到条码了
    442          				//将获取到的条码先push到cash缓存起来，然后Post到系统的
    443          				//Queue，由蓝牙模块线程负责去发送到主机
    444          repost:
    445          				ret = OSQPost(pBarcode_Queue,(void*)push_barcode_into_cash((unsigned char*)barcode));
    446          				if(ret != OS_ERR_NONE)
    447          				{
    448          					if(ret == OS_ERR_Q_FULL || ret == OS_ERR_PEVENT_NULL)
    449          					{
    450          						//如果队列满了或者空事件时，那么需要延时重试
    451          						OSTimeDlyHMSM(0,0,0,100);
    452          						goto repost;
    453          					}
    454          					else
    455          					{
    456          						assert(0);	//系统错误
    457          					}
    458          				}
    459          				break;
    460          			case EVENT_SCAN_KEY_DOUBLE_CLICK:
    461          				if (g_param.ios_softkeypad_enable)
    462          				{
    463          					WBTD_set_ioskeypad(1);
    464          				}
    465          				break;
    466          			case EVENT_SCAN_KEY_LONG_PRESS:
    467          				hw_platform_stop_led_blink(LED_GREEN);
    468          				//切换到Memory mode
    469          				exit_from_BT_Mode(1);
    470          				device_current_state = STATE_Memory_Mode;
    471          				hw_platform_beep_ctrl(300,3000);
    472          				enter_into_Memory_Mode();
    473          				break;
    474          			case EVENT_ERASE_KEY_SINGLE_CLICK:
    475          				//WBTD_hid_send_test();
    476          				break;
    477          			case EVENT_ERASE_KEY_LONG_PRESS:
    478          				//进入配对模式
    479          				exit_from_BT_Mode(1);
    480          				device_current_state = STATE_BT_Mode_WaitPair;
    481          				enter_into_BT_Mode(2);
    482          				break;
    483          			case EVENT_RESET_KEY_PRESS:
    484          				//@todo...
    485          				break;
    486          			case EVENT_BT_CONNECTED:
    487          				break;
    488          			case EVENT_BT_DISCONNECTED:
    489          				//切换到蓝牙断开状态
    490          				exit_from_BT_Mode(1);
    491          				device_current_state = STATE_BT_Mode_Disconnect;
    492          				enter_into_BT_Mode(0);
    493          				break;
    494          			case EVENT_USB_CABLE_INSERT:
    495          				//切换到USB HID模式
    496          				exit_from_BT_Mode(1);
    497          				last_state = STATE_BT_Mode_Disconnect;
    498          				device_current_state = STATE_HID_Mode;
    499          				enter_into_USB_HID_Mode();
    500          				break;
    501          			case EVENT_USB_CABLE_REMOVE:
    502          				break;
    503          			case EVENT_LOW_POWER:
    504          				lowpower_tip();
    505          				break;
    506          			default:
    507          				break;
    508          			}
    509          		}
    510          		else if(device_current_state ==  STATE_BT_Mode_WaitPair)
    511          		{
    512          			switch(event)
    513          			{
    514          			case EVENT_SCAN_KEY_SINGLE_CLICK:
    515          			case EVENT_SCAN_KEY_DOUBLE_CLICK:
    516          				ret = scanner_get_barcode(barcode,MAX_BARCODE_LEN,codetype,&codelen);	//扫描条码
    517          				hw_platform_stop_led_blink(LED_GREEN);
    518          				if (ret == 0)
    519          				{
    520          					scan_barcode_ok_tip();
    521          				}
    522          				if (lowpower_state)
    523          				{
    524          					lowpower_tip();
    525          				}
    526          				//只是扫描到条码而已，什么都不做
    527          				break;
    528          			case EVENT_SCAN_KEY_LONG_PRESS:
    529          				hw_platform_stop_led_blink(LED_GREEN);
    530          				//切换到Memory Mode
    531          				exit_from_BT_Mode(2);
    532          				device_current_state = STATE_Memory_Mode;
    533          				hw_platform_beep_ctrl(300,3000);
    534          				enter_into_Memory_Mode();
    535          				break;
    536          			case EVENT_ERASE_KEY_SINGLE_CLICK:
    537          				break;
    538          			case EVENT_ERASE_KEY_LONG_PRESS:
    539          				//已经是配对模式，什么都不做
    540          				break;
    541          			case EVENT_RESET_KEY_PRESS:
    542          				//@todo...
    543          				break;
    544          			case EVENT_BT_CONNECTED:
    545          				//切换到蓝牙连接状态
    546          				exit_from_BT_Mode(2);
    547          				device_current_state = STATE_BT_Mode_Connect;
    548          				enter_into_BT_Mode(1);
    549          				break;
    550          			case EVENT_BT_DISCONNECTED:
    551          				break;
    552          			case EVENT_USB_CABLE_INSERT:
    553          				//切换到USB HID模式
    554          				exit_from_BT_Mode(2);
    555          				last_state = STATE_BT_Mode_WaitPair;
    556          				device_current_state = STATE_HID_Mode;
    557          				enter_into_USB_HID_Mode();
    558          				break;
    559          			case EVENT_USB_CABLE_REMOVE:
    560          				break;
    561          			case EVENT_LOW_POWER:
    562          				lowpower_tip();
    563          				break;
    564          			default:
    565          				break;
    566          			}
    567          		}
    568          		else if(device_current_state ==  STATE_Memory_Mode)
    569          		{
    570          			switch(event)
    571          			{
    572          			case EVENT_SCAN_KEY_SINGLE_CLICK:
    573          				//扫描条码
    574          				ret = scanner_get_barcode(barcode,MAX_BARCODE_LEN,codetype,&codelen);
    575          				hw_platform_stop_led_blink(LED_GREEN);
    576          				if (ret != 0)
    577          				{
    578          					break;
    579          				}
    580          
    581          				scan_barcode_ok_tip();
    582          				if (lowpower_state)
    583          				{
    584          					lowpower_tip();
    585          				}
    586          				//扫描到条码了
    587          				//将获取到的条码保存到memory
    588          				memset((void*)&batch_node,0,sizeof(TBATCH_NODE));
    589          				strcpy((char*)batch_node.barcode,(char const*)barcode);
    590          				ret = record_add((unsigned char*)&batch_node);
    591          				if (ret)
    592          				{
    593          					//记录保存失败，给出提示给用户
    594          					//@todo...
    595          
    596          				}
    597          				break;
    598          			case EVENT_SCAN_KEY_LONG_PRESS:
    599          				hw_platform_stop_led_blink(LED_GREEN);
    600          				//切换至蓝牙模式
    601          				exit_from_Memory_Mode();
    602          				device_current_state = STATE_BT_Mode_Disconnect;
    603          				enter_into_BT_Mode(0);
    604          				break;
    605          			case EVENT_ERASE_KEY_SINGLE_CLICK:
    606          				//删除扫到的条码对应的最后一笔资料
    607          				ret = scanner_get_barcode(barcode,MAX_BARCODE_LEN,codetype,&codelen);
    608          				if (ret != 0)
    609          				{
    610          					break;
    611          				}
    612          				scan_barcode_ok_tip();
    613          				if (lowpower_state)
    614          				{
    615          					lowpower_tip();
    616          				}
    617          				OSSchedLock();
    618          				rec = rec_searchby_tag(barcode,&index);
    619          				OSSchedUnlock();
    620          				if (rec)
    621          				{
    622          					ret = delete_one_node(index);
    623          					if (ret)
    624          					{
    625          						//提示用户，删除失败
    626          						//@todo...
    627          					}
    628          				}
    629          				break;
    630          			case EVENT_ERASE_KEY_LONG_PRESS:
    631          				//删除所有的条码记录
    632          				ret = record_clear();
    633          				if (ret)
    634          				{
    635          					//提示用户，删除失败
    636          					//@todo...
    637          				}
    638          				hw_platform_beep_ctrl(300,3000);
    639          				break;
    640          			case EVENT_RESET_KEY_PRESS:
    641          				//@todo...
    642          				break;
    643          			case EVENT_BT_CONNECTED:
    644          				break;
    645          			case EVENT_BT_DISCONNECTED:
    646          				break;
    647          			case EVENT_USB_CABLE_INSERT:
    648          				//切换到USB HID模式
    649          				exit_from_Memory_Mode();
    650          				last_state = STATE_Memory_Mode;
    651          				device_current_state = STATE_HID_Mode;
    652          				enter_into_USB_HID_Mode();
    653          				break;
    654          			case EVENT_USB_CABLE_REMOVE:
    655          				break;
    656          			case EVENT_LOW_POWER:
    657          				lowpower_tip();
    658          				break;
    659          			default:
    660          				break;
    661          			}
    662          		}
    663          		else if(device_current_state ==  STATE_HID_Mode)
    664          		{
    665          			switch(event)
    666          			{
    667          			case EVENT_SCAN_KEY_SINGLE_CLICK:
    668          				ret = scanner_get_barcode(barcode,MAX_BARCODE_LEN,codetype,&codelen);
    669          				hw_platform_stop_led_blink(LED_GREEN);
    670          				if(ret !=0)	//扫描条码
    671          				{
    672          					break;
    673          				}
    674          
    675          				scan_barcode_ok_tip();
    676          				//将扫描到的条码通过HID 接口发送出去
    677          				barcode_hid_send(barcode);
    678          				break;
    679          			case EVENT_SCAN_KEY_LONG_PRESS:
    680          				hw_platform_stop_led_blink(LED_GREEN);
    681          				break;
    682          			case EVENT_ERASE_KEY_SINGLE_CLICK:
    683          				break;
    684          			case EVENT_ERASE_KEY_LONG_PRESS:
    685          				//将所有保存在Memory中的条码，全部上传到PC
    686          				hw_platform_beep_ctrl(300,3000);
    687          				cnt = record_module_count();
    688          				for (i = 0; i < cnt;i++)
    689          				{
    690          					rec = get_node((i==0)?0:2,0);
    691          					if (rec)
    692          					{
    693          						barcode_hid_send(((TBATCH_NODE*)rec)->barcode);
    694          					}
    695          					else
    696          					{
    697          						//提示用户读取失败一次
    698          						//@todo...
    699          					}
    700          				}
    701          				hw_platform_beep_ctrl(300,3000);
    702          				break;
    703          			case EVENT_RESET_KEY_PRESS:
    704          				//@todo...
    705          				break;
    706          			case EVENT_BT_CONNECTED:
    707          				break;
    708          			case EVENT_BT_DISCONNECTED:
    709          				break;
    710          			case EVENT_USB_CABLE_INSERT:
    711          				break;
    712          			case EVENT_USB_CABLE_REMOVE:
    713          				//切换到之前的状态
    714          				exit_from_USB_HID_Mode();
    715          				device_current_state = last_state;
    716          				if (device_current_state == STATE_Memory_Mode)
    717          				{
    718          					enter_into_Memory_Mode();
    719          				}
    720          				else if (device_current_state == STATE_BT_Mode_WaitPair)
    721          				{
    722          					enter_into_BT_Mode(2);
    723          				}
    724          				else
    725          				{
    726          					enter_into_BT_Mode(0);
    727          				}
    728          				break;
    729          			case EVENT_LOW_POWER:
    730          				break;
    731          			default:
    732          				break;
    733          			}
    734          		}
    735          	}
    736          }
    737          
    738          /**
    739          * @brief	获取部分异步事件的线程
    740          * @note     另外一些异步事件的检测在中断服务程序中post或者另外的线程post出来
    741          *			比如：按键事件会在定时器中断的服务程序post出来
    742          *				  USB线的插入（实际上是USB HID device被枚举成功）会在USB的中断服务程序给出
    743          *				  蓝牙连接的状态变化会在蓝牙模块的维护线程给出
    744          *				  此线程只负责一些周期性的状态检查事件，电池电量低、USB线是否被拔出
    745          */
    746          void Event_capture_thread(void *p)
    747          {
    748          #ifdef DEBUG_VER
    749          	printf("Enter into Event_capture_thread!\r\n");
    750          #endif
    751          	while (1)
    752          	{
    753          		if (device_current_state == STATE_HID_Mode)
    754          		{
    755          			lowpower_state = 0;
    756          			lowpower_cnt = 0;
    757          			//判断USB线的拔出
    758          			if (bDeviceState == UNCONNECTED)
    759          			{
    760          #ifdef DEBUG_VER
    761          				printf("usb cable remove detected!\r\n");
    762          #endif
    763          				OSQPost(pEvent_Queue,(void*)EVENT_USB_CABLE_REMOVE);
    764          			}
    765          
    766          			if (hw_platform_ChargeState_Detect())
    767          			{
    768          				//充电完成
    769          				hw_platform_led_ctrl(LED_RED,0);
    770          			}
    771          
    772          			OSTimeDlyHMSM(0,0,0,50);	//50ms的频率运行此线程
    773          		}
    774          		else
    775          		{
    776          			//判断电池电量低
    777          			if (hw_platform_get_PowerClass() == 0)
    778          			{
    779          				lowpower_cnt++;
    780          				if (lowpower_cnt>10)
    781          				{
    782          #ifdef DEBUG_VER
    783          					printf("low power detected!\r\n");
    784          #endif
    785          					if (lowpower_state == 0)
    786          					{
    787          						OSQPost(pEvent_Queue,(void*)EVENT_LOW_POWER);
    788          						lowpower_state = 1;
    789          					}
    790          					
    791          				}
    792          			}
    793          			else
    794          			{
    795          				lowpower_cnt = 0;
    796          			}
    797          
    798          			if (bDeviceState == CONFIGURED)
    799          			{
    800          #ifdef DEBUG_VER
    801          				printf("USB HID Enum OK detected!\r\n");
    802          #endif
    803          				OSQPost(pEvent_Queue,(void*)EVENT_USB_CABLE_INSERT);
    804          			}
    805          			OSTimeDlyHMSM(0,0,0,50);	//50ms的频率运行此线程
    806          		}
    807          	}
    808          }
    809          
    810          
    811          /*
    812           * @brief 蓝牙模块维护线程
    813           * @note  此线程需要完成两个任务：
    814           *        1 : 监测蓝牙模块是否有返回连接状态变化的指示信号回来，如果监测到了，发出事件消息出来
    815           *        2 ：检测是否有数据需要通过蓝牙模块发送，如果有就发送出去
    816          */
    817          void BT_Daemon_thread(void *p)
    818          {
    819          	int ret;
    820                  unsigned int len;
    821          	unsigned char	err;
    822          	unsigned char	*pbarcode;
    823          
    824          	ret = WBTD_init();
    825          	if (ret)
    826          	{
    827          		WBTD_Reset();
    828          		ret = WBTD_init();
    829          		assert(ret == 0);
    830          	}
    831          
    832          #ifdef DEBUG_VER
    833          	printf("WBTD init Success!\r\n");
    834          #endif
    835          
    836          	while (1)
    837          	{
    838          		ret = WBTD_got_notify_type();
    839          		if ((ret == 1) || (ret == 2))
    840          		{
    841          #ifdef DEBUG_VER
    842          			printf("WBTD got notify = %s!\r\n",(ret==1)?"Connected":"Disconnect");
    843          #endif
    844          			OSQPost(pEvent_Queue,(void*)((ret == 1)?EVENT_BT_CONNECTED:EVENT_BT_DISCONNECTED));
    845          		}
    846          
    847          		pbarcode = (unsigned char*)OSQPend(pBarcode_Queue,20,&err);
    848          		if (pbarcode)
    849          		{
    850          #ifdef DEBUG_VER
    851          			printf("WBTD got data(%s) to send!\r\n",pbarcode);
    852          #endif
    853          			if (WBTD_hid_send(pbarcode,strlen((char const*)pbarcode),&len))
    854          			{
    855          				//发送失败应该怎么处理，什么都不做了么????!!!!
    856          				//@todo...
    857          #ifdef DEBUG_VER
    858          				printf("WBTD send data Fail!\r\n");
    859          #endif
    860          			}
    861          
    862          			pull_barcode_from_cash(pbarcode);
    863          			//OSTimeDlyHMSM(0,0,0,50);
    864          
    865          #ifdef DEBUG_VER
    866          			printf("WBTD send data Success!\r\n");
    867          #endif
    868          		}
    869          	}
    870          }
    871          
    872          
    873          /*
    874           * @brief进入U盘模式
    875          */
    876          void u_disk_proc(void)
    877          {
    878          	//g_mass_storage_device_type = MASSTORAGE_DEVICE_TYPE_SPI_FLASH;
    879          	//usb_device_init(USB_MASSSTORAGE);
    880          
    881          	OSSchedLock();
    882          
    883          	while(hw_platform_USBcable_Insert_Detect() == 1)
    884          	{	
    885          		if(bDeviceState != CONFIGURED)
    886          		{
    887          			break;
    888          		}
    889          
    890          		delay_ms(1);
    891          	}
    892          
    893          	OSSchedUnlock();
    894          }
    895          
    896          /*
    897           * @brief 低电量提示,红灯持续5S的闪烁
    898           * @return 0:提示期间没有USB线的插入		1:提示期间有USB线的插入
    899          */
    900          int lowpower_tip(void)
    901          {
    902          	int i;
    903          	OSSchedLock();
    904          	hw_platform_start_led_blink(LED_RED,5);
    905          	for (i = 0; i<20;i++)
    906          	{
    907          		hw_platform_beep_ctrl(50,1000);
    908          		if (hw_platform_USBcable_Insert_Detect())
    909          		{
    910          			hw_platform_stop_led_blink(LED_RED);
    911          			OSSchedUnlock();
    912          			return 1;
    913          		}
    914          	}
    915          	hw_platform_stop_led_blink(LED_RED);
    916          	OSSchedUnlock();
    917          	return 0;
    918          }
    919          
    920          /*
    921           * @brief 系统错误的提示
    922          */
    923          void system_err_tip(void)
    924          {
    925          	while(1)
    926          	{
    927          		//@todo...
    928          	}
    929          }
    930          
    931          
    932          // Cortex System Control register address
    933          #define SCB_SysCtrl					((u32)0xE000ED10)
    934          // SLEEPDEEP bit mask
    935          #define SysCtrl_SLEEPDEEP_Set		((u32)0x00000004)
    936          
    937          /*
    938           * @brief 初始化线程
    939           */
    940          void app_init_thread(void *p)
    941          {
    942          	int ret;
    943          #ifdef DEBUG_VER
    944          	printf("app init thread startup...\r\n");
    945          #endif
    946          
    947          	OS_CPU_SysTickInit();
    948          
    949          	app_init();
    950          
    951          	Keypad_Init();
    952          
    953          	ret = record_module_init();
    954          	if (ret != 0)
    955          	{
    956          		system_err_tip();
    957          	}
    958          
    959          	if (recover_record_by_logfile())
    960          	{
    961          		system_err_tip();
    962          	}
    963          
    964          	if (ReadTerminalPara())
    965          	{
    966          		if (DefaultTerminalPara())
    967          		{
    968          			system_err_tip();
    969          		}
    970          	}
    971          
    972          	if (g_param.last_state == 1)
    973          	{
    974          		device_current_state = STATE_Memory_Mode;	//脱机状态
    975          		enter_into_Memory_Mode();
    976          	}
    977          	else
    978          	{
    979          		device_current_state = STATE_BT_Mode_Disconnect;	//蓝牙模式未连接状态
    980          		enter_into_BT_Mode(0);
    981          	}
    982          
    983          	scanner_mod_init();
    984          
    985          	usb_device_init(USB_KEYBOARD);
    986          
    987          	OSTaskCreateExt(State_Machine_thread,
    988          		(void *)0,
    989          		&thread_statemachine_stk[STACK_SIZE_TASKSM-1],
    990          		8,
    991          		8,
    992          		&thread_statemachine_stk[0],
    993          		STACK_SIZE_TASKSM,
    994          		(void *)0,
    995          		(INT16U)(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
    996          
    997          	OSTaskCreateExt(Event_capture_thread,
    998          		(void *)0,
    999          		&thread_eventcapture_stk[STACK_SIZE_TASKEC-1],
   1000          		7,
   1001          		7,
   1002          		&thread_eventcapture_stk[0],
   1003          		STACK_SIZE_TASKEC,
   1004          		(void *)0,
   1005          		(INT16U)(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
   1006          
   1007          	OSTaskCreateExt(BT_Daemon_thread,
   1008          		(void *)0,
   1009          		&thread_bt_stk[STACK_SIZE_TASKBT-1],
   1010          		6,
   1011          		6,
   1012          		&thread_bt_stk[0],
   1013          		STACK_SIZE_TASKBT,
   1014          		(void *)0,
   1015          		(INT16U)(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
   1016          
   1017          	OSTimeDlyHMSM(0,0,0,10);
   1018          	OSTaskDel(OS_PRIO_SELF);
   1019          }
   1020          
   1021          /*
   1022           * @brief 启动应用
   1023           */
   1024          void app_startup(void)
   1025          {
   1026          	memset((void*)thread_eventcapture_stk, 0xAA, sizeof(thread_eventcapture_stk));
   1027          	memset((void*)thread_statemachine_stk, 0xBB, sizeof(thread_statemachine_stk));
   1028          	memset((void*)thread_bt_stk, 0xCC, sizeof(thread_bt_stk));
   1029          
   1030          	OSInit();
   1031          
   1032          	OSDebugInit();
   1033          
   1034          	p_init_thread_stk = (OS_STK*)Jmalloc(STACK_SIZE_TASKINI*sizeof(OS_STK));
   1035          	assert(p_init_thread_stk != 0);
   1036          
   1037          	OSTaskCreateExt(app_init_thread,
   1038          		(void *)0,
   1039          		&p_init_thread_stk[STACK_SIZE_TASKINI-1],
   1040          		5,
   1041          		5,
   1042          		&p_init_thread_stk[0],
   1043          		STACK_SIZE_TASKINI,
   1044          		(void *)0,
   1045          		(INT16U)(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
   1046          
   1047          	OSStart();
   1048          }
   1049          

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     BT_Daemon_thread            24
     Event_capture_thread         8
     State_Machine_thread       136
     app_init                     8
     app_init_thread             32
     app_startup                 32
     barcode_hid_send            24
     enter_into_BT_Mode           8
     enter_into_Memory_Mode       8
     enter_into_USB_HID_Mode      8
     exit_from_BT_Mode            8
     exit_from_Memory_Mode        0
     exit_from_USB_HID_Mode       8
     lowpower_tip                 8
     memcpy                       8
     memset                       8
     pull_barcode_from_cash       8
     push_barcode_into_cash      16
     scan_barcode_ok_tip          8
     system_err_tip               0
     u_disk_proc                  8


   Section sizes:

     Function/Label                              Bytes
     --------------                              -----
     memcpy                                        14
     memset                                        20
     thread_eventcapture_stk                      512
     thread_statemachine_stk                     1424
     thread_bt_stk                                512
     p_init_thread_stk                              4
     barcode_pool                                  60
     barcode_cash                                1232
     lowpower_state                                 1
     lowpower_cnt                                   1
     batch_node                                    84
     pBarcode_Queue                                 4
     event_pool                                    32
     pEvent_Queue                                   4
     pIOSem                                         4
     device_current_state                           4
     keypress_timeout                               4
     scan_barcode_ok_tip                           64
     push_barcode_into_cash                       114
     pull_barcode_from_cash                       108
     enter_into_Memory_Mode                        16
     exit_from_Memory_Mode                          2
     enter_into_USB_HID_Mode                       92
     exit_from_USB_HID_Mode                        12
     enter_into_BT_Mode                            78
     exit_from_BT_Mode                             48
     barcode_hid_send                              92
     app_init                                     176
     State_Machine_thread                        1344
     Event_capture_thread                         160
     BT_Daemon_thread                             120
     u_disk_proc                                   38
     lowpower_tip                                  70
     system_err_tip                                 2
     app_init_thread                              236
     app_startup                                  136
     ??DataTable20                                  4
     ??DataTable68                                  4
     ??DataTable71                                  4
     ??DataTable73                                  4
     ??DataTable74                                  4
     ??DataTable75                                  4
     ??DataTable76                                  4
     ??DataTable78                                  4
     ??DataTable82                                  4
     ??DataTable83                                  4
     ??DataTable84                                  4
     ??DataTable87                                  4
     ??DataTable89                                  4
     ?<Constant "(int)barcode_addr >= ...">        44
     ?<Constant "E:\\H520B\\FW\\src\\App\\a...">   28
     ?<Constant "(int)barcode_addr <= ...">        60
     ?<Constant "((int)barcode_addr - ...">        68
     ?<Constant "\000\000\000">                     4
     ?<Constant "\000\000(">                        4
     ?<Constant "pEvent_Queue != (OS_E...">        32
     ?<Constant "pBarcode_Queue != (OS...">        32
     ?<Constant "pIOSem != (OS_EVENT*)0">          24
     ?<Constant "0">                                2
     ?<Constant "ret == 0">                        12
     ?<Constant "p_init_thread_stk != 0">          24

 
 3 882 bytes in section .bss
   334 bytes in section .rodata
 2 994 bytes in section .text
 
 2 960 bytes of CODE  memory (+ 34 bytes shared)
   334 bytes of CONST memory
 3 882 bytes of DATA  memory

Errors: none
Warnings: none
