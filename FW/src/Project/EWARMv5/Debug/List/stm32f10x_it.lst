###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     29/Sep/2015  11:20:12 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\H520B\FW\src\Project\stm32f10x_it.c                   #
#    Command line =  E:\H520B\FW\src\Project\stm32f10x_it.c -lcN              #
#                    E:\H520B\FW\src\Project\EWARMv5\Debug\List\ -o           #
#                    E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\ --no_cse      #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    5.4\arm\INC\DLib_Config_Full.h" -I                       #
#                    E:\H520B\FW\src\Project\EWARMv5\..\ -I                   #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\App\ -I            #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Drivers\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\FatFs\ -I          #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Lib\inc\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-CPU\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-LIB\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Ports #
#                    \ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\ #
#                    Source\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC #
#                    -Probe\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\usb_lib #
#                    \ -I "C:\Program Files\IAR Systems\Embedded Workbench    #
#                    5.4\arm\INC\" -Ol                                        #
#    List file    =  E:\H520B\FW\src\Project\EWARMv5\Debug\List\stm32f10x_it. #
#                    lst                                                      #
#    Object file  =  E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\stm32f10x_it.o #
#                                                                             #
#                                                                             #
###############################################################################

E:\H520B\FW\src\Project\stm32f10x_it.c
      1          /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
      2          * File Name          : stm32f10x_it.c
      3          * Author             : MCD Application Team
      4          * Version            : V2.0.3
      5          * Date               : 09/22/2008
      6          * Description        : Main Interrupt Service Routines.
      7          *                      This file provides template for all exceptions handler
      8          *                      and peripherals interrupt service routine.
      9          ********************************************************************************
     10          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     11          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     12          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     13          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     14          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     15          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     16          *******************************************************************************/
     17          
     18          /* Includes ------------------------------------------------------------------*/
     19          #include "stm32f10x_it.h"
     20          #include "PCUsart.h"
     21          #include "usb_lib.h"
     22          #include "usb_istr.h"
     23          #include "hw_config.h"
     24          #include "hw_platform.h"
     25          #include "usb_pwr.h"
     26          #include "keypad.h"
     27          #include "WBTDS01.h"
     28          #include "HJ5000_scanner.h"
     29          
     30          
     31          extern vu32 bDeviceState; /* USB device status */
     32          unsigned char		recv_data;
     33          
     34          /* Private typedef -----------------------------------------------------------*/
     35          /* Private define ------------------------------------------------------------*/
     36          /* Private macro -------------------------------------------------------------*/
     37          /* Private variables ---------------------------------------------------------*/
     38          /* Private function prototypes -----------------------------------------------*/
     39          /* Private functions ---------------------------------------------------------*/
     40          
     41          /*******************************************************************************
     42          * Function Name  : NMIException
     43          * Description    : This function handles NMI exception.
     44          * Input          : None
     45          * Output         : None
     46          * Return         : None
     47          *******************************************************************************/
     48          void NMIException(void)
     49          {
     50          }
     51          
     52          
     53          //然后在源程序里添加下面的函数代码: 
     54          // hard fault handler in C,  
     55          // with stack frame location as input parameter  
     56          void hard_fault_handler_c(unsigned int * hardfault_args)  
     57          {  
     58          	unsigned int stacked_r0;  
     59          	unsigned int stacked_r1;  
     60          	unsigned int stacked_r2;  
     61          	unsigned int stacked_r3;  
     62          	unsigned int stacked_r12;  
     63          	unsigned int stacked_lr;  
     64          	unsigned int stacked_pc;  
     65          	unsigned int stacked_psr;  
     66          	unsigned char	str[15];
     67          
     68          	stacked_r0 = ((unsigned long) hardfault_args[0]);  
     69          	stacked_r1 = ((unsigned long) hardfault_args[1]);  
     70          	stacked_r2 = ((unsigned long) hardfault_args[2]);  
     71          	stacked_r3 = ((unsigned long) hardfault_args[3]);  
     72          
     73          	stacked_r12 = ((unsigned long) hardfault_args[4]);  
     74          	stacked_lr = ((unsigned long) hardfault_args[5]);  
     75          	stacked_pc = ((unsigned long) hardfault_args[6]);  
     76          	stacked_psr = ((unsigned long) hardfault_args[7]);  
     77          
     78          	//gui_SetFont(16);
     79          	printf ("[Hard fault handler]\n");  
     80          	//sprintf(str,"R0=%x",stacked_r0);
     81          	//gui_TextOut(0,0,str,0,1);
     82          	printf ("R0 = %x\n", stacked_r0); 
     83          	
     84                  
     85                  //sprintf(str,"R1=%x",stacked_r1);
     86          	//gui_TextOut(0,20,str,0,1);
     87          	printf ("R1 = %x\n", stacked_r1);
     88          	//sprintf(str,"R2=%x",stacked_r2);
     89          	//gui_TextOut(0,40,str,0,1);;  
     90          	printf ("R2 = %x\n", stacked_r2);
     91          	//sprintf(str,"R3=%x",stacked_r3);
     92          	//gui_TextOut(0,60,str,0,1);
     93          	printf ("R3 = %x\n", stacked_r3);
     94          	//sprintf(str,"R12=%x",stacked_r12);
     95          	//gui_TextOut(0,80,str,0,1);
     96          	printf ("R12 = %x\n", stacked_r12);  
     97          	//sprintf(str,"LR=%x",stacked_lr);
     98          	//gui_TextOut(0,100,str,0,1);
     99          	printf ("LR = %x\n", stacked_lr);
    100          	//sprintf(str,"PC=%x",stacked_pc);
    101          	//gui_TextOut(0,120,str,0,1);
    102          	printf ("PC = %x\n", stacked_pc);
    103          	//sprintf(str,"PSR=%x",stacked_psr);
    104          	//gui_TextOut(0,140,str,0,1);
    105          	printf ("PSR = %x\n", stacked_psr);  
    106          	printf ("BFAR = %x\n", (*((volatile unsigned long *)(0xE000ED38))));  
    107          	printf ("CFSR = %x\n", (*((volatile unsigned long *)(0xE000ED28))));  
    108          	printf ("HFSR = %x\n", (*((volatile unsigned long *)(0xE000ED2C))));  
    109          	printf ("DFSR = %x\n", (*((volatile unsigned long *)(0xE000ED30))));  
    110          	printf ("AFSR = %x\n", (*((volatile unsigned long *)(0xE000ED3C))));  
    111          
    112          
    113          	while(1) 
    114          	{ 
    115          		;; 
    116          	} 
    117          
    118          }  
    119          /*******************************************************************************
    120          * Function Name  : HardFaultException
    121          * Description    : This function handles Hard Fault exception.
    122          * Input          : None
    123          * Output         : None
    124          * Return         : None
    125          *******************************************************************************/
    126          void HardFaultException(void)
    127          {
    128            /* Go to infinite loop when Hard Fault exception occurs */
    129           // while (1)
    130           // {
    131          	// // gui_TextOut(0,0,"HardFault!",0);
    132          	////  while(1);
    133           // }
    134          	HARDFAULT_ISR_HANDLE_d();
    135          }
    136          
    137          //HardFault_Handler\ 
    138          //PROC 
    139          //;EXPORT  HardFault_Handler         [WEAK] 
    140          //;B                  . 
    141          //IMPORT hard_fault_handler_c  
    142          //TST LR, #4  
    143          //ITE EQ  
    144          //MRSEQ R0, MSP  
    145          //MRSNE R0, PSP  
    146          //B hard_fault_handler_c  
    147          //ENDP 
    148          
    149          /*******************************************************************************
    150          * Function Name  : MemManageException
    151          * Description    : This function handles Memory Manage exception.
    152          * Input          : None
    153          * Output         : None
    154          * Return         : None
    155          *******************************************************************************/
    156          void MemManageException(void)
    157          {
    158            /* Go to infinite loop when Memory Manage exception occurs */
    159            while (1)
    160            {
    161            }
    162          }
    163          
    164          /*******************************************************************************
    165          * Function Name  : BusFaultException
    166          * Description    : This function handles Bus Fault exception.
    167          * Input          : None
    168          * Output         : None
    169          * Return         : None
    170          *******************************************************************************/
    171          void BusFaultException(void)
    172          {
    173            /* Go to infinite loop when Bus Fault exception occurs */
    174            while (1)
    175            {
    176            }
    177          }
    178          
    179          /*******************************************************************************
    180          * Function Name  : UsageFaultException
    181          * Description    : This function handles Usage Fault exception.
    182          * Input          : None
    183          * Output         : None
    184          * Return         : None
    185          *******************************************************************************/
    186          void UsageFaultException(void)
    187          {
    188            /* Go to infinite loop when Usage Fault exception occurs */
    189            while (1)
    190            {
    191            }
    192          }
    193          
    194          /*******************************************************************************
    195          * Function Name  : DebugMonitor
    196          * Description    : This function handles Debug Monitor exception.
    197          * Input          : None
    198          * Output         : None
    199          * Return         : None
    200          *******************************************************************************/
    201          void DebugMonitor(void)
    202          {
    203          }
    204          
    205          /*******************************************************************************
    206          * Function Name  : SVCHandler
    207          * Description    : This function handles SVCall exception.
    208          * Input          : None
    209          * Output         : None
    210          * Return         : None
    211          *******************************************************************************/
    212          void SVCHandler(void)
    213          {
    214          }
    215          
    216          /*******************************************************************************
    217          * Function Name  : PendSVC
    218          * Description    : This function handles PendSVC exception.
    219          * Input          : None
    220          * Output         : None
    221          * Return         : None
    222          *******************************************************************************/
    223          void PendSVC(void)
    224          {
    225          }
    226          
    227          /*******************************************************************************
    228          * Function Name  : SysTickHandler
    229          * Description    : This function handles SysTick Handler.
    230          * Input          : None
    231          * Output         : None
    232          * Return         : None
    233          *******************************************************************************/
    234          void SysTickHandler(void)
    235          { 
    236          }
    237          
    238          /*******************************************************************************
    239          * Function Name  : WWDG_IRQHandler
    240          * Description    : This function handles WWDG interrupt request.
    241          * Input          : None
    242          * Output         : None
    243          * Return         : None
    244          *******************************************************************************/
    245          void WWDG_IRQHandler(void)
    246          {
    247          }
    248          
    249          /*******************************************************************************
    250          * Function Name  : PVD_IRQHandler
    251          * Description    : This function handles PVD interrupt request.
    252          * Input          : None
    253          * Output         : None
    254          * Return         : None
    255          *******************************************************************************/
    256          void PVD_IRQHandler(void)
    257          {
    258          }
    259          
    260          /*******************************************************************************
    261          * Function Name  : TAMPER_IRQHandler
    262          * Description    : This function handles Tamper interrupt request. 
    263          * Input          : None
    264          * Output         : None
    265          * Return         : None
    266          *******************************************************************************/
    267          void TAMPER_IRQHandler(void)
    268          {
    269          #ifdef TAMPER_DETECT_ENABLE	
    270            TAMPER_IRQ_Handle();
    271          #endif  
    272          }
    273          
    274          /*******************************************************************************
    275          * Function Name  : RTC_IRQHandler
    276          * Description    : This function handles RTC global interrupt request.
    277          * Input          : None
    278          * Output         : None
    279          * Return         : None
    280          *******************************************************************************/
    281          void RTC_IRQHandler(void)
    282          {
    283          //		CPU_SR    cpu_sr;
    284          //		CPU_CRITICAL_ENTER();                                       /* Tell uC/OS-II that we are starting an ISR            */
    285          //		OSIntNesting++;
    286          //		OSIntEnter();
    287          
    288          	//RTC_IRQ_ISRHandler();
    289          //		RTC_ClearITPendingBit(RTC_IT_SEC);
    290          
    291          //		OSIntExit();
    292          //		OSIntExit();
    293          //		CPU_CRITICAL_EXIT();
    294          }
    295          
    296          /*******************************************************************************
    297          * Function Name  : FLASH_IRQHandler
    298          * Description    : This function handles Flash interrupt request.
    299          * Input          : None
    300          * Output         : None
    301          * Return         : None
    302          *******************************************************************************/
    303          void FLASH_IRQHandler(void)
    304          {
    305          }
    306          
    307          /*******************************************************************************
    308          * Function Name  : RCC_IRQHandler
    309          * Description    : This function handles RCC interrupt request. 
    310          * Input          : None
    311          * Output         : None
    312          * Return         : None
    313          *******************************************************************************/
    314          void RCC_IRQHandler(void)
    315          {
    316          }
    317          
    318          /*******************************************************************************
    319          * Function Name  : EXTI0_IRQHandler
    320          * Description    : This function handles External interrupt Line 0 request.
    321          * Input          : None
    322          * Output         : None
    323          * Return         : None
    324          *******************************************************************************/
    325          void EXTI0_IRQHandler(void)
    326          {
    327          	OSIntEnter();
    328          	if(EXTI_GetITStatus(EXTI_Line0) != RESET)
    329          	{   
    330          		EXTI_ClearITPendingBit(EXTI_Line0);
    331          		Keypad_EXTI_ISRHandler(SCAN_KEY_EXTI_INT);
    332          	}
    333          	OSIntExit();
    334          }
    335          
    336          /*******************************************************************************
    337          * Function Name  : EXTI1_IRQHandler
    338          * Description    : This function handles External interrupt Line 1 request.
    339          * Input          : None
    340          * Output         : None
    341          * Return         : None
    342          *******************************************************************************/
    343          void EXTI1_IRQHandler(void)
    344          {
    345          	OSIntEnter();
    346          	if(EXTI_GetITStatus(EXTI_Line1) != RESET)
    347          	{   
    348          		if(hw_platform_USBcable_Insert_Detect() == 0)
    349          		{
    350          			bDeviceState = UNCONNECTED;
    351          		}
    352          		EXTI_ClearITPendingBit(EXTI_Line1);
    353          	}
    354          	OSIntExit();
    355          }
    356          
    357          /*******************************************************************************
    358          * Function Name  : EXTI2_IRQHandler
    359          * Description    : This function handles External interrupt Line 2 request.
    360          * Input          : None
    361          * Output         : None
    362          * Return         : None
    363          *******************************************************************************/
    364          void EXTI2_IRQHandler(void)
    365          {
    366          }
    367          
    368          /*******************************************************************************
    369          * Function Name  : EXTI3_IRQHandler
    370          * Description    : This function handles External interrupt Line 3 request.
    371          * Input          : None
    372          * Output         : None
    373          * Return         : None
    374          *******************************************************************************/
    375          void EXTI3_IRQHandler(void)
    376          {
    377          	OSIntEnter();
    378          	if(EXTI_GetITStatus(EXTI_Line3) != RESET)
    379          	{   
    380          		EXTI_ClearITPendingBit(EXTI_Line3);
    381          		Keypad_EXTI_ISRHandler(ERASE_KEY_EXTI_INT);
    382          	}
    383          	OSIntExit();
    384          }
    385          
    386          /*******************************************************************************
    387          * Function Name  : EXTI4_IRQHandler
    388          * Description    : This function handles External interrupt Line 4 request.
    389          * Input          : None
    390          * Output         : None
    391          * Return         : None
    392          *******************************************************************************/
    393          void EXTI4_IRQHandler(void)
    394          {
    395          }
    396          
    397          /*******************************************************************************
    398          * Function Name  : DMA1_Channel1_IRQHandler
    399          * Description    : This function handles DMA1 Channel 1 interrupt request.
    400          * Input          : None
    401          * Output         : None
    402          * Return         : None
    403          *******************************************************************************/
    404          void DMA1_Channel1_IRQHandler(void)
    405          {
    406          }
    407          
    408          /*******************************************************************************
    409          * Function Name  : DMA1_Channel2_IRQHandler
    410          * Description    : This function handles DMA1 Channel 2 interrupt request.
    411          * Input          : None
    412          * Output         : None
    413          * Return         : None
    414          *******************************************************************************/
    415          void DMA1_Channel2_IRQHandler(void)
    416          {
    417          }
    418          
    419          /*******************************************************************************
    420          * Function Name  : DMA1_Channel3_IRQHandler
    421          * Description    : This function handles DMA1 Channel 3 interrupt request.
    422          * Input          : None
    423          * Output         : None
    424          * Return         : None
    425          *******************************************************************************/
    426          void DMA1_Channel3_IRQHandler(void)
    427          {
    428          }
    429          
    430          /*******************************************************************************
    431          * Function Name  : DMA1_Channel4_IRQHandler
    432          * Description    : This function handles DMA1 Channel 4 interrupt request.
    433          * Input          : None
    434          * Output         : None
    435          * Return         : None
    436          *******************************************************************************/
    437          void DMA1_Channel4_IRQHandler(void)
    438          {
    439          }
    440          
    441          /*******************************************************************************
    442          * Function Name  : DMA1_Channel5_IRQHandler
    443          * Description    : This function handles DMA1 Channel 5 interrupt request.
    444          * Input          : None
    445          * Output         : None
    446          * Return         : None
    447          *******************************************************************************/
    448          void DMA1_Channel5_IRQHandler(void)
    449          {
    450          }
    451          
    452          /*******************************************************************************
    453          * Function Name  : DMA1_Channel6_IRQHandler
    454          * Description    : This function handles DMA1 Channel 6 interrupt request.
    455          * Input          : None
    456          * Output         : None
    457          * Return         : None
    458          *******************************************************************************/
    459          void DMA1_Channel6_IRQHandler(void)
    460          {
    461          }
    462          
    463          /*******************************************************************************
    464          * Function Name  : DMA1_Channel7_IRQHandler
    465          * Description    : This function handles DMA1 Channel 7 interrupt request.
    466          * Input          : None
    467          * Output         : None
    468          * Return         : None
    469          *******************************************************************************/
    470          void DMA1_Channel7_IRQHandler(void)
    471          {
    472          	OSIntEnter();
    473          	if (DMA_GetITStatus(DMA1_IT_TC7))
    474          	{
    475          		DMA_Cmd(DMA1_Channel7, DISABLE);
    476          	}
    477          	/* clear DMA flag */
    478          	DMA_ClearFlag(DMA1_FLAG_TC7 | DMA1_FLAG_TE7);
    479          	OSIntExit();
    480          }
    481          
    482          /*******************************************************************************
    483          * Function Name  : ADC1_2_IRQHandler
    484          * Description    : This function handles ADC1 and ADC2 global interrupts requests.
    485          * Input          : None
    486          * Output         : None
    487          * Return         : None
    488          *******************************************************************************/
    489          void ADC1_2_IRQHandler(void)
    490          {
    491          }
    492          
    493          /*******************************************************************************
    494          * Function Name  : USB_HP_CAN_TX_IRQHandler
    495          * Description    : This function handles USB High Priority or CAN TX interrupts 
    496          *                  requests.
    497          * Input          : None
    498          * Output         : None
    499          * Return         : None
    500          *******************************************************************************/
    501          void USB_HP_CAN_TX_IRQHandler(void)
    502          {
    503          }
    504          
    505          /*******************************************************************************
    506          * Function Name  : USB_LP_CAN_RX0_IRQHandler
    507          * Description    : This function handles USB Low Priority or CAN RX0 interrupts 
    508          *                  requests.
    509          * Input          : None
    510          * Output         : None
    511          * Return         : None
    512          *******************************************************************************/
    513          void USB_LP_CAN_RX0_IRQHandler(void)
    514          {
    515            USB_Istr();
    516          }
    517          
    518          /*******************************************************************************
    519          * Function Name  : CAN_RX1_IRQHandler
    520          * Description    : This function handles CAN RX1 interrupt request.
    521          * Input          : None
    522          * Output         : None
    523          * Return         : None
    524          *******************************************************************************/
    525          void CAN_RX1_IRQHandler(void)
    526          {
    527          }
    528          
    529          /*******************************************************************************
    530          * Function Name  : CAN_SCE_IRQHandler
    531          * Description    : This function handles CAN SCE interrupt request.
    532          * Input          : None
    533          * Output         : None
    534          * Return         : None
    535          *******************************************************************************/
    536          void CAN_SCE_IRQHandler(void)
    537          {
    538          }
    539          
    540          /*******************************************************************************
    541          * Function Name  : EXTI9_5_IRQHandler
    542          * Description    : This function handles External lines 9 to 5 interrupt request.
    543          * Input          : None
    544          * Output         : None
    545          * Return         : None
    546          *******************************************************************************/
    547          void EXTI9_5_IRQHandler(void)
    548          {
    549          	OSIntEnter();
    550          	if(EXTI_GetITStatus(EXTI_Line6) != RESET)
    551          	{   
    552          		charge_detect_io_cnt++;
    553          		EXTI_ClearITPendingBit(EXTI_Line6);
    554          	}
    555          	OSIntExit();
    556          }
    557          
    558          /*******************************************************************************
    559          * Function Name  : TIM1_BRK_IRQHandler
    560          * Description    : This function handles TIM1 Break interrupt request.
    561          * Input          : None
    562          * Output         : None
    563          * Return         : None
    564          *******************************************************************************/
    565          void TIM1_BRK_IRQHandler(void)
    566          {
    567          }
    568          
    569          /*******************************************************************************
    570          * Function Name  : TIM1_UP_IRQHandler
    571          * Description    : This function handles TIM1 overflow and update interrupt 
    572          *                  request.
    573          * Input          : None
    574          * Output         : None
    575          * Return         : None
    576          *******************************************************************************/
    577          void TIM1_UP_IRQHandler(void)
    578          {
    579          }
    580          
    581          /*******************************************************************************
    582          * Function Name  : TIM1_TRG_COM_IRQHandler
    583          * Description    : This function handles TIM1 Trigger and commutation interrupts 
    584          *                  requests.
    585          * Input          : None
    586          * Output         : None
    587          * Return         : None
    588          *******************************************************************************/
    589          void TIM1_TRG_COM_IRQHandler(void)
    590          {
    591          }
    592          
    593          /*******************************************************************************
    594          * Function Name  : TIM1_CC_IRQHandler
    595          * Description    : This function handles TIM1 capture compare interrupt request.
    596          * Input          : None
    597          * Output         : None
    598          * Return         : None
    599          *******************************************************************************/
    600          void TIM1_CC_IRQHandler(void)
    601          {
    602          }
    603          
    604          /*******************************************************************************
    605          * Function Name  : TIM2_IRQHandler
    606          * Description    : This function handles TIM2 global interrupt request.
    607          * Input          : None
    608          * Output         : None
    609          * Return         : None
    610          *******************************************************************************/
    611          void TIM2_IRQHandler(void)
    612          {
    613              TIM2_UpdateISRHandler();
    614          }
    615          
    616          /*******************************************************************************
    617          * Function Name  : TIM3_IRQHandler
    618          * Description    : This function handles TIM3 global interrupt request.
    619          * Input          : None
    620          * Output         : None
    621          * Return         : None
    622          *******************************************************************************/
    623          void TIM3_IRQHandler(void)
    624          {
    625          	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
    626          	{
    627          		Keypad_Timer_ISRHandler();
    628          		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
    629          	}
    630          }
    631          
    632          /*******************************************************************************
    633          * Function Name  : TIM4_IRQHandler
    634          * Description    : This function handles TIM4 global interrupt request.
    635          * Input          : None
    636          * Output         : None
    637          * Return         : None
    638          *******************************************************************************/
    639          void TIM4_IRQHandler(void)
    640          {
    641          }
    642          
    643          /*******************************************************************************
    644          * Function Name  : I2C1_EV_IRQHandler
    645          * Description    : This function handles I2C1 Event interrupt request.
    646          * Input          : None
    647          * Output         : None
    648          * Return         : None
    649          *******************************************************************************/
    650          void I2C1_EV_IRQHandler(void)
    651          {
    652          }
    653          
    654          /*******************************************************************************
    655          * Function Name  : I2C1_ER_IRQHandler
    656          * Description    : This function handles I2C1 Error interrupt request.
    657          * Input          : None
    658          * Output         : None
    659          * Return         : None
    660          *******************************************************************************/
    661          void I2C1_ER_IRQHandler(void)
    662          {
    663          }
    664          
    665          /*******************************************************************************
    666          * Function Name  : I2C2_EV_IRQHandler
    667          * Description    : This function handles I2C2 Event interrupt request.
    668          * Input          : None
    669          * Output         : None
    670          * Return         : None
    671          *******************************************************************************/
    672          void I2C2_EV_IRQHandler(void)
    673          {
    674          }
    675          
    676          /*******************************************************************************
    677          * Function Name  : I2C2_ER_IRQHandler
    678          * Description    : This function handles I2C2 Error interrupt request.
    679          * Input          : None
    680          * Output         : None
    681          * Return         : None
    682          *******************************************************************************/
    683          void I2C2_ER_IRQHandler(void)
    684          {
    685          }
    686          
    687          /*******************************************************************************
    688          * Function Name  : SPI1_IRQHandler
    689          * Description    : This function handles SPI1 global interrupt request.
    690          * Input          : None
    691          * Output         : None
    692          * Return         : None
    693          *******************************************************************************/
    694          void SPI1_IRQHandler(void)
    695          {
    696          }
    697          
    698          /*******************************************************************************
    699          * Function Name  : SPI2_IRQHandler
    700          * Description    : This function handles SPI2 global interrupt request.
    701          * Input          : None
    702          * Output         : None
    703          * Return         : None
    704          *******************************************************************************/
    705          void SPI2_IRQHandler(void)
    706          {
    707          }
    708          
    709          /*******************************************************************************
    710          * Function Name  : USART1_IRQHandler
    711          * Description    : This function handles USART1 global interrupt request.
    712          * Input          : None
    713          * Output         : None
    714          * Return         : None
    715          *******************************************************************************/
    716          void USART1_IRQHandler(void)
    717          {
    718          
    719          }
    720          
    721          /*******************************************************************************
    722          * Function Name  : USART2_IRQHandler
    723          * Description    : This function handles USART2 global interrupt request.
    724          * Input          : None
    725          * Output         : None
    726          * Return         : None
    727          *******************************************************************************/
    728          void USART2_IRQHandler(void)
    729          {
    730          	//if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
    731          	//{   
    732          	//	recv_data	=	USART_ReceiveData(USART2) & 0xff;
    733          	//	WBTD_RxISRHandler(recv_data);
    734          	//	USART_ClearITPendingBit(USART2, USART_IT_RXNE);
    735          	//}
    736          	//else if (USART_GetFlagStatus(USART2, USART_FLAG_ORE) != RESET)
    737           //   {
    738          	//	USART_ReceiveData(USART2);
    739          	//}
    740          
    741          	unsigned int temp = 0;    
    742          	if(USART_GetITStatus(USART2, USART_IT_IDLE) != RESET)  
    743          	{  
    744          		//USART_ClearFlag(USART1,USART_IT_IDLE);  
    745          		temp = USART2->SR;  
    746          		temp = USART2->DR; //清USART_IT_IDLE标志  
    747          		DMA_Cmd(DMA1_Channel6,DISABLE);  
    748          
    749          		temp = WBTD_RES_BUFFER_LEN - DMA_GetCurrDataCounter(DMA1_Channel6);  
    750          		//for (i = 0;i < temp;i++)  
    751          		{  
    752          			WBTD_RxISRHandler(wbtd_recbuffer,temp); 
    753          		}  
    754          
    755          		//设置传输数据长度  
    756          		DMA1_Channel6->CNDTR = WBTD_RES_BUFFER_LEN;
    757          		//打开DMA  
    758          		DMA_Cmd(DMA1_Channel6,ENABLE);  
    759          	}  
    760          	else if (USART_GetFlagStatus(USART2, USART_FLAG_ORE) != RESET)
    761          	{
    762          		USART_ReceiveData(USART2);
    763          	}
    764          }
    765          
    766          /*******************************************************************************
    767          * Function Name  : USART3_IRQHandler
    768          * Description    : This function handles USART3 global interrupt request.
    769          * Input          : None
    770          * Output         : None
    771          * Return         : None
    772          *******************************************************************************/
    773          void USART3_IRQHandler(void)
    774          {
    775          	if (USART_GetFlagStatus(USART3, USART_IT_RXNE) != RESET)
    776          	{
    777          		unsigned char c;
    778          		c = USART_ReceiveData(USART3);
    779          		USART_ClearITPendingBit(USART3, USART_IT_RXNE);
    780          		HJ5000_RxISRHandler(c);
    781          	}
    782          }
    783          
    784          /*******************************************************************************
    785          * Function Name  : EXTI15_10_IRQHandler
    786          * Description    : This function handles External lines 15 to 10 interrupt request.
    787          * Input          : None
    788          * Output         : None
    789          * Return         : None
    790          *******************************************************************************/
    791          void EXTI15_10_IRQHandler(void)
    792          {
    793          }
    794          
    795          /*******************************************************************************
    796          * Function Name  : RTCAlarm_IRQHandler
    797          * Description    : This function handles RTC Alarm interrupt request.
    798          * Input          : None
    799          * Output         : None
    800          * Return         : None
    801          *******************************************************************************/
    802          void RTCAlarm_IRQHandler(void)
    803          {
    804          }
    805          
    806          /*******************************************************************************
    807          * Function Name  : USBWakeUp_IRQHandler
    808          * Description    : This function handles USB WakeUp interrupt request.
    809          * Input          : None
    810          * Output         : None
    811          * Return         : None
    812          *******************************************************************************/
    813          void USBWakeUp_IRQHandler(void)
    814          {
    815          }
    816          
    817          /*******************************************************************************
    818          * Function Name  : TIM8_BRK_IRQHandler
    819          * Description    : This function handles TIM8 Break interrupt request.
    820          * Input          : None
    821          * Output         : None
    822          * Return         : None
    823          *******************************************************************************/
    824          void TIM8_BRK_IRQHandler(void)
    825          {
    826          }
    827          
    828          /*******************************************************************************
    829          * Function Name  : TIM8_UP_IRQHandler
    830          * Description    : This function handles TIM8 overflow and update interrupt 
    831          *                  request.
    832          * Input          : None
    833          * Output         : None
    834          * Return         : None
    835          *******************************************************************************/
    836          void TIM8_UP_IRQHandler(void)
    837          {
    838          }
    839          
    840          /*******************************************************************************
    841          * Function Name  : TIM8_TRG_COM_IRQHandler
    842          * Description    : This function handles TIM8 Trigger and commutation interrupts 
    843          *                  requests.
    844          * Input          : None
    845          * Output         : None
    846          * Return         : None
    847          *******************************************************************************/
    848          void TIM8_TRG_COM_IRQHandler(void)
    849          {
    850          }
    851          
    852          /*******************************************************************************
    853          * Function Name  : TIM8_CC_IRQHandler
    854          * Description    : This function handles TIM8 capture compare interrupt request.
    855          * Input          : None
    856          * Output         : None
    857          * Return         : None
    858          *******************************************************************************/
    859          void TIM8_CC_IRQHandler(void)
    860          {
    861          }
    862          
    863          /*******************************************************************************
    864          * Function Name  : ADC3_IRQHandler
    865          * Description    : This function handles ADC3 global interrupt request.
    866          * Input          : None
    867          * Output         : None
    868          * Return         : None
    869          *******************************************************************************/
    870          void ADC3_IRQHandler(void)
    871          {
    872          }
    873          
    874          /*******************************************************************************
    875          * Function Name  : FSMC_IRQHandler
    876          * Description    : This function handles FSMC global interrupt request.
    877          * Input          : None
    878          * Output         : None
    879          * Return         : None
    880          *******************************************************************************/
    881          void FSMC_IRQHandler(void)
    882          {
    883          }
    884          
    885          /*******************************************************************************
    886          * Function Name  : SDIO_IRQHandler
    887          * Description    : This function handles SDIO global interrupt request.
    888          * Input          : None
    889          * Output         : None
    890          * Return         : None
    891          *******************************************************************************/
    892          void SDIO_IRQHandler(void)
    893          {
    894          	/* Process All SDIO Interrupt Sources */
    895          	//SD_ProcessIRQSrc();
    896          }
    897          
    898          /*******************************************************************************
    899          * Function Name  : TIM5_IRQHandler
    900          * Description    : This function handles TIM5 global interrupt request.
    901          * Input          : None
    902          * Output         : None
    903          * Return         : None
    904          *******************************************************************************/
    905          void TIM5_IRQHandler(void)
    906          {
    907          }
    908          
    909          /*******************************************************************************
    910          * Function Name  : SPI3_IRQHandler
    911          * Description    : This function handles SPI3 global interrupt request.
    912          * Input          : None
    913          * Output         : None
    914          * Return         : None
    915          *******************************************************************************/
    916          void SPI3_IRQHandler(void)
    917          {
    918          }
    919          
    920          /*******************************************************************************
    921          * Function Name  : UART4_IRQHandler
    922          * Description    : This function handles UART4 global interrupt request.
    923          * Input          : None
    924          * Output         : None
    925          * Return         : None
    926          *******************************************************************************/
    927          void UART4_IRQHandler(void)
    928          {
    929          	//if (USART_GetFlagStatus(UART4, USART_IT_RXNE) != RESET)
    930          	//{
    931          	//	unsigned char c;
    932          	//	c = USART_ReceiveData(UART4);
    933          	//	USART_ClearITPendingBit(UART4, USART_IT_RXNE);
    934          	//	PCUsart_InByte(c);
    935          	//}
    936          }
    937          
    938          /*******************************************************************************
    939          * Function Name  : UART5_IRQHandler
    940          * Description    : This function handles UART5 global interrupt request.
    941          * Input          : None
    942          * Output         : None
    943          * Return         : None
    944          *******************************************************************************/
    945          void UART5_IRQHandler(void)
    946          {
    947          }
    948          
    949          /*******************************************************************************
    950          * Function Name  : TIM6_IRQHandler
    951          * Description    : This function handles TIM6 global interrupt request.
    952          * Input          : None
    953          * Output         : None
    954          * Return         : None
    955          *******************************************************************************/
    956          void TIM6_IRQHandler(void)
    957          {
    958          }
    959          
    960          /*******************************************************************************
    961          * Function Name  : TIM7_IRQHandler
    962          * Description    : This function handles TIM7 global interrupt request.
    963          * Input          : None
    964          * Output         : None
    965          * Return         : None
    966          *******************************************************************************/
    967          void TIM7_IRQHandler(void)
    968          {
    969          }
    970          
    971          /*******************************************************************************
    972          * Function Name  : DMA2_Channel1_IRQHandler
    973          * Description    : This function handles DMA2 Channel 1 interrupt request.
    974          * Input          : None
    975          * Output         : None
    976          * Return         : None
    977          *******************************************************************************/
    978          void DMA2_Channel1_IRQHandler(void)
    979          {
    980          }
    981          
    982          /*******************************************************************************
    983          * Function Name  : DMA2_Channel2_IRQHandler
    984          * Description    : This function handles DMA2 Channel 2 interrupt request.
    985          * Input          : None
    986          * Output         : None
    987          * Return         : None
    988          *******************************************************************************/
    989          void DMA2_Channel2_IRQHandler(void)
    990          {
    991          }
    992          
    993          /*******************************************************************************
    994          * Function Name  : DMA2_Channel3_IRQHandler
    995          * Description    : This function handles DMA2 Channel 3 interrupt request.
    996          * Input          : None
    997          * Output         : None
    998          * Return         : None
    999          *******************************************************************************/
   1000          void DMA2_Channel3_IRQHandler(void)
   1001          {
   1002          }
   1003          
   1004          /*******************************************************************************
   1005          * Function Name  : DMA2_Channel4_5_IRQHandler
   1006          * Description    : This function handles DMA2 Channel 4 and DMA2 Channel 5
   1007          *                  interrupt request.
   1008          * Input          : None
   1009          * Output         : None
   1010          * Return         : None
   1011          *******************************************************************************/
   1012          void DMA2_Channel4_5_IRQHandler(void)
   1013          {
   1014          }
   1015          
   1016          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function                   .cstack
     --------                   -------
     ADC1_2_IRQHandler               0
     ADC3_IRQHandler                 0
     BusFaultException               0
     CAN_RX1_IRQHandler              0
     CAN_SCE_IRQHandler              0
     DMA1_Channel1_IRQHandler        0
     DMA1_Channel2_IRQHandler        0
     DMA1_Channel3_IRQHandler        0
     DMA1_Channel4_IRQHandler        0
     DMA1_Channel5_IRQHandler        0
     DMA1_Channel6_IRQHandler        0
     DMA1_Channel7_IRQHandler        8
     DMA2_Channel1_IRQHandler        0
     DMA2_Channel2_IRQHandler        0
     DMA2_Channel3_IRQHandler        0
     DMA2_Channel4_5_IRQHandler      0
     DebugMonitor                    0
     EXTI0_IRQHandler                8
     EXTI15_10_IRQHandler            0
     EXTI1_IRQHandler                8
     EXTI2_IRQHandler                0
     EXTI3_IRQHandler                8
     EXTI4_IRQHandler                0
     EXTI9_5_IRQHandler              8
     FLASH_IRQHandler                0
     FSMC_IRQHandler                 0
     HardFaultException              8
     I2C1_ER_IRQHandler              0
     I2C1_EV_IRQHandler              0
     I2C2_ER_IRQHandler              0
     I2C2_EV_IRQHandler              0
     MemManageException              0
     NMIException                    0
     PVD_IRQHandler                  0
     PendSVC                         0
     RCC_IRQHandler                  0
     RTCAlarm_IRQHandler             0
     RTC_IRQHandler                  0
     SDIO_IRQHandler                 0
     SPI1_IRQHandler                 0
     SPI2_IRQHandler                 0
     SPI3_IRQHandler                 0
     SVCHandler                      0
     SysTickHandler                  0
     TAMPER_IRQHandler               0
     TIM1_BRK_IRQHandler             0
     TIM1_CC_IRQHandler              0
     TIM1_TRG_COM_IRQHandler         0
     TIM1_UP_IRQHandler              0
     TIM2_IRQHandler                 8
     TIM3_IRQHandler                 8
     TIM4_IRQHandler                 0
     TIM5_IRQHandler                 0
     TIM6_IRQHandler                 0
     TIM7_IRQHandler                 0
     TIM8_BRK_IRQHandler             0
     TIM8_CC_IRQHandler              0
     TIM8_TRG_COM_IRQHandler         0
     TIM8_UP_IRQHandler              0
     UART4_IRQHandler                0
     UART5_IRQHandler                0
     USART1_IRQHandler               0
     USART2_IRQHandler               8
     USART3_IRQHandler               8
     USBWakeUp_IRQHandler            0
     USB_HP_CAN_TX_IRQHandler        0
     USB_LP_CAN_RX0_IRQHandler       8
     UsageFaultException             0
     WWDG_IRQHandler                 0
     hard_fault_handler_c           40


   Section sizes:

     Function/Label                       Bytes
     --------------                       -----
     recv_data                               1
     NMIException                            2
     hard_fault_handler_c                  228
     HardFaultException                      8
     MemManageException                      2
     BusFaultException                       2
     UsageFaultException                     2
     DebugMonitor                            2
     SVCHandler                              2
     PendSVC                                 2
     SysTickHandler                          2
     WWDG_IRQHandler                         2
     PVD_IRQHandler                          2
     TAMPER_IRQHandler                       2
     RTC_IRQHandler                          2
     FLASH_IRQHandler                        2
     RCC_IRQHandler                          2
     EXTI0_IRQHandler                       34
     EXTI1_IRQHandler                       48
     EXTI2_IRQHandler                        2
     EXTI3_IRQHandler                       34
     EXTI4_IRQHandler                        2
     DMA1_Channel1_IRQHandler                2
     DMA1_Channel2_IRQHandler                2
     DMA1_Channel3_IRQHandler                2
     DMA1_Channel4_IRQHandler                2
     DMA1_Channel5_IRQHandler                2
     DMA1_Channel6_IRQHandler                2
     DMA1_Channel7_IRQHandler               44
     ADC1_2_IRQHandler                       2
     USB_HP_CAN_TX_IRQHandler                2
     USB_LP_CAN_RX0_IRQHandler               8
     CAN_RX1_IRQHandler                      2
     CAN_SCE_IRQHandler                      2
     EXTI9_5_IRQHandler                     44
     TIM1_BRK_IRQHandler                     2
     TIM1_UP_IRQHandler                      2
     TIM1_TRG_COM_IRQHandler                 2
     TIM1_CC_IRQHandler                      2
     TIM2_IRQHandler                         8
     TIM3_IRQHandler                        32
     TIM4_IRQHandler                         2
     I2C1_EV_IRQHandler                      2
     I2C1_ER_IRQHandler                      2
     I2C2_EV_IRQHandler                      2
     I2C2_ER_IRQHandler                      2
     SPI1_IRQHandler                         2
     SPI2_IRQHandler                         2
     USART1_IRQHandler                       2
     USART2_IRQHandler                     116
     USART3_IRQHandler                      48
     EXTI15_10_IRQHandler                    2
     RTCAlarm_IRQHandler                     2
     USBWakeUp_IRQHandler                    2
     TIM8_BRK_IRQHandler                     2
     TIM8_UP_IRQHandler                      2
     TIM8_TRG_COM_IRQHandler                 2
     TIM8_CC_IRQHandler                      2
     ADC3_IRQHandler                         2
     FSMC_IRQHandler                         2
     SDIO_IRQHandler                         2
     TIM5_IRQHandler                         2
     SPI3_IRQHandler                         2
     UART4_IRQHandler                        2
     UART5_IRQHandler                        2
     TIM6_IRQHandler                         2
     TIM7_IRQHandler                         2
     DMA2_Channel1_IRQHandler                2
     DMA2_Channel2_IRQHandler                2
     DMA2_Channel3_IRQHandler                2
     DMA2_Channel4_5_IRQHandler              2
     ?<Constant "[Hard fault handler]\n">   24
     ?<Constant "R0 = %x\n">                12
     ?<Constant "R1 = %x\n">                12
     ?<Constant "R2 = %x\n">                12
     ?<Constant "R3 = %x\n">                12
     ?<Constant "R12 = %x\n">               12
     ?<Constant "LR = %x\n">                12
     ?<Constant "PC = %x\n">                12
     ?<Constant "PSR = %x\n">               12
     ?<Constant "BFAR = %x\n">              12
     ?<Constant "CFSR = %x\n">              12
     ?<Constant "HFSR = %x\n">              12
     ?<Constant "DFSR = %x\n">              12
     ?<Constant "AFSR = %x\n">              12

 
   1 byte  in section .bss
 180 bytes in section .rodata
 768 bytes in section .text
 
 768 bytes of CODE  memory
 180 bytes of CONST memory
   1 byte  of DATA  memory

Errors: none
Warnings: 3
