###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     12/Oct/2015  15:17:26 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\H520B\FW\src\Project\stm32f10x_it.c                   #
#    Command line =  E:\H520B\FW\src\Project\stm32f10x_it.c -D DEBUG_VER      #
#                    -lcN E:\H520B\FW\src\Project\EWARMv5\Debug\List\ -o      #
#                    E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\ --no_cse      #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    5.4\arm\INC\DLib_Config_Full.h" -I                       #
#                    E:\H520B\FW\src\Project\EWARMv5\..\ -I                   #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\App\ -I            #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Drivers\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\FatFs\ -I          #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Lib\inc\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-CPU\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-LIB\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Ports #
#                    \ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\ #
#                    Source\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC #
#                    -Probe\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\usb_lib #
#                    \ -I "C:\Program Files\IAR Systems\Embedded Workbench    #
#                    5.4\arm\INC\" -Ol                                        #
#    List file    =  E:\H520B\FW\src\Project\EWARMv5\Debug\List\stm32f10x_it. #
#                    lst                                                      #
#    Object file  =  E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\stm32f10x_it.o #
#                                                                             #
#                                                                             #
###############################################################################

E:\H520B\FW\src\Project\stm32f10x_it.c
      1          /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
      2          * File Name          : stm32f10x_it.c
      3          * Author             : MCD Application Team
      4          * Version            : V2.0.3
      5          * Date               : 09/22/2008
      6          * Description        : Main Interrupt Service Routines.
      7          *                      This file provides template for all exceptions handler
      8          *                      and peripherals interrupt service routine.
      9          ********************************************************************************
     10          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     11          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     12          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     13          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     14          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     15          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     16          *******************************************************************************/
     17          
     18          /* Includes ------------------------------------------------------------------*/
     19          #include "stm32f10x_it.h"
     20          #include "PCUsart.h"
     21          #include "usb_lib.h"
     22          #include "usb_istr.h"
     23          #include "hw_config.h"
     24          #include "hw_platform.h"
     25          #include "usb_pwr.h"
     26          #include "keypad.h"
     27          #include "HJ5000_scanner.h"
     28          
     29          
     30          extern vu32 bDeviceState; /* USB device status */
     31          unsigned char		recv_data;
     32          
     33          /* Private typedef -----------------------------------------------------------*/
     34          /* Private define ------------------------------------------------------------*/
     35          /* Private macro -------------------------------------------------------------*/
     36          /* Private variables ---------------------------------------------------------*/
     37          /* Private function prototypes -----------------------------------------------*/
     38          /* Private functions ---------------------------------------------------------*/
     39          
     40          /*******************************************************************************
     41          * Function Name  : NMIException
     42          * Description    : This function handles NMI exception.
     43          * Input          : None
     44          * Output         : None
     45          * Return         : None
     46          *******************************************************************************/
     47          void NMIException(void)
     48          {
     49          }
     50          
     51          
     52          //然后在源程序里添加下面的函数代码: 
     53          // hard fault handler in C,  
     54          // with stack frame location as input parameter  
     55          void hard_fault_handler_c(unsigned int * hardfault_args)  
     56          {  
     57          	unsigned int stacked_r0;  
     58          	unsigned int stacked_r1;  
     59          	unsigned int stacked_r2;  
     60          	unsigned int stacked_r3;  
     61          	unsigned int stacked_r12;  
     62          	unsigned int stacked_lr;  
     63          	unsigned int stacked_pc;  
     64          	unsigned int stacked_psr;  
     65          	unsigned char	str[15];
     66          
     67          	stacked_r0 = ((unsigned long) hardfault_args[0]);  
     68          	stacked_r1 = ((unsigned long) hardfault_args[1]);  
     69          	stacked_r2 = ((unsigned long) hardfault_args[2]);  
     70          	stacked_r3 = ((unsigned long) hardfault_args[3]);  
     71          
     72          	stacked_r12 = ((unsigned long) hardfault_args[4]);  
     73          	stacked_lr = ((unsigned long) hardfault_args[5]);  
     74          	stacked_pc = ((unsigned long) hardfault_args[6]);  
     75          	stacked_psr = ((unsigned long) hardfault_args[7]);  
     76          
     77          	//gui_SetFont(16);
     78          	printf ("[Hard fault handler]\n");  
     79          	//sprintf(str,"R0=%x",stacked_r0);
     80          	//gui_TextOut(0,0,str,0,1);
     81          	printf ("R0 = %x\n", stacked_r0); 
     82          	
     83                  
     84                  //sprintf(str,"R1=%x",stacked_r1);
     85          	//gui_TextOut(0,20,str,0,1);
     86          	printf ("R1 = %x\n", stacked_r1);
     87          	//sprintf(str,"R2=%x",stacked_r2);
     88          	//gui_TextOut(0,40,str,0,1);;  
     89          	printf ("R2 = %x\n", stacked_r2);
     90          	//sprintf(str,"R3=%x",stacked_r3);
     91          	//gui_TextOut(0,60,str,0,1);
     92          	printf ("R3 = %x\n", stacked_r3);
     93          	//sprintf(str,"R12=%x",stacked_r12);
     94          	//gui_TextOut(0,80,str,0,1);
     95          	printf ("R12 = %x\n", stacked_r12);  
     96          	//sprintf(str,"LR=%x",stacked_lr);
     97          	//gui_TextOut(0,100,str,0,1);
     98          	printf ("LR = %x\n", stacked_lr);
     99          	//sprintf(str,"PC=%x",stacked_pc);
    100          	//gui_TextOut(0,120,str,0,1);
    101          	printf ("PC = %x\n", stacked_pc);
    102          	//sprintf(str,"PSR=%x",stacked_psr);
    103          	//gui_TextOut(0,140,str,0,1);
    104          	printf ("PSR = %x\n", stacked_psr);  
    105          	printf ("BFAR = %x\n", (*((volatile unsigned long *)(0xE000ED38))));  
    106          	printf ("CFSR = %x\n", (*((volatile unsigned long *)(0xE000ED28))));  
    107          	printf ("HFSR = %x\n", (*((volatile unsigned long *)(0xE000ED2C))));  
    108          	printf ("DFSR = %x\n", (*((volatile unsigned long *)(0xE000ED30))));  
    109          	printf ("AFSR = %x\n", (*((volatile unsigned long *)(0xE000ED3C))));  
    110          
    111          
    112          	while(1) 
    113          	{ 
    114          		;; 
    115          	} 
    116          
    117          }  
    118          /*******************************************************************************
    119          * Function Name  : HardFaultException
    120          * Description    : This function handles Hard Fault exception.
    121          * Input          : None
    122          * Output         : None
    123          * Return         : None
    124          *******************************************************************************/
    125          void HardFaultException(void)
    126          {
    127            /* Go to infinite loop when Hard Fault exception occurs */
    128           // while (1)
    129           // {
    130          	// // gui_TextOut(0,0,"HardFault!",0);
    131          	////  while(1);
    132           // }
    133          	HARDFAULT_ISR_HANDLE_d();
    134          }
    135          
    136          //HardFault_Handler\ 
    137          //PROC 
    138          //;EXPORT  HardFault_Handler         [WEAK] 
    139          //;B                  . 
    140          //IMPORT hard_fault_handler_c  
    141          //TST LR, #4  
    142          //ITE EQ  
    143          //MRSEQ R0, MSP  
    144          //MRSNE R0, PSP  
    145          //B hard_fault_handler_c  
    146          //ENDP 
    147          
    148          /*******************************************************************************
    149          * Function Name  : MemManageException
    150          * Description    : This function handles Memory Manage exception.
    151          * Input          : None
    152          * Output         : None
    153          * Return         : None
    154          *******************************************************************************/
    155          void MemManageException(void)
    156          {
    157            /* Go to infinite loop when Memory Manage exception occurs */
    158            while (1)
    159            {
    160            }
    161          }
    162          
    163          /*******************************************************************************
    164          * Function Name  : BusFaultException
    165          * Description    : This function handles Bus Fault exception.
    166          * Input          : None
    167          * Output         : None
    168          * Return         : None
    169          *******************************************************************************/
    170          void BusFaultException(void)
    171          {
    172            /* Go to infinite loop when Bus Fault exception occurs */
    173            while (1)
    174            {
    175            }
    176          }
    177          
    178          /*******************************************************************************
    179          * Function Name  : UsageFaultException
    180          * Description    : This function handles Usage Fault exception.
    181          * Input          : None
    182          * Output         : None
    183          * Return         : None
    184          *******************************************************************************/
    185          void UsageFaultException(void)
    186          {
    187            /* Go to infinite loop when Usage Fault exception occurs */
    188            while (1)
    189            {
    190            }
    191          }
    192          
    193          /*******************************************************************************
    194          * Function Name  : DebugMonitor
    195          * Description    : This function handles Debug Monitor exception.
    196          * Input          : None
    197          * Output         : None
    198          * Return         : None
    199          *******************************************************************************/
    200          void DebugMonitor(void)
    201          {
    202          }
    203          
    204          /*******************************************************************************
    205          * Function Name  : SVCHandler
    206          * Description    : This function handles SVCall exception.
    207          * Input          : None
    208          * Output         : None
    209          * Return         : None
    210          *******************************************************************************/
    211          void SVCHandler(void)
    212          {
    213          }
    214          
    215          /*******************************************************************************
    216          * Function Name  : PendSVC
    217          * Description    : This function handles PendSVC exception.
    218          * Input          : None
    219          * Output         : None
    220          * Return         : None
    221          *******************************************************************************/
    222          void PendSVC(void)
    223          {
    224          }
    225          
    226          /*******************************************************************************
    227          * Function Name  : SysTickHandler
    228          * Description    : This function handles SysTick Handler.
    229          * Input          : None
    230          * Output         : None
    231          * Return         : None
    232          *******************************************************************************/
    233          void SysTickHandler(void)
    234          { 
    235          }
    236          
    237          /*******************************************************************************
    238          * Function Name  : WWDG_IRQHandler
    239          * Description    : This function handles WWDG interrupt request.
    240          * Input          : None
    241          * Output         : None
    242          * Return         : None
    243          *******************************************************************************/
    244          void WWDG_IRQHandler(void)
    245          {
    246          }
    247          
    248          /*******************************************************************************
    249          * Function Name  : PVD_IRQHandler
    250          * Description    : This function handles PVD interrupt request.
    251          * Input          : None
    252          * Output         : None
    253          * Return         : None
    254          *******************************************************************************/
    255          void PVD_IRQHandler(void)
    256          {
    257          }
    258          
    259          /*******************************************************************************
    260          * Function Name  : TAMPER_IRQHandler
    261          * Description    : This function handles Tamper interrupt request. 
    262          * Input          : None
    263          * Output         : None
    264          * Return         : None
    265          *******************************************************************************/
    266          void TAMPER_IRQHandler(void)
    267          {
    268          #ifdef TAMPER_DETECT_ENABLE	
    269            TAMPER_IRQ_Handle();
    270          #endif  
    271          }
    272          
    273          /*******************************************************************************
    274          * Function Name  : RTC_IRQHandler
    275          * Description    : This function handles RTC global interrupt request.
    276          * Input          : None
    277          * Output         : None
    278          * Return         : None
    279          *******************************************************************************/
    280          void RTC_IRQHandler(void)
    281          {
    282          //		CPU_SR    cpu_sr;
    283          //		CPU_CRITICAL_ENTER();                                       /* Tell uC/OS-II that we are starting an ISR            */
    284          //		OSIntNesting++;
    285          //		OSIntEnter();
    286          
    287          	//RTC_IRQ_ISRHandler();
    288          //		RTC_ClearITPendingBit(RTC_IT_SEC);
    289          
    290          //		OSIntExit();
    291          //		OSIntExit();
    292          //		CPU_CRITICAL_EXIT();
    293          }
    294          
    295          /*******************************************************************************
    296          * Function Name  : FLASH_IRQHandler
    297          * Description    : This function handles Flash interrupt request.
    298          * Input          : None
    299          * Output         : None
    300          * Return         : None
    301          *******************************************************************************/
    302          void FLASH_IRQHandler(void)
    303          {
    304          }
    305          
    306          /*******************************************************************************
    307          * Function Name  : RCC_IRQHandler
    308          * Description    : This function handles RCC interrupt request. 
    309          * Input          : None
    310          * Output         : None
    311          * Return         : None
    312          *******************************************************************************/
    313          void RCC_IRQHandler(void)
    314          {
    315          }
    316          
    317          /*******************************************************************************
    318          * Function Name  : EXTI0_IRQHandler
    319          * Description    : This function handles External interrupt Line 0 request.
    320          * Input          : None
    321          * Output         : None
    322          * Return         : None
    323          *******************************************************************************/
    324          void EXTI0_IRQHandler(void)
    325          {
    326          	OSIntEnter();
    327          	if(EXTI_GetITStatus(EXTI_Line0) != RESET)
    328          	{   
    329          		EXTI_ClearITPendingBit(EXTI_Line0);
    330          		Keypad_EXTI_ISRHandler(SCAN_KEY_EXTI_INT);
    331          	}
    332          	OSIntExit();
    333          }
    334          
    335          /*******************************************************************************
    336          * Function Name  : EXTI1_IRQHandler
    337          * Description    : This function handles External interrupt Line 1 request.
    338          * Input          : None
    339          * Output         : None
    340          * Return         : None
    341          *******************************************************************************/
    342          void EXTI1_IRQHandler(void)
    343          {
    344          	OSIntEnter();
    345          	if(EXTI_GetITStatus(EXTI_Line1) != RESET)
    346          	{   
    347          		if(hw_platform_USBcable_Insert_Detect() == 0)
    348          		{
    349          			bDeviceState = UNCONNECTED;
    350          		}
    351          		EXTI_ClearITPendingBit(EXTI_Line1);
    352          	}
    353          	OSIntExit();
    354          }
    355          
    356          /*******************************************************************************
    357          * Function Name  : EXTI2_IRQHandler
    358          * Description    : This function handles External interrupt Line 2 request.
    359          * Input          : None
    360          * Output         : None
    361          * Return         : None
    362          *******************************************************************************/
    363          void EXTI2_IRQHandler(void)
    364          {
    365          }
    366          
    367          /*******************************************************************************
    368          * Function Name  : EXTI3_IRQHandler
    369          * Description    : This function handles External interrupt Line 3 request.
    370          * Input          : None
    371          * Output         : None
    372          * Return         : None
    373          *******************************************************************************/
    374          void EXTI3_IRQHandler(void)
    375          {
    376          	OSIntEnter();
    377          	if(EXTI_GetITStatus(EXTI_Line3) != RESET)
    378          	{   
    379          		EXTI_ClearITPendingBit(EXTI_Line3);
    380          		Keypad_EXTI_ISRHandler(ERASE_KEY_EXTI_INT);
    381          	}
    382          	OSIntExit();
    383          }
    384          
    385          /*******************************************************************************
    386          * Function Name  : EXTI4_IRQHandler
    387          * Description    : This function handles External interrupt Line 4 request.
    388          * Input          : None
    389          * Output         : None
    390          * Return         : None
    391          *******************************************************************************/
    392          void EXTI4_IRQHandler(void)
    393          {
    394          }
    395          
    396          /*******************************************************************************
    397          * Function Name  : DMA1_Channel1_IRQHandler
    398          * Description    : This function handles DMA1 Channel 1 interrupt request.
    399          * Input          : None
    400          * Output         : None
    401          * Return         : None
    402          *******************************************************************************/
    403          void DMA1_Channel1_IRQHandler(void)
    404          {
    405          }
    406          
    407          /*******************************************************************************
    408          * Function Name  : DMA1_Channel2_IRQHandler
    409          * Description    : This function handles DMA1 Channel 2 interrupt request.
    410          * Input          : None
    411          * Output         : None
    412          * Return         : None
    413          *******************************************************************************/
    414          void DMA1_Channel2_IRQHandler(void)
    415          {
    416          }
    417          
    418          /*******************************************************************************
    419          * Function Name  : DMA1_Channel3_IRQHandler
    420          * Description    : This function handles DMA1 Channel 3 interrupt request.
    421          * Input          : None
    422          * Output         : None
    423          * Return         : None
    424          *******************************************************************************/
    425          void DMA1_Channel3_IRQHandler(void)
    426          {
    427          }
    428          
    429          /*******************************************************************************
    430          * Function Name  : DMA1_Channel4_IRQHandler
    431          * Description    : This function handles DMA1 Channel 4 interrupt request.
    432          * Input          : None
    433          * Output         : None
    434          * Return         : None
    435          *******************************************************************************/
    436          void DMA1_Channel4_IRQHandler(void)
    437          {
    438          }
    439          
    440          /*******************************************************************************
    441          * Function Name  : DMA1_Channel5_IRQHandler
    442          * Description    : This function handles DMA1 Channel 5 interrupt request.
    443          * Input          : None
    444          * Output         : None
    445          * Return         : None
    446          *******************************************************************************/
    447          void DMA1_Channel5_IRQHandler(void)
    448          {
    449          }
    450          
    451          /*******************************************************************************
    452          * Function Name  : DMA1_Channel6_IRQHandler
    453          * Description    : This function handles DMA1 Channel 6 interrupt request.
    454          * Input          : None
    455          * Output         : None
    456          * Return         : None
    457          *******************************************************************************/
    458          void DMA1_Channel6_IRQHandler(void)
    459          {
    460          }
    461          
    462          /*******************************************************************************
    463          * Function Name  : DMA1_Channel7_IRQHandler
    464          * Description    : This function handles DMA1 Channel 7 interrupt request.
    465          * Input          : None
    466          * Output         : None
    467          * Return         : None
    468          *******************************************************************************/
    469          void DMA1_Channel7_IRQHandler(void)
    470          {
    471          	OSIntEnter();
    472          	if (DMA_GetITStatus(DMA1_IT_TC7))
    473          	{
    474          		DMA_Cmd(DMA1_Channel7, DISABLE);
    475          	}
    476          	/* clear DMA flag */
    477          	DMA_ClearFlag(DMA1_FLAG_TC7 | DMA1_FLAG_TE7);
    478          	OSIntExit();
    479          }
    480          
    481          /*******************************************************************************
    482          * Function Name  : ADC1_2_IRQHandler
    483          * Description    : This function handles ADC1 and ADC2 global interrupts requests.
    484          * Input          : None
    485          * Output         : None
    486          * Return         : None
    487          *******************************************************************************/
    488          void ADC1_2_IRQHandler(void)
    489          {
    490          }
    491          
    492          /*******************************************************************************
    493          * Function Name  : USB_HP_CAN_TX_IRQHandler
    494          * Description    : This function handles USB High Priority or CAN TX interrupts 
    495          *                  requests.
    496          * Input          : None
    497          * Output         : None
    498          * Return         : None
    499          *******************************************************************************/
    500          void USB_HP_CAN_TX_IRQHandler(void)
    501          {
    502          }
    503          
    504          /*******************************************************************************
    505          * Function Name  : USB_LP_CAN_RX0_IRQHandler
    506          * Description    : This function handles USB Low Priority or CAN RX0 interrupts 
    507          *                  requests.
    508          * Input          : None
    509          * Output         : None
    510          * Return         : None
    511          *******************************************************************************/
    512          void USB_LP_CAN_RX0_IRQHandler(void)
    513          {
    514            USB_Istr();
    515          }
    516          
    517          /*******************************************************************************
    518          * Function Name  : CAN_RX1_IRQHandler
    519          * Description    : This function handles CAN RX1 interrupt request.
    520          * Input          : None
    521          * Output         : None
    522          * Return         : None
    523          *******************************************************************************/
    524          void CAN_RX1_IRQHandler(void)
    525          {
    526          }
    527          
    528          /*******************************************************************************
    529          * Function Name  : CAN_SCE_IRQHandler
    530          * Description    : This function handles CAN SCE interrupt request.
    531          * Input          : None
    532          * Output         : None
    533          * Return         : None
    534          *******************************************************************************/
    535          void CAN_SCE_IRQHandler(void)
    536          {
    537          }
    538          
    539          /*******************************************************************************
    540          * Function Name  : EXTI9_5_IRQHandler
    541          * Description    : This function handles External lines 9 to 5 interrupt request.
    542          * Input          : None
    543          * Output         : None
    544          * Return         : None
    545          *******************************************************************************/
    546          void EXTI9_5_IRQHandler(void)
    547          {
    548          	OSIntEnter();
    549          	if(EXTI_GetITStatus(EXTI_Line6) != RESET)
    550          	{   
    551          		charge_detect_io_cnt++;
    552          		EXTI_ClearITPendingBit(EXTI_Line6);
    553          	}
    554          	OSIntExit();
    555          }
    556          
    557          /*******************************************************************************
    558          * Function Name  : TIM1_BRK_IRQHandler
    559          * Description    : This function handles TIM1 Break interrupt request.
    560          * Input          : None
    561          * Output         : None
    562          * Return         : None
    563          *******************************************************************************/
    564          void TIM1_BRK_IRQHandler(void)
    565          {
    566          }
    567          
    568          /*******************************************************************************
    569          * Function Name  : TIM1_UP_IRQHandler
    570          * Description    : This function handles TIM1 overflow and update interrupt 
    571          *                  request.
    572          * Input          : None
    573          * Output         : None
    574          * Return         : None
    575          *******************************************************************************/
    576          void TIM1_UP_IRQHandler(void)
    577          {
    578          }
    579          
    580          /*******************************************************************************
    581          * Function Name  : TIM1_TRG_COM_IRQHandler
    582          * Description    : This function handles TIM1 Trigger and commutation interrupts 
    583          *                  requests.
    584          * Input          : None
    585          * Output         : None
    586          * Return         : None
    587          *******************************************************************************/
    588          void TIM1_TRG_COM_IRQHandler(void)
    589          {
    590          }
    591          
    592          /*******************************************************************************
    593          * Function Name  : TIM1_CC_IRQHandler
    594          * Description    : This function handles TIM1 capture compare interrupt request.
    595          * Input          : None
    596          * Output         : None
    597          * Return         : None
    598          *******************************************************************************/
    599          void TIM1_CC_IRQHandler(void)
    600          {
    601          }
    602          
    603          /*******************************************************************************
    604          * Function Name  : TIM2_IRQHandler
    605          * Description    : This function handles TIM2 global interrupt request.
    606          * Input          : None
    607          * Output         : None
    608          * Return         : None
    609          *******************************************************************************/
    610          void TIM2_IRQHandler(void)
    611          {
    612              TIM2_UpdateISRHandler();
    613          }
    614          
    615          /*******************************************************************************
    616          * Function Name  : TIM3_IRQHandler
    617          * Description    : This function handles TIM3 global interrupt request.
    618          * Input          : None
    619          * Output         : None
    620          * Return         : None
    621          *******************************************************************************/
    622          void TIM3_IRQHandler(void)
    623          {
    624          	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
    625          	{
    626          		Keypad_Timer_ISRHandler();
    627          		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
    628          	}
    629          }
    630          
    631          /*******************************************************************************
    632          * Function Name  : TIM4_IRQHandler
    633          * Description    : This function handles TIM4 global interrupt request.
    634          * Input          : None
    635          * Output         : None
    636          * Return         : None
    637          *******************************************************************************/
    638          void TIM4_IRQHandler(void)
    639          {
    640          }
    641          
    642          /*******************************************************************************
    643          * Function Name  : I2C1_EV_IRQHandler
    644          * Description    : This function handles I2C1 Event interrupt request.
    645          * Input          : None
    646          * Output         : None
    647          * Return         : None
    648          *******************************************************************************/
    649          void I2C1_EV_IRQHandler(void)
    650          {
    651          }
    652          
    653          /*******************************************************************************
    654          * Function Name  : I2C1_ER_IRQHandler
    655          * Description    : This function handles I2C1 Error interrupt request.
    656          * Input          : None
    657          * Output         : None
    658          * Return         : None
    659          *******************************************************************************/
    660          void I2C1_ER_IRQHandler(void)
    661          {
    662          }
    663          
    664          /*******************************************************************************
    665          * Function Name  : I2C2_EV_IRQHandler
    666          * Description    : This function handles I2C2 Event interrupt request.
    667          * Input          : None
    668          * Output         : None
    669          * Return         : None
    670          *******************************************************************************/
    671          void I2C2_EV_IRQHandler(void)
    672          {
    673          }
    674          
    675          /*******************************************************************************
    676          * Function Name  : I2C2_ER_IRQHandler
    677          * Description    : This function handles I2C2 Error interrupt request.
    678          * Input          : None
    679          * Output         : None
    680          * Return         : None
    681          *******************************************************************************/
    682          void I2C2_ER_IRQHandler(void)
    683          {
    684          }
    685          
    686          /*******************************************************************************
    687          * Function Name  : SPI1_IRQHandler
    688          * Description    : This function handles SPI1 global interrupt request.
    689          * Input          : None
    690          * Output         : None
    691          * Return         : None
    692          *******************************************************************************/
    693          void SPI1_IRQHandler(void)
    694          {
    695          }
    696          
    697          /*******************************************************************************
    698          * Function Name  : SPI2_IRQHandler
    699          * Description    : This function handles SPI2 global interrupt request.
    700          * Input          : None
    701          * Output         : None
    702          * Return         : None
    703          *******************************************************************************/
    704          void SPI2_IRQHandler(void)
    705          {
    706          }
    707          
    708          /*******************************************************************************
    709          * Function Name  : USART1_IRQHandler
    710          * Description    : This function handles USART1 global interrupt request.
    711          * Input          : None
    712          * Output         : None
    713          * Return         : None
    714          *******************************************************************************/
    715          void USART1_IRQHandler(void)
    716          {
    717          
    718          }
    719          
    720          /*******************************************************************************
    721          * Function Name  : USART2_IRQHandler
    722          * Description    : This function handles USART2 global interrupt request.
    723          * Input          : None
    724          * Output         : None
    725          * Return         : None
    726          *******************************************************************************/
    727          void USART2_IRQHandler(void)
    728          {
    729          	//if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
    730          	//{   
    731          	//	recv_data	=	USART_ReceiveData(USART2) & 0xff;
    732          	//	WBTD_RxISRHandler(recv_data);
    733          	//	USART_ClearITPendingBit(USART2, USART_IT_RXNE);
    734          	//}
    735          	//else if (USART_GetFlagStatus(USART2, USART_FLAG_ORE) != RESET)
    736           //   {
    737          	//	USART_ReceiveData(USART2);
    738          	//}
    739          
    740          	unsigned int temp = 0;    
    741          	if(USART_GetITStatus(USART2, USART_IT_IDLE) != RESET)  
    742          	{  
    743          		//USART_ClearFlag(USART1,USART_IT_IDLE);  
    744          		temp = USART2->SR;  
    745          		temp = USART2->DR; //清USART_IT_IDLE标志  
    746          		DMA_Cmd(DMA1_Channel6,DISABLE);  
    747            
    748          #if(BT_MODULE == USE_WBTDS01)
    749          			temp = WBTD_RES_BUFFER_LEN - DMA_GetCurrDataCounter(DMA1_Channel6);  
    750          
    751          			WBTD_RxISRHandler(wbtd_recbuffer,temp); 
    752          
    753          			//设置传输数据长度  
    754          			DMA1_Channel6->CNDTR = WBTD_RES_BUFFER_LEN;
    755          #else
    756          			temp = BT816_RES_BUFFER_LEN - DMA_GetCurrDataCounter(DMA1_Channel6);  
    757          
    758          			BT816_RxISRHandler(BT816_recbuffer,temp); 
    759          
    760          			//设置传输数据长度  
    761          			DMA1_Channel6->CNDTR = BT816_RES_BUFFER_LEN;
    762          #endif  
    763          
    764          		
    765          		//打开DMA  
    766          		DMA_Cmd(DMA1_Channel6,ENABLE);  
    767          	}  
    768          	else if (USART_GetFlagStatus(USART2, USART_FLAG_ORE) != RESET)
    769          	{
    770          		USART_ReceiveData(USART2);
    771          	}
    772          }
    773          
    774          /*******************************************************************************
    775          * Function Name  : USART3_IRQHandler
    776          * Description    : This function handles USART3 global interrupt request.
    777          * Input          : None
    778          * Output         : None
    779          * Return         : None
    780          *******************************************************************************/
    781          void USART3_IRQHandler(void)
    782          {
    783          	if (USART_GetFlagStatus(USART3, USART_IT_RXNE) != RESET)
    784          	{
    785          		unsigned char c;
    786          		c = USART_ReceiveData(USART3);
    787          		USART_ClearITPendingBit(USART3, USART_IT_RXNE);
    788          		HJ5000_RxISRHandler(c);
    789          	}
    790          }
    791          
    792          /*******************************************************************************
    793          * Function Name  : EXTI15_10_IRQHandler
    794          * Description    : This function handles External lines 15 to 10 interrupt request.
    795          * Input          : None
    796          * Output         : None
    797          * Return         : None
    798          *******************************************************************************/
    799          void EXTI15_10_IRQHandler(void)
    800          {
    801          }
    802          
    803          /*******************************************************************************
    804          * Function Name  : RTCAlarm_IRQHandler
    805          * Description    : This function handles RTC Alarm interrupt request.
    806          * Input          : None
    807          * Output         : None
    808          * Return         : None
    809          *******************************************************************************/
    810          void RTCAlarm_IRQHandler(void)
    811          {
    812          }
    813          
    814          /*******************************************************************************
    815          * Function Name  : USBWakeUp_IRQHandler
    816          * Description    : This function handles USB WakeUp interrupt request.
    817          * Input          : None
    818          * Output         : None
    819          * Return         : None
    820          *******************************************************************************/
    821          void USBWakeUp_IRQHandler(void)
    822          {
    823          }
    824          
    825          /*******************************************************************************
    826          * Function Name  : TIM8_BRK_IRQHandler
    827          * Description    : This function handles TIM8 Break interrupt request.
    828          * Input          : None
    829          * Output         : None
    830          * Return         : None
    831          *******************************************************************************/
    832          void TIM8_BRK_IRQHandler(void)
    833          {
    834          }
    835          
    836          /*******************************************************************************
    837          * Function Name  : TIM8_UP_IRQHandler
    838          * Description    : This function handles TIM8 overflow and update interrupt 
    839          *                  request.
    840          * Input          : None
    841          * Output         : None
    842          * Return         : None
    843          *******************************************************************************/
    844          void TIM8_UP_IRQHandler(void)
    845          {
    846          }
    847          
    848          /*******************************************************************************
    849          * Function Name  : TIM8_TRG_COM_IRQHandler
    850          * Description    : This function handles TIM8 Trigger and commutation interrupts 
    851          *                  requests.
    852          * Input          : None
    853          * Output         : None
    854          * Return         : None
    855          *******************************************************************************/
    856          void TIM8_TRG_COM_IRQHandler(void)
    857          {
    858          }
    859          
    860          /*******************************************************************************
    861          * Function Name  : TIM8_CC_IRQHandler
    862          * Description    : This function handles TIM8 capture compare interrupt request.
    863          * Input          : None
    864          * Output         : None
    865          * Return         : None
    866          *******************************************************************************/
    867          void TIM8_CC_IRQHandler(void)
    868          {
    869          }
    870          
    871          /*******************************************************************************
    872          * Function Name  : ADC3_IRQHandler
    873          * Description    : This function handles ADC3 global interrupt request.
    874          * Input          : None
    875          * Output         : None
    876          * Return         : None
    877          *******************************************************************************/
    878          void ADC3_IRQHandler(void)
    879          {
    880          }
    881          
    882          /*******************************************************************************
    883          * Function Name  : FSMC_IRQHandler
    884          * Description    : This function handles FSMC global interrupt request.
    885          * Input          : None
    886          * Output         : None
    887          * Return         : None
    888          *******************************************************************************/
    889          void FSMC_IRQHandler(void)
    890          {
    891          }
    892          
    893          /*******************************************************************************
    894          * Function Name  : SDIO_IRQHandler
    895          * Description    : This function handles SDIO global interrupt request.
    896          * Input          : None
    897          * Output         : None
    898          * Return         : None
    899          *******************************************************************************/
    900          void SDIO_IRQHandler(void)
    901          {
    902          	/* Process All SDIO Interrupt Sources */
    903          	//SD_ProcessIRQSrc();
    904          }
    905          
    906          /*******************************************************************************
    907          * Function Name  : TIM5_IRQHandler
    908          * Description    : This function handles TIM5 global interrupt request.
    909          * Input          : None
    910          * Output         : None
    911          * Return         : None
    912          *******************************************************************************/
    913          void TIM5_IRQHandler(void)
    914          {
    915          }
    916          
    917          /*******************************************************************************
    918          * Function Name  : SPI3_IRQHandler
    919          * Description    : This function handles SPI3 global interrupt request.
    920          * Input          : None
    921          * Output         : None
    922          * Return         : None
    923          *******************************************************************************/
    924          void SPI3_IRQHandler(void)
    925          {
    926          }
    927          
    928          /*******************************************************************************
    929          * Function Name  : UART4_IRQHandler
    930          * Description    : This function handles UART4 global interrupt request.
    931          * Input          : None
    932          * Output         : None
    933          * Return         : None
    934          *******************************************************************************/
    935          void UART4_IRQHandler(void)
    936          {
    937          	//if (USART_GetFlagStatus(UART4, USART_IT_RXNE) != RESET)
    938          	//{
    939          	//	unsigned char c;
    940          	//	c = USART_ReceiveData(UART4);
    941          	//	USART_ClearITPendingBit(UART4, USART_IT_RXNE);
    942          	//	PCUsart_InByte(c);
    943          	//}
    944          }
    945          
    946          /*******************************************************************************
    947          * Function Name  : UART5_IRQHandler
    948          * Description    : This function handles UART5 global interrupt request.
    949          * Input          : None
    950          * Output         : None
    951          * Return         : None
    952          *******************************************************************************/
    953          void UART5_IRQHandler(void)
    954          {
    955          }
    956          
    957          /*******************************************************************************
    958          * Function Name  : TIM6_IRQHandler
    959          * Description    : This function handles TIM6 global interrupt request.
    960          * Input          : None
    961          * Output         : None
    962          * Return         : None
    963          *******************************************************************************/
    964          void TIM6_IRQHandler(void)
    965          {
    966          }
    967          
    968          /*******************************************************************************
    969          * Function Name  : TIM7_IRQHandler
    970          * Description    : This function handles TIM7 global interrupt request.
    971          * Input          : None
    972          * Output         : None
    973          * Return         : None
    974          *******************************************************************************/
    975          void TIM7_IRQHandler(void)
    976          {
    977          }
    978          
    979          /*******************************************************************************
    980          * Function Name  : DMA2_Channel1_IRQHandler
    981          * Description    : This function handles DMA2 Channel 1 interrupt request.
    982          * Input          : None
    983          * Output         : None
    984          * Return         : None
    985          *******************************************************************************/
    986          void DMA2_Channel1_IRQHandler(void)
    987          {
    988          }
    989          
    990          /*******************************************************************************
    991          * Function Name  : DMA2_Channel2_IRQHandler
    992          * Description    : This function handles DMA2 Channel 2 interrupt request.
    993          * Input          : None
    994          * Output         : None
    995          * Return         : None
    996          *******************************************************************************/
    997          void DMA2_Channel2_IRQHandler(void)
    998          {
    999          }
   1000          
   1001          /*******************************************************************************
   1002          * Function Name  : DMA2_Channel3_IRQHandler
   1003          * Description    : This function handles DMA2 Channel 3 interrupt request.
   1004          * Input          : None
   1005          * Output         : None
   1006          * Return         : None
   1007          *******************************************************************************/
   1008          void DMA2_Channel3_IRQHandler(void)
   1009          {
   1010          }
   1011          
   1012          /*******************************************************************************
   1013          * Function Name  : DMA2_Channel4_5_IRQHandler
   1014          * Description    : This function handles DMA2 Channel 4 and DMA2 Channel 5
   1015          *                  interrupt request.
   1016          * Input          : None
   1017          * Output         : None
   1018          * Return         : None
   1019          *******************************************************************************/
   1020          void DMA2_Channel4_5_IRQHandler(void)
   1021          {
   1022          }
   1023          
   1024          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function                   .cstack
     --------                   -------
     ADC1_2_IRQHandler               0
     ADC3_IRQHandler                 0
     BusFaultException               0
     CAN_RX1_IRQHandler              0
     CAN_SCE_IRQHandler              0
     DMA1_Channel1_IRQHandler        0
     DMA1_Channel2_IRQHandler        0
     DMA1_Channel3_IRQHandler        0
     DMA1_Channel4_IRQHandler        0
     DMA1_Channel5_IRQHandler        0
     DMA1_Channel6_IRQHandler        0
     DMA1_Channel7_IRQHandler        8
     DMA2_Channel1_IRQHandler        0
     DMA2_Channel2_IRQHandler        0
     DMA2_Channel3_IRQHandler        0
     DMA2_Channel4_5_IRQHandler      0
     DebugMonitor                    0
     EXTI0_IRQHandler                8
     EXTI15_10_IRQHandler            0
     EXTI1_IRQHandler                8
     EXTI2_IRQHandler                0
     EXTI3_IRQHandler                8
     EXTI4_IRQHandler                0
     EXTI9_5_IRQHandler              8
     FLASH_IRQHandler                0
     FSMC_IRQHandler                 0
     HardFaultException              8
     I2C1_ER_IRQHandler              0
     I2C1_EV_IRQHandler              0
     I2C2_ER_IRQHandler              0
     I2C2_EV_IRQHandler              0
     MemManageException              0
     NMIException                    0
     PVD_IRQHandler                  0
     PendSVC                         0
     RCC_IRQHandler                  0
     RTCAlarm_IRQHandler             0
     RTC_IRQHandler                  0
     SDIO_IRQHandler                 0
     SPI1_IRQHandler                 0
     SPI2_IRQHandler                 0
     SPI3_IRQHandler                 0
     SVCHandler                      0
     SysTickHandler                  0
     TAMPER_IRQHandler               0
     TIM1_BRK_IRQHandler             0
     TIM1_CC_IRQHandler              0
     TIM1_TRG_COM_IRQHandler         0
     TIM1_UP_IRQHandler              0
     TIM2_IRQHandler                 8
     TIM3_IRQHandler                 8
     TIM4_IRQHandler                 0
     TIM5_IRQHandler                 0
     TIM6_IRQHandler                 0
     TIM7_IRQHandler                 0
     TIM8_BRK_IRQHandler             0
     TIM8_CC_IRQHandler              0
     TIM8_TRG_COM_IRQHandler         0
     TIM8_UP_IRQHandler              0
     UART4_IRQHandler                0
     UART5_IRQHandler                0
     USART1_IRQHandler               0
     USART2_IRQHandler               8
     USART3_IRQHandler               8
     USBWakeUp_IRQHandler            0
     USB_HP_CAN_TX_IRQHandler        0
     USB_LP_CAN_RX0_IRQHandler       8
     UsageFaultException             0
     WWDG_IRQHandler                 0
     hard_fault_handler_c           40


   Section sizes:

     Function/Label                       Bytes
     --------------                       -----
     recv_data                               1
     NMIException                            2
     hard_fault_handler_c                  228
     HardFaultException                      8
     MemManageException                      2
     BusFaultException                       2
     UsageFaultException                     2
     DebugMonitor                            2
     SVCHandler                              2
     PendSVC                                 2
     SysTickHandler                          2
     WWDG_IRQHandler                         2
     PVD_IRQHandler                          2
     TAMPER_IRQHandler                       2
     RTC_IRQHandler                          2
     FLASH_IRQHandler                        2
     RCC_IRQHandler                          2
     EXTI0_IRQHandler                       34
     EXTI1_IRQHandler                       48
     EXTI2_IRQHandler                        2
     EXTI3_IRQHandler                       34
     EXTI4_IRQHandler                        2
     DMA1_Channel1_IRQHandler                2
     DMA1_Channel2_IRQHandler                2
     DMA1_Channel3_IRQHandler                2
     DMA1_Channel4_IRQHandler                2
     DMA1_Channel5_IRQHandler                2
     DMA1_Channel6_IRQHandler                2
     DMA1_Channel7_IRQHandler               44
     ADC1_2_IRQHandler                       2
     USB_HP_CAN_TX_IRQHandler                2
     USB_LP_CAN_RX0_IRQHandler               8
     CAN_RX1_IRQHandler                      2
     CAN_SCE_IRQHandler                      2
     EXTI9_5_IRQHandler                     44
     TIM1_BRK_IRQHandler                     2
     TIM1_UP_IRQHandler                      2
     TIM1_TRG_COM_IRQHandler                 2
     TIM1_CC_IRQHandler                      2
     TIM2_IRQHandler                         8
     TIM3_IRQHandler                        32
     TIM4_IRQHandler                         2
     I2C1_EV_IRQHandler                      2
     I2C1_ER_IRQHandler                      2
     I2C2_EV_IRQHandler                      2
     I2C2_ER_IRQHandler                      2
     SPI1_IRQHandler                         2
     SPI2_IRQHandler                         2
     USART1_IRQHandler                       2
     USART2_IRQHandler                     116
     USART3_IRQHandler                      48
     EXTI15_10_IRQHandler                    2
     RTCAlarm_IRQHandler                     2
     USBWakeUp_IRQHandler                    2
     TIM8_BRK_IRQHandler                     2
     TIM8_UP_IRQHandler                      2
     TIM8_TRG_COM_IRQHandler                 2
     TIM8_CC_IRQHandler                      2
     ADC3_IRQHandler                         2
     FSMC_IRQHandler                         2
     SDIO_IRQHandler                         2
     TIM5_IRQHandler                         2
     SPI3_IRQHandler                         2
     UART4_IRQHandler                        2
     UART5_IRQHandler                        2
     TIM6_IRQHandler                         2
     TIM7_IRQHandler                         2
     DMA2_Channel1_IRQHandler                2
     DMA2_Channel2_IRQHandler                2
     DMA2_Channel3_IRQHandler                2
     DMA2_Channel4_5_IRQHandler              2
     ?<Constant "[Hard fault handler]\n">   24
     ?<Constant "R0 = %x\n">                12
     ?<Constant "R1 = %x\n">                12
     ?<Constant "R2 = %x\n">                12
     ?<Constant "R3 = %x\n">                12
     ?<Constant "R12 = %x\n">               12
     ?<Constant "LR = %x\n">                12
     ?<Constant "PC = %x\n">                12
     ?<Constant "PSR = %x\n">               12
     ?<Constant "BFAR = %x\n">              12
     ?<Constant "CFSR = %x\n">              12
     ?<Constant "HFSR = %x\n">              12
     ?<Constant "DFSR = %x\n">              12
     ?<Constant "AFSR = %x\n">              12

 
   1 byte  in section .bss
 180 bytes in section .rodata
 768 bytes in section .text
 
 768 bytes of CODE  memory
 180 bytes of CONST memory
   1 byte  of DATA  memory

Errors: none
Warnings: 3
