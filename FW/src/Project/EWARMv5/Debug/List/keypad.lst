###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     26/Jan/2016  15:31:56 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\H520B\FW\src\Drivers\keypad.c                         #
#    Command line =  E:\H520B\FW\src\Drivers\keypad.c -lcN                    #
#                    E:\H520B\FW\src\Project\EWARMv5\Debug\List\ -o           #
#                    E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\ --no_cse      #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    5.4\arm\INC\DLib_Config_Full.h" -I                       #
#                    E:\H520B\FW\src\Project\EWARMv5\..\ -I                   #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\App\ -I            #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Drivers\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\FatFs\ -I          #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Lib\inc\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-CPU\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-LIB\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Ports #
#                    \ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\ #
#                    Source\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC #
#                    -Probe\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\usb_lib #
#                    \ -I "C:\Program Files\IAR Systems\Embedded Workbench    #
#                    5.4\arm\INC\" -Ol                                        #
#    List file    =  E:\H520B\FW\src\Project\EWARMv5\Debug\List\keypad.lst    #
#    Object file  =  E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\keypad.o       #
#                                                                             #
#                                                                             #
###############################################################################

E:\H520B\FW\src\Drivers\keypad.c
      1          /**
      2          * @file keypad.c
      3          * @brief 按键驱动程序
      4          * @version V0.0.1
      5          * @author joe.zhou
      6          * @date 2015年08月28日
      7          * @note
      8          * @copy
      9          *
     10          * 此代码为深圳合杰电子有限公司项目代码，任何人及公司未经许可不得复制传播，或用于
     11          * 本公司以外的项目。本司保留一切追究权利。
     12          *
     13          * <h1><center>&copy; COPYRIGHT 2015 heroje</center></h1>
     14          *
     15          */
     16          #include "stm32f10x_lib.h"
     17          #include "ucos_ii.h"
     18          #include <stdio.h>
     19          #include "keypad.h"
     20          #include "cpu.h"
     21          #include "app.h"
     22          #include "TimeBase.h"
     23          #include "hw_platform.h"
     24          #include "HJ5000_scanner.h"
     25          
     26          static  unsigned char		current_press_key;
     27          static  unsigned int		press_cnt;
     28          static  unsigned int		release_cnt; 
     29          static  unsigned char		keypad_state;
     30          
     31          unsigned char	scan_key_trig;
     32          
     33          
     34          extern	unsigned int	device_current_state;		//设备主状态机
     35          extern	OS_EVENT		*pEvent_Queue;			//事件消息队列
     36          extern unsigned int		keypress_timeout;
     37          /**
     38          * @brief   		Intialize the KeyBoard IO
     39          * @param[in]   none
     40          * @return      none
     41          * @note   
     42          *		按键的硬件连接如下图所示：
     43          *		ScanKey -- PA0
     44          *		EraseKey -- PB3
     45          */
     46          static void Keypad_Initport(void)
     47          {
     48          	GPIO_InitTypeDef  gpio_init;
     49          	EXTI_InitTypeDef EXTI_InitStructure;    
     50          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB, ENABLE);
     51          
     52          	//ScanKey  PA.0
     53          	gpio_init.GPIO_Pin   = GPIO_Pin_0;
     54          	gpio_init.GPIO_Speed = GPIO_Speed_10MHz;
     55          	gpio_init.GPIO_Mode  = GPIO_Mode_IPU;
     56          	GPIO_Init(GPIOA, &gpio_init);		
     57          
     58          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
     59          	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
     60          
     61          	//EraseKey PB3
     62          	gpio_init.GPIO_Pin   = GPIO_Pin_3;
     63          	GPIO_Init(GPIOB, &gpio_init);
     64          
     65          	/* Connect EXTI Line0 to PA0 */
     66          	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
     67          	/* Connect EXTI Line3 to PB3 */
     68          	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource3);
     69          
     70          	/* Configure EXTI LineX to generate an interrupt on falling edge */
     71          	EXTI_ClearITPendingBit(EXTI_Line0| EXTI_Line3);
     72          	EXTI_InitStructure.EXTI_Line = EXTI_Line0 | EXTI_Line3;
     73          	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
     74          	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
     75          	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
     76          	EXTI_Init(&EXTI_InitStructure);
     77          	EXTI_GenerateSWInterrupt(EXTI_Line0 | EXTI_Line3);
     78          	scan_key_trig = 0;
     79          }
     80          
     81          /**
     82          * @brief   	Enable the keypad interrupt
     83          * @return      none
     84          */
     85          void Keypad_Int_Enable(void)
     86          {
     87          	NVIC_InitTypeDef	NVIC_InitStructure;
     88          	EXTI_ClearITPendingBit(EXTI_Line0| EXTI_Line3);
     89          	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);    // 抢占式优先级别
     90          
     91          	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQChannel;
     92          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
     93          	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
     94          	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     95          	NVIC_Init(&NVIC_InitStructure);
     96          
     97          	NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQChannel;
     98          	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     99          	NVIC_Init(&NVIC_InitStructure);
    100          }
    101          
    102          /**
    103          * @brief   	Disable the keypad interrupt
    104          * @return      none
    105          */
    106          void Keypad_Int_Disable(void)
    107          {
    108          	NVIC_InitTypeDef	NVIC_InitStructure;
    109          	EXTI_ClearITPendingBit(EXTI_Line0| EXTI_Line3);
    110          
    111          	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQChannel;
    112          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
    113          	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    114          	NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
    115          	NVIC_Init(&NVIC_InitStructure);
    116          
    117          	NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQChannel;
    118          	NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
    119          	NVIC_Init(&NVIC_InitStructure);
    120          }
    121          
    122          
    123          /**
    124          * @brief 初始化按键检测需要使用到的定时器,20ms定时器，用以检测按键的按下时长
    125          */
    126          void Keypad_Timer_Init(void)
    127          {
    128          	TIM_TimeBaseInitTypeDef						TIM_TimeBaseStructure;
    129          	TIM_OCInitTypeDef							TIM_OCInitStructure;
    130          	NVIC_InitTypeDef							NVIC_InitStructure;
    131          
    132          	//初始化结构体变量
    133          	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
    134          	TIM_OCStructInit(&TIM_OCInitStructure);
    135          
    136          	/*开启相应时钟 */
    137          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);  
    138          
    139          
    140          	//定时计算公式：(（1+Prescaler）/72M ) *(Period+1) = ((1+39)/72M) * (72000/2-1+1) = 20ms
    141          	/* Time Base configuration */
    142          	TIM_TimeBaseStructure.TIM_Prescaler			= 39;      
    143          	TIM_TimeBaseStructure.TIM_CounterMode		= TIM_CounterMode_Up; //向上计数
    144          	TIM_TimeBaseStructure.TIM_Period			= (72000/2-1);      
    145          	TIM_TimeBaseStructure.TIM_ClockDivision		= TIM_CKD_DIV1;
    146          	//TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    147          
    148          	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
    149          
    150          	/* Channel 1, 2, 3 and 4 Configuration in Timing mode */
    151          	TIM_OCInitStructure.TIM_OCMode				= TIM_OCMode_Timing;
    152          	TIM_OCInitStructure.TIM_Pulse				= 0x0;
    153          
    154          	TIM_OC1Init(TIM3, &TIM_OCInitStructure);
    155          
    156          	TIM_ClearFlag(TIM3,TIM_FLAG_Update);
    157          	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
    158          
    159          	/* Enable the TIM2 Interrupt */
    160          	NVIC_InitStructure.NVIC_IRQChannel			= TIM3_IRQChannel;
    161          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
    162          	//NVIC_InitStructure.NVIC_IRQChannelSubPriority	= 1;
    163          	NVIC_InitStructure.NVIC_IRQChannelCmd		= ENABLE;
    164          	NVIC_Init(&NVIC_InitStructure);
    165          }
    166          
    167          /**
    168          * @brief 使能按键检测需要使用到的定时器
    169          */
    170          void Keypad_Timer_Enable(void)
    171          {
    172          	TIM_ClearFlag(TIM3,TIM_FLAG_Update);
    173          	TIM_Cmd(TIM3, ENABLE);
    174          }
    175          
    176          /**
    177          * @brief 关闭按键检测需要使用到的定时器
    178          */
    179          void Keypad_Timer_Disable(void)
    180          {
    181          	TIM_Cmd(TIM3, DISABLE);
    182          }
    183          
    184          /**
    185          * @brief 初始化按键
    186          */
    187          void Keypad_Init(void)
    188          {
    189          	Keypad_Initport();
    190          	Keypad_Timer_Init();
    191          	Keypad_Int_Enable();
    192          }
    193          
    194          
    195          #define KEYPAD_STATE_INIT					0
    196          #define KEYPAD_STATE_AT_LEAST_CLICK			1
    197          #define KEYPAD_STATE_FIRST_CLICK_RELEASE	2
    198          #define KEYPAD_STATE_SECOND_CLICK			3
    199          #define KEYPAD_STATE_LONG_PRESS				4
    200          
    201          /**
    202           * @brief keypad 2个Key对应的IO外部中断ISR
    203           * @note  EXIT0、EXTI3的中断服务函数调用
    204          */
    205          void Keypad_EXTI_ISRHandler(unsigned char	exti_line)
    206          {
    207          	//一进入中断，表示检测到有按键被按下，此时需要先关闭所有按键的IO中断，直到此次判断结束再开启
    208          	Keypad_Int_Disable();
    209          
    210          	//再开启定时器及其中断，判断按键是单击还是长按
    211          	Keypad_Timer_Enable();
    212          
    213          	if (exti_line == SCAN_KEY_EXTI_INT)
    214          	{
    215          		reset_resVar();
    216          		SCANNER_TRIG_ON();
    217                          hw_platform_start_led_blink(LED_GREEN,3);
    218          		scan_key_trig = 1;
    219          		current_press_key = SCAN_KEY;
    220          	}
    221          	else if (exti_line == ERASE_KEY_EXTI_INT)
    222          	{
    223          		current_press_key = ERASE_KEY;
    224          	}
    225          	press_cnt = 0;
    226          	keypad_state = KEYPAD_STATE_INIT;
    227          }
    228          
    229          
    230          /**
    231           * @brief 读取keypad IO，返回IO状态
    232           * @param[in] unsigned char key		需要读取的是哪个Key对应的IO
    233           * @return  0: low  else: high  
    234          */
    235          static unsigned char Keypad_ReadIO(unsigned char key)
    236          {
    237          	unsigned char h1=0,h2=0;
    238          	unsigned int	i;
    239          reread:
    240          	if (key == SCAN_KEY)
    241          	{
    242          		h1 = GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0);
    243          	}
    244          	else if (key == ERASE_KEY)
    245          	{
    246          		h1 = GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_3);
    247          	}
    248          
    249          	//hw_platform_trip_io();
    250          	for(i=0;i < 10000;i++);	//约1ms(在72M频率下，实测972us)
    251          	//hw_platform_trip_io();
    252          
    253          	if (key == SCAN_KEY)
    254          	{
    255          		h2 = GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0);
    256          	}
    257          	else if (key == ERASE_KEY)
    258          	{
    259          		h2 = GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_3);
    260          	}
    261          
    262          	if(h1 == h2)
    263          	{
    264          		return h1;
    265          	}
    266          	else
    267          	{
    268          		goto  reread;
    269          	}
    270          }
    271          
    272          //按住超过2个按键低电平判断周期即认为至少是一次按键单击事件的发生，以20ms周期为例，就是只要按住超过40ms即认为至少发生了有效的按键单击事件
    273          #define SINGLE_CLICK_TH			2		
    274          #define LONG_PRESS_TH			250		//按住超过250个按键低电平判断周期即认为是一次按键长按事件的发生，按住超过5S即认为按键长按
    275          #define DOUBLE_CLICK_INTERVAL	4		//双击，连续两次按键之间的时间不超过80ms即认为是双击
    276          //定义一个回调函数指针，以供中断处理函数在获取到按键键值时post给其余模块使用时，可以提供不同的方法
    277          //typedef void (* post_key_method)(unsigned char key_value);
    278          
    279          //static void post_key(unsigned char key)
    280          //{
    281          //	OSQPost(pEvent_Queue,(void*)key);
    282          //}
    283          
    284          /**
    285           * @brief 定时器中断处理程序
    286           * @note 真正判断按键是在20ms定时器中断处理程序完成的
    287          */
    288          void Keypad_Timer_ISRHandler(void)
    289          {
    290          	if (Keypad_ReadIO(current_press_key) == 0)
    291          	{
    292          		if (keypad_state == KEYPAD_STATE_INIT)
    293          		{
    294          			press_cnt++;
    295          			if (press_cnt == SINGLE_CLICK_TH)
    296          			{
    297          				keypress_timeout = 0;
    298          				keypad_state = KEYPAD_STATE_AT_LEAST_CLICK;
    299          				//if (current_press_key == SCAN_KEY)
    300          				//{
    301          				//	hw_platform_start_led_blink(LED_GREEN,3);
    302          				//	if (device_current_state == STATE_HID_Mode)
    303          				//	{
    304          				//		OSQPost(pEvent_Queue,(void*)EVENT_SCAN_KEY_SINGLE_CLICK);
    305          				//		//keypad_state = KEYPAD_STATE_INIT;
    306          				//		Keypad_Timer_Disable();
    307          				//		Keypad_Int_Enable();
    308          				//	}
    309          				//}
    310          			}
    311          		}
    312          		else if (keypad_state == KEYPAD_STATE_AT_LEAST_CLICK)
    313          		{
    314          			press_cnt++;
    315          			if (press_cnt == LONG_PRESS_TH)
    316          			{
    317          				if (current_press_key == SCAN_KEY)
    318          				{
    319          					OSQPost(pEvent_Queue,(void*)EVENT_SCAN_KEY_LONG_PRESS);
    320          				}
    321          				else if (current_press_key == ERASE_KEY)
    322          				{
    323          					OSQPost(pEvent_Queue,(void*)EVENT_ERASE_KEY_LONG_PRESS);
    324          				}
    325          				
    326          				//keypad_state = KEYPAD_STATE_INIT;
    327          				//Keypad_Timer_Disable();
    328          				//Keypad_Int_Enable();
    329          			}
    330          		}
    331          		else if (keypad_state == KEYPAD_STATE_FIRST_CLICK_RELEASE)
    332          		{
    333          			keypad_state = KEYPAD_STATE_SECOND_CLICK;
    334          			press_cnt = 0;
    335          		}
    336          		else if (keypad_state == KEYPAD_STATE_SECOND_CLICK)
    337          		{
    338          			press_cnt++;
    339          			if (press_cnt == LONG_PRESS_TH)
    340          			{
    341          				OSQPost(pEvent_Queue,(void*)EVENT_SCAN_KEY_LONG_PRESS);
    342          				//Keypad_Timer_Disable();
    343          				//Keypad_Int_Enable();
    344          			}
    345          		}
    346          	}
    347          	else
    348          	{
    349          		if(current_press_key == SCAN_KEY)
    350          		{
    351          			SCANNER_TRIG_OFF();
    352          			scan_key_trig = 0;
    353          			hw_platform_stop_led_blink(LED_GREEN);
    354          		}
    355          
    356          		if (keypad_state == KEYPAD_STATE_INIT)
    357          		{
    358          			//keypad_state = KEYPAD_STATE_INIT;
    359          			Keypad_Timer_Disable();
    360          			Keypad_Int_Enable();
    361          		}
    362          		else if (keypad_state == KEYPAD_STATE_AT_LEAST_CLICK)
    363          		{
    364          			if (current_press_key == SCAN_KEY)
    365          			{
    366          				//OSQPost(pEvent_Queue,(void*)EVENT_SCAN_KEY_SINGLE_CLICK);
    367          				if (device_current_state == STATE_BT_Mode_Connect)
    368          				{
    369          					//只有在蓝牙连接状态下，才需要检测SCAN键的双击行为
    370          					keypad_state = 	KEYPAD_STATE_FIRST_CLICK_RELEASE;
    371          					release_cnt = 0;
    372          				}
    373          				else
    374          				{
    375          					//其余状态下没有必要检测SCAN键的双击行为
    376          				//	hw_platform_start_led_blink(LED_GREEN,3);
    377          				//	OSQPost(pEvent_Queue,(void*)EVENT_SCAN_KEY_SINGLE_CLICK);
    378          					Keypad_Timer_Disable();
    379          					Keypad_Int_Enable();
    380          				}
    381          				
    382          			}
    383          			else if (current_press_key == ERASE_KEY)
    384          			{
    385          				OSQPost(pEvent_Queue,(void*)EVENT_ERASE_KEY_SINGLE_CLICK);
    386          				//keypad_state = KEYPAD_STATE_INIT;
    387          				Keypad_Timer_Disable();
    388          				Keypad_Int_Enable();
    389          			}
    390          		}
    391          		else if (keypad_state == KEYPAD_STATE_FIRST_CLICK_RELEASE)
    392          		{
    393          			release_cnt++;
    394          			if (release_cnt == DOUBLE_CLICK_INTERVAL)
    395          			{
    396          				//单击后，在双击间隔时间内没有再次按下按键，及可以确认单击事件的发生
    397          				//hw_platform_start_led_blink(LED_GREEN,3);
    398          				//OSQPost(pEvent_Queue,(void*)EVENT_SCAN_KEY_SINGLE_CLICK);
    399          				Keypad_Timer_Disable();
    400          				Keypad_Int_Enable();
    401          			}
    402          		}
    403          		else if (keypad_state == KEYPAD_STATE_SECOND_CLICK)
    404          		{
    405          			OSQPost(pEvent_Queue,(void*)EVENT_SCAN_KEY_DOUBLE_CLICK);
    406          			//keypad_state = KEYPAD_STATE_INIT;
    407          			Keypad_Timer_Disable();
    408          			Keypad_Int_Enable();
    409          			hw_platform_stop_led_blink(LED_GREEN);
    410          		}
    411          	}
    412          }
    413          

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     Keypad_EXTI_ISRHandler       8
     Keypad_Init                  8
     Keypad_Initport             16
     Keypad_Int_Disable           8
     Keypad_Int_Enable            8
     Keypad_ReadIO               16
     Keypad_Timer_Disable         8
     Keypad_Timer_Enable          8
     Keypad_Timer_ISRHandler      8
     Keypad_Timer_Init           40


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     current_press_key          1
     press_cnt                  4
     release_cnt                4
     keypad_state               1
     scan_key_trig              1
     Keypad_Initport          140
     Keypad_Int_Enable         66
     Keypad_Int_Disable        58
     Keypad_Timer_Init        124
     Keypad_Timer_Enable       20
     Keypad_Timer_Disable      12
     Keypad_Init               16
     Keypad_EXTI_ISRHandler    80
     Keypad_ReadIO            106
     Keypad_Timer_ISRHandler  392
     ??DataTable9               4
     ??DataTable19              4
     ??DataTable38              4
     ??DataTable40              4
     ??DataTable41              4
     ??DataTable46              4
     ??DataTable48              4

 
    11 bytes in section .bss
 1 042 bytes in section .text
 
 1 042 bytes of CODE memory
    11 bytes of DATA memory

Errors: none
Warnings: none
