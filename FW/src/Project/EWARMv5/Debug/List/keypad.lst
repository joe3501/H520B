###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     12/Sep/2015  15:35:09 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\H520B\FW\src\Drivers\keypad.c                         #
#    Command line =  E:\H520B\FW\src\Drivers\keypad.c -D DEBUG_VER -lcN       #
#                    E:\H520B\FW\src\Project\EWARMv5\Debug\List\ -o           #
#                    E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\ --no_cse      #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    5.4\arm\INC\DLib_Config_Full.h" -I                       #
#                    E:\H520B\FW\src\Project\EWARMv5\..\ -I                   #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\App\ -I            #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Drivers\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\FatFs\ -I          #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Lib\inc\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-CPU\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-LIB\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Ports #
#                    \ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\ #
#                    Source\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC #
#                    -Probe\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\usb_lib #
#                    \ -I "C:\Program Files\IAR Systems\Embedded Workbench    #
#                    5.4\arm\INC\" -Ol                                        #
#    List file    =  E:\H520B\FW\src\Project\EWARMv5\Debug\List\keypad.lst    #
#    Object file  =  E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\keypad.o       #
#                                                                             #
#                                                                             #
###############################################################################

E:\H520B\FW\src\Drivers\keypad.c
      1          /**
      2          * @file keypad.c
      3          * @brief 按键驱动程序
      4          * @version V0.0.1
      5          * @author joe.zhou
      6          * @date 2015年08月28日
      7          * @note
      8          * @copy
      9          *
     10          * 此代码为深圳合杰电子有限公司项目代码，任何人及公司未经许可不得复制传播，或用于
     11          * 本公司以外的项目。本司保留一切追究权利。
     12          *
     13          * <h1><center>&copy; COPYRIGHT 2015 heroje</center></h1>
     14          *
     15          */
     16          #include "stm32f10x_lib.h"
     17          #include "ucos_ii.h"
     18          #include <stdio.h>
     19          #include "keypad.h"
     20          #include "cpu.h"
     21          #include "app.h"
     22          #include "TimeBase.h"
     23          #include "hw_platform.h"
     24          
     25          static  unsigned char		current_press_key;
     26          static  unsigned int		press_cnt;
     27          static  unsigned int		release_cnt; 
     28          static  unsigned char		keypad_state;
     29          
     30          
     31          extern	unsigned int	device_current_state;		//设备主状态机
     32          extern	OS_EVENT		*pEvent_Queue;			//事件消息队列
     33          
     34          /**
     35          * @brief   		Intialize the KeyBoard IO
     36          * @param[in]   none
     37          * @return      none
     38          * @note   
     39          *		按键的硬件连接如下图所示：
     40          *		ScanKey -- PA0
     41          *		EraseKey -- PB3
     42          *		ResetKey -- PB4
     43          */
     44          static void Keypad_Initport(void)
     45          {
     46          	GPIO_InitTypeDef  gpio_init;
     47          	EXTI_InitTypeDef EXTI_InitStructure;    
     48          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB, ENABLE);
     49          
     50          	//ScanKey  PA.0
     51          	gpio_init.GPIO_Pin   = GPIO_Pin_0;
     52          	gpio_init.GPIO_Speed = GPIO_Speed_10MHz;
     53          	gpio_init.GPIO_Mode  = GPIO_Mode_IPU;
     54          	GPIO_Init(GPIOA, &gpio_init);		
     55          
     56          	//EraseKey PB3		ResetKey  PB4
     57          	gpio_init.GPIO_Pin   = GPIO_Pin_3 | GPIO_Pin_4;
     58          	GPIO_Init(GPIOB, &gpio_init);
     59          
     60          	/* Connect EXTI Line0 to PA0 */
     61          	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
     62          	/* Connect EXTI Line3 to PB3 */
     63          	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource3);
     64          	/* Connect EXTI Line4 to PB4 */
     65          	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource4);
     66          
     67          	/* Configure EXTI LineX to generate an interrupt on falling edge */
     68          	EXTI_ClearITPendingBit(EXTI_Line0| EXTI_Line3 | EXTI_Line4);
     69          	EXTI_InitStructure.EXTI_Line = EXTI_Line0 | EXTI_Line3 | EXTI_Line4;
     70          	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
     71          	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
     72          	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
     73          	EXTI_Init(&EXTI_InitStructure);
     74          	EXTI_GenerateSWInterrupt(EXTI_Line0 | EXTI_Line3 | EXTI_Line4);
     75          }
     76          
     77          /**
     78          * @brief   	Enable the keypad interrupt
     79          * @return      none
     80          */
     81          void Keypad_Int_Enable(void)
     82          {
     83          	NVIC_InitTypeDef	NVIC_InitStructure;
     84          	EXTI_ClearITPendingBit(EXTI_Line0| EXTI_Line3 | EXTI_Line4);
     85          	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);    // 抢占式优先级别
     86          
     87          	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQChannel;
     88          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
     89          	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
     90          	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     91          	NVIC_Init(&NVIC_InitStructure);
     92          
     93          	NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQChannel;
     94          	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     95          	NVIC_Init(&NVIC_InitStructure);
     96          
     97          
     98          	NVIC_InitStructure.NVIC_IRQChannel = EXTI4_IRQChannel;
     99              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    100          	NVIC_Init(&NVIC_InitStructure);
    101          }
    102          
    103          /**
    104          * @brief   	Disable the keypad interrupt
    105          * @return      none
    106          */
    107          void Keypad_Int_Disable(void)
    108          {
    109          	NVIC_InitTypeDef	NVIC_InitStructure;
    110          	EXTI_ClearITPendingBit(EXTI_Line0| EXTI_Line3 | EXTI_Line4);
    111          
    112          	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQChannel;
    113          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
    114          	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    115          	NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
    116          	NVIC_Init(&NVIC_InitStructure);
    117          
    118          	NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQChannel;
    119          	NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
    120          	NVIC_Init(&NVIC_InitStructure);
    121          
    122          	NVIC_InitStructure.NVIC_IRQChannel = EXTI4_IRQChannel;
    123          	NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
    124          	NVIC_Init(&NVIC_InitStructure);
    125          }
    126          
    127          
    128          /**
    129          * @brief 初始化按键检测需要使用到的定时器,20ms定时器，用以检测按键的按下时长
    130          */
    131          void Keypad_Timer_Init(void)
    132          {
    133          	TIM_TimeBaseInitTypeDef						TIM_TimeBaseStructure;
    134          	TIM_OCInitTypeDef							TIM_OCInitStructure;
    135          	NVIC_InitTypeDef							NVIC_InitStructure;
    136          
    137          	//初始化结构体变量
    138          	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
    139          	TIM_OCStructInit(&TIM_OCInitStructure);
    140          
    141          	/*开启相应时钟 */
    142          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);  
    143          
    144          
    145          	//定时计算公式：(（1+Prescaler）/72M ) *(Period+1) = ((1+39)/72M) * (72000/2-1+1) = 20ms
    146          	/* Time Base configuration */
    147          	TIM_TimeBaseStructure.TIM_Prescaler			= 39;      
    148          	TIM_TimeBaseStructure.TIM_CounterMode		= TIM_CounterMode_Up; //向上计数
    149          	TIM_TimeBaseStructure.TIM_Period			= (72000/2-1);      
    150          	TIM_TimeBaseStructure.TIM_ClockDivision		= 0x0;
    151          
    152          
    153          	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
    154          
    155          	/* Channel 1, 2, 3 and 4 Configuration in Timing mode */
    156          	TIM_OCInitStructure.TIM_OCMode				= TIM_OCMode_Timing;
    157          	TIM_OCInitStructure.TIM_Pulse				= 0x0;
    158          
    159          	TIM_OC1Init(TIM3, &TIM_OCInitStructure);
    160          
    161          	TIM_ClearFlag(TIM3,TIM_FLAG_Update);
    162          	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
    163          
    164          	/* Enable the TIM2 Interrupt */
    165          	NVIC_InitStructure.NVIC_IRQChannel			= TIM3_IRQChannel;
    166          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
    167          	//NVIC_InitStructure.NVIC_IRQChannelSubPriority	= 1;
    168          	NVIC_InitStructure.NVIC_IRQChannelCmd		= ENABLE;
    169          	NVIC_Init(&NVIC_InitStructure);
    170          }
    171          
    172          /**
    173          * @brief 使能按键检测需要使用到的定时器
    174          */
    175          void Keypad_Timer_Enable(void)
    176          {
    177          	TIM_ClearFlag(TIM3,TIM_FLAG_Update);
    178          	TIM_Cmd(TIM3, ENABLE);
    179          }
    180          
    181          /**
    182          * @brief 关闭按键检测需要使用到的定时器
    183          */
    184          void Keypad_Timer_Disable(void)
    185          {
    186          	TIM_Cmd(TIM3, DISABLE);
    187          }
    188          
    189          /**
    190          * @brief 初始化按键
    191          */
    192          void Keypad_Init(void)
    193          {
    194          	Keypad_Initport();
    195          	Keypad_Timer_Init();
    196          	Keypad_Int_Enable();
    197          }
    198          
    199          
    200          #define KEYPAD_STATE_INIT					0
    201          #define KEYPAD_STATE_AT_LEAST_CLICK			1
    202          #define KEYPAD_STATE_FIRST_CLICK_RELEASE	2
    203          #define KEYPAD_STATE_SECOND_CLICK			3
    204          #define KEYPAD_STATE_LONG_PRESS				4
    205          
    206          /**
    207           * @brief keypad 三个Key对应的IO外部中断ISR
    208           * @note  EXIT0、EXTI3、EXTI4的中断服务函数调用
    209          */
    210          void Keypad_EXTI_ISRHandler(unsigned char	exti_line)
    211          {
    212          	//一进入中断，表示检测到有按键被按下，此时需要先关闭所有按键的IO中断，直到此次判断结束再开启
    213          	Keypad_Int_Disable();
    214          
    215          	//再开启定时器及其中断，判断按键是单击还是长按
    216          	Keypad_Timer_Enable();
    217          
    218          	if (exti_line == SCAN_KEY_EXTI_INT)
    219          	{
    220          		current_press_key = SCAN_KEY;
    221          	}
    222          	else if (exti_line == ERASE_KEY_EXTI_INT)
    223          	{
    224          		current_press_key = ERASE_KEY;
    225          	}
    226          	else
    227          	{
    228          		current_press_key = RESET_KEY;
    229          	}
    230          	press_cnt = 0;
    231          	keypad_state = KEYPAD_STATE_INIT;
    232          }
    233          
    234          
    235          /**
    236           * @brief 读取keypad IO，返回IO状态
    237           * @param[in] unsigned char key		需要读取的是哪个Key对应的IO
    238           * @return  0: low  else: high  
    239          */
    240          static unsigned char Keypad_ReadIO(unsigned char key)
    241          {
    242          	unsigned char h1,h2;
    243          	unsigned int	i;
    244          reread:
    245          	if (key == SCAN_KEY)
    246          	{
    247          		h1 = GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0);
    248          	}
    249          	else if (key == ERASE_KEY)
    250          	{
    251          		h1 = GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_3);
    252          	}
    253          	else
    254          	{
    255          		h1 = GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_4);
    256          	}
    257          
    258          	for(i=0;i < 6000;i++);	//约2ms
    259          
    260          	if (key == SCAN_KEY)
    261          	{
    262          		h1 = GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0);
    263          	}
    264          	else if (key == ERASE_KEY)
    265          	{
    266          		h1 = GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_3);
    267          	}
    268          	else
    269          	{
    270          		h1 = GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_4);
    271          	}
    272          
    273          	if(h1 == h2)
    274          	{
    275          		return h1;
    276          	}
    277          	else
    278          	{
    279          		goto  reread;
    280          	}
    281          }
    282          
    283          //按住超过2个按键低电平判断周期即认为至少是一次按键单击事件的发生，以20ms周期为例，就是只要按住超过40ms即认为至少发生了有效的按键单击事件
    284          #define SINGLE_CLICK_TH			2		
    285          #define LONG_PRESS_TH			250		//按住超过250个按键低电平判断周期即认为是一次按键长按事件的发生，按住超过5S即认为按键长按
    286          #define DOUBLE_CLICK_INTERVAL	3		//双击，连续两次按键之间的时间不超过60ms即认为是双击
    287          //定义一个回调函数指针，以供中断处理函数在获取到按键键值时post给其余模块使用时，可以提供不同的方法
    288          //typedef void (* post_key_method)(unsigned char key_value);
    289          
    290          //static void post_key(unsigned char key)
    291          //{
    292          //	OSQPost(pEvent_Queue,(void*)key);
    293          //}
    294          
    295          /**
    296           * @brief 定时器中断处理程序
    297           * @note 真正判断按键是在20ms定时器中断处理程序完成的
    298          */
    299          void Keypad_Timer_ISRHandler(void)
    300          {
    301          	if (Keypad_ReadIO(current_press_key) == 0)
    302          	{
    303          		if (keypad_state == KEYPAD_STATE_INIT)
    304          		{
    305          			press_cnt++;
    306          			if (press_cnt == SINGLE_CLICK_TH)
    307          			{
    308          				keypad_state = KEYPAD_STATE_AT_LEAST_CLICK;
    309          				if (current_press_key == RESET_KEY)
    310          				{
    311          					OSQPost(pEvent_Queue,(void*)EVENT_RESET_KEY_PRESS);
    312          					//keypad_state = KEYPAD_STATE_INIT;
    313          					Keypad_Timer_Disable();
    314          					Keypad_Int_Enable();
    315          				}
    316          				else if (current_press_key == SCAN_KEY)
    317          				{
    318          					hw_platform_start_led_blink(LED_GREEN,3);
    319          					if (device_current_state == STATE_HID_Mode)
    320          					{
    321          						OSQPost(pEvent_Queue,(void*)EVENT_SCAN_KEY_SINGLE_CLICK);
    322          						//keypad_state = KEYPAD_STATE_INIT;
    323          						Keypad_Timer_Disable();
    324          						Keypad_Int_Enable();
    325          					}
    326          				}
    327          			}
    328          		}
    329          		else if (keypad_state == KEYPAD_STATE_AT_LEAST_CLICK)
    330          		{
    331          			press_cnt++;
    332          			if (press_cnt == LONG_PRESS_TH)
    333          			{
    334          				if (current_press_key == SCAN_KEY)
    335          				{
    336          					OSQPost(pEvent_Queue,(void*)EVENT_SCAN_KEY_LONG_PRESS);
    337          				}
    338          				else if (current_press_key == ERASE_KEY)
    339          				{
    340          					OSQPost(pEvent_Queue,(void*)EVENT_ERASE_KEY_LONG_PRESS);
    341          				}
    342          				
    343          				//keypad_state = KEYPAD_STATE_INIT;
    344          				Keypad_Timer_Disable();
    345          				Keypad_Int_Enable();
    346          			}
    347          		}
    348          		else if (keypad_state == KEYPAD_STATE_FIRST_CLICK_RELEASE)
    349          		{
    350          			keypad_state = KEYPAD_STATE_SECOND_CLICK;
    351          			press_cnt = 0;
    352          		}
    353          		else if (keypad_state == KEYPAD_STATE_SECOND_CLICK)
    354          		{
    355          			press_cnt++;
    356          			if (press_cnt == LONG_PRESS_TH)
    357          			{
    358          				OSQPost(pEvent_Queue,(void*)EVENT_SCAN_KEY_LONG_PRESS);
    359          				Keypad_Timer_Disable();
    360          				Keypad_Int_Enable();
    361          			}
    362          		}
    363          	}
    364          	else
    365          	{
    366          		if (keypad_state == KEYPAD_STATE_INIT)
    367          		{
    368          			//keypad_state = KEYPAD_STATE_INIT;
    369          			Keypad_Timer_Disable();
    370          			Keypad_Int_Enable();
    371          		}
    372          		else if (keypad_state == KEYPAD_STATE_AT_LEAST_CLICK)
    373          		{
    374          			if (current_press_key == SCAN_KEY)
    375          			{
    376          				//OSQPost(pEvent_Queue,(void*)EVENT_SCAN_KEY_SINGLE_CLICK);
    377          				if (device_current_state == STATE_BT_Mode_Connect)
    378          				{
    379          					//只有在蓝牙连接状态下，才需要检测SCAN键的双击行为
    380          					keypad_state = 	KEYPAD_STATE_FIRST_CLICK_RELEASE;
    381          					release_cnt = 0;
    382          				}
    383          				else
    384          				{
    385          					//其余状态下没有必要检测SCAN键的双击行为
    386          					OSQPost(pEvent_Queue,(void*)EVENT_SCAN_KEY_SINGLE_CLICK);
    387          					Keypad_Timer_Disable();
    388          					Keypad_Int_Enable();
    389          				}
    390          				
    391          			}
    392          			else if (current_press_key == ERASE_KEY)
    393          			{
    394          				OSQPost(pEvent_Queue,(void*)EVENT_ERASE_KEY_SINGLE_CLICK);
    395          				//keypad_state = KEYPAD_STATE_INIT;
    396          				Keypad_Timer_Disable();
    397          				Keypad_Int_Enable();
    398          			}
    399          		}
    400          		else if (keypad_state == KEYPAD_STATE_FIRST_CLICK_RELEASE)
    401          		{
    402          			release_cnt++;
    403          			if (release_cnt == DOUBLE_CLICK_INTERVAL)
    404          			{
    405          				//单击后，在双击间隔时间内没有再次按下按键，及可以确认单击事件的发生
    406          				OSQPost(pEvent_Queue,(void*)EVENT_SCAN_KEY_SINGLE_CLICK);
    407          				//keypad_state = KEYPAD_STATE_INIT;
    408          				Keypad_Timer_Disable();
    409          				Keypad_Int_Enable();
    410          			}
    411          		}
    412          		else if (keypad_state == KEYPAD_STATE_SECOND_CLICK)
    413          		{
    414          			OSQPost(pEvent_Queue,(void*)EVENT_SCAN_KEY_DOUBLE_CLICK);
    415          			//keypad_state = KEYPAD_STATE_INIT;
    416          			Keypad_Timer_Disable();
    417          			Keypad_Int_Enable();
    418          			hw_platform_stop_led_blink();
    419          		}
    420          	}
    421          }
    422          

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     Keypad_EXTI_ISRHandler       8
     Keypad_Init                  8
     Keypad_Initport             16
     Keypad_Int_Disable           8
     Keypad_Int_Enable            8
     Keypad_ReadIO               16
     Keypad_Timer_Disable         8
     Keypad_Timer_Enable          8
     Keypad_Timer_ISRHandler      8
     Keypad_Timer_Init           40


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     current_press_key          1
     press_cnt                  4
     release_cnt                4
     keypad_state               1
     Keypad_Initport          116
     Keypad_Int_Enable         84
     Keypad_Int_Disable        76
     Keypad_Timer_Init        124
     Keypad_Timer_Enable       20
     Keypad_Timer_Disable      12
     Keypad_Init               16
     Keypad_EXTI_ISRHandler    60
     Keypad_ReadIO            112
     Keypad_Timer_ISRHandler  456
     ??DataTable8               4
     ??DataTable16              4
     ??DataTable19              4
     ??DataTable40              4
     ??DataTable45              4
     ??DataTable47              4

 
    10 bytes in section .bss
 1 100 bytes in section .text
 
 1 100 bytes of CODE memory
    10 bytes of DATA memory

Errors: none
Warnings: none
