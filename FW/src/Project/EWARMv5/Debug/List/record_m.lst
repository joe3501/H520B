###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     28/Sep/2015  18:18:16 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\H520B\FW\src\App\record_m.c                           #
#    Command line =  E:\H520B\FW\src\App\record_m.c -lcN                      #
#                    E:\H520B\FW\src\Project\EWARMv5\Debug\List\ -o           #
#                    E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\ --no_cse      #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    5.4\arm\INC\DLib_Config_Full.h" -I                       #
#                    E:\H520B\FW\src\Project\EWARMv5\..\ -I                   #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\App\ -I            #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Drivers\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\FatFs\ -I          #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Lib\inc\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-CPU\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-LIB\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Ports #
#                    \ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\ #
#                    Source\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC #
#                    -Probe\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\usb_lib #
#                    \ -I "C:\Program Files\IAR Systems\Embedded Workbench    #
#                    5.4\arm\INC\" -Ol                                        #
#    List file    =  E:\H520B\FW\src\Project\EWARMv5\Debug\List\record_m.lst  #
#    Object file  =  E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\record_m.o     #
#                                                                             #
#                                                                             #
###############################################################################

E:\H520B\FW\src\App\record_m.c
      1          /**
      2           * @file record.c
      3           * @brief H520B项目脱机记录管理模块
      4           * @version 1.0
      5           * @author joe
      6           * @date 2015年09月28日
      7           * @note 利用通用的记录管理模块实现的
      8           * @copy
      9           *
     10           * 此代码为深圳合杰电子有限公司项目代码，任何人及公司未经许可不得复制传播，或用于
     11           * 本公司以外的项目。本司保留一切追究权利。
     12           *
     13           * <h1><center>&copy; COPYRIGHT 2015 heroje</center></h1>
     14           */
     15          
     16          #include "record_m.h"
     17          #include "record_mod.h"
     18          #include <string.h>
     19          #include "assert.h"
     20          
     21          #define RECORD_MAX_SIZE		(MAX_BARCODE_LEN+1)		//最长的记录大小
     22          
     23          #define DELETE_FLAG			0xCF	//记录被删除的标记
     24          unsigned char			rec_module_buffer[RECORD_MAX_SIZE];	//记录模块的公用buffer	
     25          
     26          static unsigned int		rec_cnt;
     27          
     28          static unsigned int     current_logical_index;
     29          unsigned int             current_node_offset;
     30          unsigned int g_rec_offset;
     31          
     32          
     33          /**
     34          * @brief  某一个记录区在初始化时需要输入的参数
     35          * @note 如果该记录区的记录需要被修改，那么需要分配record2，否则只需要分配record1即可
     36          */
     37          typedef struct  
     38          {
     39          	unsigned char	record_index;				//实际使用的记录区索引
     40          	unsigned int	record_size;				//记录的大小
     41          	unsigned int	record_cnt;					//记录的最大条数
     42          } TRec_Init_Param;
     43          
     44          //extern  TGOODS_SPEC_NAME_COLLECTION		spec_name;
     45          //extern  TGOODS_SPEC_NAME_COLLECTION		*pSpec_Name_Collection;
     46          /**
     47           * @brief 系统的所有记录模块的初始化
     48           * @return 0: OK   else: 错误代码
     49           * @note: 返回值不能很好的定位到具体的错误发生的位置，后续有需要再修改
     50           */
     51          int record_module_init(void)
     52          {
     53          	int ret;
     54          	unsigned char flag;
     55          
     56          	unsigned int		i;
     57          	//unsigned char		*pRec;
     58          
     59          
     60          	ret = record_init(1,sizeof(TBATCH_NODE),BATCH_LIST_MAX_CNT);	
     61          	if (ret)
     62          	{
     63          			if (-3 == ret || -6 == ret || -4 == ret)	//记录区还没有Format
     64          			{
     65          				ret = record_format(1,sizeof(TBATCH_NODE),BATCH_LIST_MAX_CNT);
     66          				if (ret)
     67          				{
     68          					//format失败，记录区错误或者没有足够的空间了
     69          					return ret;
     70          				}
     71          			}
     72          			else
     73          			{
     74          				//记录的存储区域有不可恢复的错误
     75          				return ret;
     76          			}
     77          	}	
     78          
     79          	rec_cnt = 0;
     80          	for (i = 0;i < record_count_ext(1);i++)
     81          	{
     82          		ret = record_read(0x81,i,&flag,1);
     83          		if (ret)
     84          		{
     85          			return ret;
     86          		}
     87          
     88          		if (flag == 0xff)
     89          		{
     90          			//该记录有效
     91          			rec_cnt++;
     92          		}
     93          	}
     94          
     95          	if ((rec_cnt == 0)&&(record_count_ext(1) != 0))
     96          	{
     97          		record_delall(1);
     98          	}
     99          
    100          	current_logical_index = 0;
    101          
    102          	return 0;
    103          }
    104          
    105          /**
    106           * @brief 读指定记录，该记录必须存在，此函数中不作判断
    107           * @param[in] unsigned char rectype	 记录的类型
    108           * @param[in] int index 记录的索引  物理索引，该索引对应的记录可能是已经被删除的记录,  1 -- cnt
    109           * @return 返回记录的地址
    110           */
    111          unsigned char *record_module_read(unsigned int index)
    112          {
    113          	unsigned char	*pBuf;
    114          	//unsigned int	checkvalue;
    115          	int		ret;
    116          	int		re_read_cnt = 3;		//如果一次读取失败，那么重读3次
    117          
    118          
    119          	pBuf = rec_module_buffer;
    120          
    121          	while(re_read_cnt--)
    122          	{
    123          		ret = record_read(1,record_count_ext(1)-index,pBuf,0);
    124          		if(ret)
    125          		{
    126          			continue;
    127          		}
    128          
    129          		return pBuf;
    130          	}
    131          
    132          	return (unsigned char*)0;
    133          }
    134          
    135          //从start指定的偏移开始搜索第一个被删除的记录
    136          //return -1:		没有搜索到被删除记录，
    137          //		else：  返回被删除的索引
    138          static int get_delete_node(unsigned int start)
    139          {
    140          	unsigned char flag;
    141          	int	i;
    142          
    143          	for (i = start; i <= record_count_ext(1);i++)
    144          	{
    145          		if (record_read(0x81,record_count_ext(1)-i,&flag,1))
    146          		{
    147          			return -1;
    148          		}
    149          
    150          		if (flag != 0xff)
    151          		{
    152          			return i;
    153          		}
    154          	}
    155          
    156          	return -1;
    157          }
    158          
    159          //搜索记录区的第一个有效记录
    160          static int get_first_valid_node(void)
    161          {
    162          	unsigned char flag;
    163          	int	i;
    164          
    165          	for (i = 1; i <= record_count_ext(1);i++)
    166          	{
    167          		if (record_read(0x81,record_count_ext(1)-i,&flag,1))
    168          		{
    169          			return -1;
    170          		}
    171          
    172          		if (flag == 0xff)
    173          		{
    174          			return i;
    175          		}
    176          	}
    177          
    178          	return 0;
    179          }
    180          
    181          
    182          /**
    183           * @brief 增加一条记录
    184           * @param[in] unsigned char *precord 记录指针
    185           * @return 0:成功
    186           *        -1:记录数已达上限
    187           * @note 
    188           */
    189          int record_add(unsigned char *precord)
    190          {
    191          	int			ret;
    192          	int			valid_offset = -1;
    193          
    194          	if(record_count_ext(1) >= BATCH_LIST_MAX_CNT)
    195          	{
    196          
    197          		if (rec_cnt >= BATCH_LIST_MAX_CNT)
    198          		{
    199          			return -1;
    200          		}
    201          		else
    202          		{
    203          			//找到一个已经被删除的位置
    204          			valid_offset = get_delete_node(1);
    205          			if (valid_offset == -1)
    206          			{
    207          				return -1;
    208          			}
    209          		}
    210          	}
    211          
    212          
    213          	precord[0] = 0xff;		//保证记录的第一个字节(标志字节)是0xff;
    214          	if (valid_offset != -1)
    215          	{
    216          		//表示新记录需要替换原来被删除的记录
    217          		g_rec_offset = valid_offset;
    218          		ret = record_replace(1, record_count_ext(1)-valid_offset,precord);
    219          	}
    220          	else
    221          	{
    222          		g_rec_offset = record_count_ext(1)+1;
    223          		ret = record_write(1,precord,0);
    224          	}
    225          	
    226          	if(ret)
    227          	{
    228          		return ret;
    229          	}
    230          
    231          	rec_cnt++;
    232          	current_node_offset = g_rec_offset;
    233          	return 0;
    234          }
    235          
    236          
    237          
    238          /**
    239          * @brief 往指定记录索引处写一条记录
    240          * @param[in] unsigned char rectype 记录类型
    241          * @param[in] int					记录索引（物理索引）
    242          * @return 0:成功
    243          *        -1:失败
    244          * @note 
    245          */
    246          int record_module_replace(int index,unsigned char *precord)
    247          {
    248          	precord[0] = 0xff;
    249          	return record_replace(1,record_count_ext(1)-index,precord);
    250          }
    251          
    252          /**
    253           * @brief 得到记录总条数
    254           * @return 0...LOGIC_RECORD_BLOCK_SIZE
    255           */
    256          int record_module_count(void)
    257          {
    258          	return rec_cnt;
    259          }
    260          
    261          /**
    262           * @brief 清除所有记录
    263           * @return none
    264           */
    265          int record_clear(void)
    266          {
    267          	record_delall(1);
    268          	rec_cnt = 0;  
    269              return 0;
    270          }
    271          
    272          /**
    273          * @brief 根据某一个关键字查询记录
    274          * @param[in] unsigned char *in_tag			要匹配的关键字字符串
    275          * @param[in] int *index						返回逻辑索引
    276          * @return 搜索结果	0:没有搜索到该交易记录  else:搜索到的记录的地址
    277          * @note  实现的时候必须进行字符串比较,从最新的记录开始搜索
    278          */
    279          unsigned char *rec_searchby_tag(unsigned char *in_tag, int *index)
    280          {
    281          	unsigned char					*pBuf;
    282          	unsigned int					i;
    283          	int								count,ret;
    284          	unsigned char					flag;
    285          
    286          	i = 0;
    287          
    288          	count = record_count_ext(1);
    289          	if (count <= 0)
    290          	{
    291          		return (unsigned char*)0;
    292          	}
    293          
    294          	//搜索还只能一个个读，一个个比较，不知道当记录太多的时候会不会太慢了？？？
    295          	//顺寻查找方法，需要评估搜索最后一个记录所消耗的时间是否能够忍受，如果不行，那只能通过一些空间换取时间的方法来优化
    296          	//搜索算法了。
    297          	do
    298          	{
    299          		ret = record_read(0x81,i,&flag,1);
    300          		if (ret)
    301          		{
    302          			return (unsigned char*)0;
    303          		}
    304          
    305          		if (flag == 0xff)
    306          		{
    307          			pBuf = record_module_read(count-i);
    308          
    309          			ret = strcmp((const char*)in_tag,(const char*)((TBATCH_NODE*)pBuf)->barcode);
    310          
    311          			if (ret == 0) 
    312          			{
    313          				*index = i;
    314          				return pBuf;
    315          			}
    316          		}
    317          		
    318          		i ++;
    319          	}while(i<count);
    320          
    321          	return (unsigned char*)0;		//没有搜索到与关键字匹配的记录
    322          }
    323          
    324          
    325          //记录的逻辑偏移对应的物理偏移
    326          int rec_LA_to_PA(unsigned int logical_index)
    327          {
    328          	int ret,i,cnt = 0;
    329          	unsigned char flag;
    330          	unsigned int  num;
    331          
    332          	if ((logical_index ==0)||(logical_index > rec_cnt))
    333          	{
    334          		return 0;
    335          	}
    336          
    337          	if (logical_index == 1)
    338          	{
    339          		current_logical_index = 1;
    340          		current_node_offset = get_first_valid_node();
    341          		if(logical_index == 1)
    342          		{
    343          			return current_node_offset;
    344          		}
    345          	}
    346          
    347          	if (logical_index == current_logical_index)
    348          	{
    349          		return current_node_offset;
    350          	}
    351          	else if (logical_index > current_logical_index)
    352          	{
    353          		num = logical_index - current_logical_index;
    354          		for (i = current_node_offset+1; i<=record_count_ext(1);i++)
    355          		{
    356          			ret = record_read(0x81,record_count_ext(1)-i,&flag,1);
    357          			if (ret)
    358          			{
    359          				return -1;
    360          			}
    361          
    362          			if (flag == 0xff)
    363          			{
    364          				cnt++;
    365          
    366          				if (cnt == num)
    367          				{
    368          					current_logical_index = logical_index;
    369          					current_node_offset = i;		
    370          					return i;
    371          				}
    372          			}
    373          		}
    374          	}
    375          	else
    376          	{
    377          		num = current_logical_index - logical_index;
    378          		for (i = current_node_offset-1; i > 0;i--)
    379          		{
    380          			ret = record_read(0x81,record_count_ext(1)-i,&flag,1);
    381          			if (ret)
    382          			{
    383          				return -1;
    384          			}
    385          
    386          			if (flag == 0xff)
    387          			{
    388          				cnt++;
    389          
    390          				if (cnt == num)
    391          				{
    392          					current_logical_index = logical_index;
    393          					current_node_offset = i;		
    394          					return i;
    395          				}
    396          			}
    397          		}
    398          
    399          	}
    400          	
    401          
    402          	return 0;
    403          }
    404          
    405          //记录的物理偏移对应的逻辑偏移
    406          int rec_PA_to_LA(unsigned int physical_index)
    407          {
    408          	int ret,i;//,cnt = 0;
    409          	unsigned char flag;
    410          //	unsigned int num;
    411          
    412          
    413          	if ((physical_index == 0)||(physical_index > record_count_ext(1)))
    414          	{
    415          		return 0;
    416          	}
    417          
    418          	if (physical_index == current_node_offset)
    419          	{
    420          		return current_logical_index;
    421          	}
    422          	else if (physical_index > current_node_offset)
    423          	{
    424          		for (i = current_node_offset+1; i <= physical_index;i++)
    425          		{
    426          			ret = record_read(0x81,record_count_ext(1)-i,&flag,1);
    427          			if (ret)
    428          			{
    429          				return 0;
    430          			}
    431          
    432          			if (flag == 0xff)
    433          			{
    434          				current_logical_index++;
    435          			}
    436          		}
    437          	}
    438          	else
    439          	{
    440          		for (i = current_node_offset-1; i >= physical_index;i--)
    441          		{
    442          			ret = record_read(0x81,record_count_ext(1)-i,&flag,1);
    443          			if (ret)
    444          			{
    445          				return 0;
    446          			}
    447          
    448          			if (flag == 0xff)
    449          			{
    450          				current_logical_index--;
    451          			}
    452          		}
    453          	}
    454          	current_node_offset = physical_index;	
    455          	return current_logical_index;
    456          }
    457          
    458          
    459          //清除一个记录
    460          //index  物理偏移
    461          int delete_one_node(unsigned int index)
    462          {
    463          	int ret;
    464          //	unsigned char rec_index;
    465          //	int k;
    466          
    467          	ret = record_modify(1,record_count_ext(1)-index,0xcf);
    468          	if (ret)
    469          	{
    470          		return ret;
    471          	}
    472          
    473          	rec_cnt--;
    474          	return 0;
    475          }
    476          
    477          
    478          /**
    479          * @brief 逻辑读取记录
    480          * @param[in] unsigned int mode  0:第一个有效节点   1;前一个有效节点   2:后一个有效节点  3:指定节点偏移
    481          * @param[in] unsigned int offset  只有在mode = 3时才有用，物理偏移
    482          */
    483          unsigned char* get_node(unsigned int mode,unsigned int offset)
    484          {
    485          	unsigned int index;
    486          	//unsigned char flag;
    487          
    488          	if (mode == 0)
    489          	{
    490          		index = rec_LA_to_PA(1);
    491          		if (index == 0)
    492          		{
    493          			return (unsigned char *)0;
    494          		}
    495          
    496          		return record_module_read(index);
    497          	}
    498          	else if (mode == 1)
    499          	{
    500          		index = rec_LA_to_PA(current_logical_index-1);
    501          		if (index == 0)
    502          		{
    503          			return (unsigned char *)0;
    504          		}
    505          
    506          		return record_module_read(index);
    507          	}
    508          	else if (mode == 2)
    509          	{
    510          		index = rec_LA_to_PA(current_logical_index+1);
    511          		if (index == 0)
    512          		{
    513          			return (unsigned char *)0;
    514          		}
    515          
    516          		return record_module_read(index);
    517          	}
    518          	else if (mode == 3)
    519          	{
    520          		index = rec_PA_to_LA(offset);
    521          		if (index == 0)
    522          		{
    523          			return (unsigned char *)0;
    524          		}
    525          
    526          		return record_module_read(offset);
    527          	}
    528          
    529          	return (unsigned char *)0;
    530          }
    531          
    532          int recover_record_by_logfile(void)
    533          {
    534          	return 0;
    535          }
    536          
    537          
    538          unsigned char* record_logical_read(unsigned int logical_index)
    539          {
    540          	int	index;
    541          
    542          	index = rec_LA_to_PA(logical_index);
    543          	if (index == 0)
    544          	{
    545          		return (unsigned char*)0;
    546          	}
    547          
    548          	return record_module_read(index);
    549          }
    550          
    551          void record_m_test(void)
    552          {
    553          	int i,ret;
    554          	unsigned char *pRec;
    555          	TBATCH_NODE		node;
    556          #if 0      
    557                  ret = record_clear();
    558                  assert(ret == 0);
    559                  
    560          	//test record_add() interface
    561          	for (i = 0; i < BATCH_LIST_MAX_CNT;i++)
    562          	{
    563          		sprintf(node.barcode,"test%d",i);
    564          		hw_platform_trip_io();
    565          		ret = record_add((unsigned char*)&node);
    566          		assert(ret == 0);
    567          	}
    568          	
    569          
    570          	//test record_module_read() interface
    571          	for (i = 0; i < BATCH_LIST_MAX_CNT;i++)
    572          	{
    573          		hw_platform_trip_io();
    574          		pRec = record_module_read(i+1);
    575          		assert(pRec != 0);
    576          		sprintf(node.barcode,"test%d",i);
    577          
    578          		ret = strcmp(((TBATCH_NODE*)pRec)->barcode,node.barcode);
    579          		assert(ret == 0);
    580          	}
    581          
    582          	//test rec_searchby_tag()  speed performance			//45000条记录时，搜索最旧的一条记录耗时13.45s
    583          	//此搜索算法的搜索时间是线性的，如果不满足客户需求，需要改进此搜索算法
    584          	hw_platform_trip_io();
    585          	sprintf(node.barcode,"test%d",0);
    586          	pRec = rec_searchby_tag(node.barcode,&i);
    587          	assert(pRec != 0);
    588          	hw_platform_trip_io();
    589          
    590          #endif
    591          
    592          	for (i = 0; i < BATCH_LIST_MAX_CNT;i++)
    593          	{
    594          		ret = delete_one_node(i+1);
    595          		assert(ret == 0);
    596          		i++;
    597          	}
    598          
    599          	for (i = 0; i < record_module_count();i++)
    600          	{
    601          		pRec = get_node((i==0)?0:2,0);
    602          		assert(pRec != 0);
    603          		sprintf(node.barcode,"test%d",2*i+1);
    604          
    605          		ret = strcmp(((TBATCH_NODE*)pRec)->barcode,node.barcode);
    606          		assert(ret == 0);
    607          	}
    608          	
    609          }

   Maximum stack usage in bytes:

     Function                  .cstack
     --------                  -------
     delete_one_node                8
     get_delete_node               16
     get_first_valid_node          16
     get_node                       8
     rec_LA_to_PA                  24
     rec_PA_to_LA                  16
     rec_searchby_tag              32
     record_add                    16
     record_clear                   8
     record_logical_read            8
     record_m_test                 96
     record_module_count            0
     record_module_init            16
     record_module_read            16
     record_module_replace         16
     recover_record_by_logfile      0


   Section sizes:

     Function/Label                              Bytes
     --------------                              -----
     rec_module_buffer                             84
     rec_cnt                                        4
     current_logical_index                          4
     current_node_offset                            4
     g_rec_offset                                   4
     record_module_init                           164
     record_module_read                            52
     get_delete_node                               66
     get_first_valid_node                          64
     record_add                                   148
     record_module_replace                         28
     record_module_count                            6
     record_clear                                  18
     rec_searchby_tag                              96
     rec_LA_to_PA                                 232
     rec_PA_to_LA                                 172
     delete_one_node                               38
     get_node                                     114
     recover_record_by_logfile                      4
     record_logical_read                           20
     record_m_test                                164
     ??DataTable35                                  4
     ??DataTable38                                  4
     ??DataTable40                                  4
     ?<Constant "ret == 0">                        12
     ?<Constant "E:\\H520B\\FW\\src\\App\\r...">   32
     ?<Constant "pRec != 0">                       12
     ?<Constant "test%d">                           8

 
   100 bytes in section .bss
    64 bytes in section .rodata
 1 398 bytes in section .text
 
 1 398 bytes of CODE  memory
    64 bytes of CONST memory
   100 bytes of DATA  memory

Errors: none
Warnings: 3
