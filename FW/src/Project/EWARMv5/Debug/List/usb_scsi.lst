###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     28/Sep/2015  18:18:11 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\H520B\FW\src\usb_lib\usb_scsi.c                       #
#    Command line =  E:\H520B\FW\src\usb_lib\usb_scsi.c -lcN                  #
#                    E:\H520B\FW\src\Project\EWARMv5\Debug\List\ -o           #
#                    E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\ --no_cse      #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    5.4\arm\INC\DLib_Config_Full.h" -I                       #
#                    E:\H520B\FW\src\Project\EWARMv5\..\ -I                   #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\App\ -I            #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Drivers\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\FatFs\ -I          #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\Lib\inc\ -I        #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-CPU\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC-LIB\ -I    #
#                    E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Ports #
#                    \ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\ #
#                    Source\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\uCOS\uC #
#                    -Probe\ -I E:\H520B\FW\src\Project\EWARMv5\..\..\usb_lib #
#                    \ -I "C:\Program Files\IAR Systems\Embedded Workbench    #
#                    5.4\arm\INC\" -Ol                                        #
#    List file    =  E:\H520B\FW\src\Project\EWARMv5\Debug\List\usb_scsi.lst  #
#    Object file  =  E:\H520B\FW\src\Project\EWARMv5\Debug\Obj\usb_scsi.o     #
#                                                                             #
#                                                                             #
###############################################################################

E:\H520B\FW\src\usb_lib\usb_scsi.c
      1          /******************** (C) COPYRIGHT 2010 STMicroelectronics ********************
      2          * File Name          : usb_scsi.c
      3          * Author             : MCD Application Team
      4          * Version            : V3.1.1
      5          * Date               : 04/07/2010
      6          * Description        : All processing related to the SCSI commands
      7          ********************************************************************************
      8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          *******************************************************************************/
     15          
     16          /* Includes ------------------------------------------------------------------*/
     17          #include "hw_config.h"
     18          #include "usb_scsi.h"
     19          #include "mass_mal.h"
     20          #include "usb_bot.h"
     21          #include "usb_regs.h"
     22          #include "memory.h"
     23          //#include "nand_if.h"
     24          //#include "platform_config.h"
     25          #include "usb_lib.h"
     26          
     27          /* Private typedef -----------------------------------------------------------*/
     28          /* Private define ------------------------------------------------------------*/
     29          /* Private macro -------------------------------------------------------------*/
     30          /* Private variables ---------------------------------------------------------*/
     31          /* External variables --------------------------------------------------------*/
     32          extern u8 Bulk_Data_Buff[BULK_MAX_PACKET_SIZE];  /* data buffer*/
     33          extern u8 Bot_State;
     34          extern Bulk_Only_CBW CBW;
     35          extern Bulk_Only_CSW CSW;
     36          extern u32 Mass_Memory_Size[2];
     37          extern u32 Mass_Block_Size[2];
     38          extern u32 Mass_Block_Count[2];
     39          extern u8 TransferState;
     40          /* Private function prototypes -----------------------------------------------*/
     41          /* Private functions ---------------------------------------------------------*/
     42          
     43          /*******************************************************************************
     44          * Function Name  : SCSI_Inquiry_Cmd
     45          * Description    : SCSI Inquiry Command routine.
     46          * Input          : None.
     47          * Output         : None.
     48          * Return         : None.
     49          *******************************************************************************/
     50          void SCSI_Inquiry_Cmd(u8 lun)
     51          {
     52            u8* Inquiry_Data;
     53            u16 Inquiry_Data_Length;
     54          
     55            if (CBW.CB[1] & 0x01)/*Evpd is set*/
     56            {
     57              Inquiry_Data = Page00_Inquiry_Data;
     58              Inquiry_Data_Length = 5;
     59            }
     60            else
     61            {
     62          
     63              if ( lun == 0)
     64              {
     65                Inquiry_Data = Standard_Inquiry_Data;
     66              }
     67              else
     68              {
     69                Inquiry_Data = Standard_Inquiry_Data2;
     70              }
     71          
     72              if (CBW.CB[4] <= STANDARD_INQUIRY_DATA_LEN)
     73                Inquiry_Data_Length = CBW.CB[4];
     74              else
     75                Inquiry_Data_Length = STANDARD_INQUIRY_DATA_LEN;
     76          
     77            }
     78            Transfer_Data_Request(Inquiry_Data, Inquiry_Data_Length);
     79          }
     80          
     81          /*******************************************************************************
     82          * Function Name  : SCSI_ReadFormatCapacity_Cmd
     83          * Description    : SCSI ReadFormatCapacity Command routine.
     84          * Input          : None.
     85          * Output         : None.
     86          * Return         : None.
     87          *******************************************************************************/
     88          void SCSI_ReadFormatCapacity_Cmd(u8 lun)
     89          {
     90          
     91            if (MAL_GetStatus(lun) != 0 )
     92            {
     93              Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
     94              Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
     95              Bot_Abort(DIR_IN);
     96              return;
     97            }
     98            ReadFormatCapacity_Data[4] = (u8)(Mass_Block_Count[lun] >> 24);
     99            ReadFormatCapacity_Data[5] = (u8)(Mass_Block_Count[lun] >> 16);
    100            ReadFormatCapacity_Data[6] = (u8)(Mass_Block_Count[lun] >>  8);
    101            ReadFormatCapacity_Data[7] = (u8)(Mass_Block_Count[lun]);
    102          
    103            ReadFormatCapacity_Data[9] = (u8)(Mass_Block_Size[lun] >>  16);
    104            ReadFormatCapacity_Data[10] = (u8)(Mass_Block_Size[lun] >>  8);
    105            ReadFormatCapacity_Data[11] = (u8)(Mass_Block_Size[lun]);
    106            Transfer_Data_Request(ReadFormatCapacity_Data, READ_FORMAT_CAPACITY_DATA_LEN);
    107          }
    108          
    109          /*******************************************************************************
    110          * Function Name  : SCSI_ReadCapacity10_Cmd
    111          * Description    : SCSI ReadCapacity10 Command routine.
    112          * Input          : None.
    113          * Output         : None.
    114          * Return         : None.
    115          *******************************************************************************/
    116          void SCSI_ReadCapacity10_Cmd(u8 lun)
    117          {
    118          
    119            if (MAL_GetStatus(lun))
    120            {
    121              Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    122              Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
    123              Bot_Abort(DIR_IN);
    124              return;
    125            }
    126          
    127            ReadCapacity10_Data[0] = (u8)(Mass_Block_Count[lun] - 1 >> 24);
    128            ReadCapacity10_Data[1] = (u8)(Mass_Block_Count[lun] - 1 >> 16);
    129            ReadCapacity10_Data[2] = (u8)(Mass_Block_Count[lun] - 1 >>  8);
    130            ReadCapacity10_Data[3] = (u8)(Mass_Block_Count[lun] - 1);
    131          
    132            ReadCapacity10_Data[4] = (u8)(Mass_Block_Size[lun] >>  24);
    133            ReadCapacity10_Data[5] = (u8)(Mass_Block_Size[lun] >>  16);
    134            ReadCapacity10_Data[6] = (u8)(Mass_Block_Size[lun] >>  8);
    135            ReadCapacity10_Data[7] = (u8)(Mass_Block_Size[lun]);
    136            Transfer_Data_Request(ReadCapacity10_Data, READ_CAPACITY10_DATA_LEN);
    137          }
    138          
    139          /*******************************************************************************
    140          * Function Name  : SCSI_ModeSense6_Cmd
    141          * Description    : SCSI ModeSense6 Command routine.
    142          * Input          : None.
    143          * Output         : None.
    144          * Return         : None.
    145          *******************************************************************************/
    146          void SCSI_ModeSense6_Cmd (u8 lun)
    147          {
    148            Transfer_Data_Request(Mode_Sense6_data, MODE_SENSE6_DATA_LEN);
    149          }
    150          
    151          /*******************************************************************************
    152          * Function Name  : SCSI_ModeSense10_Cmd
    153          * Description    : SCSI ModeSense10 Command routine.
    154          * Input          : None.
    155          * Output         : None.
    156          * Return         : None.
    157          *******************************************************************************/
    158          void SCSI_ModeSense10_Cmd (u8 lun)
    159          {
    160            Transfer_Data_Request(Mode_Sense10_data, MODE_SENSE10_DATA_LEN);
    161          }
    162          
    163          /*******************************************************************************
    164          * Function Name  : SCSI_RequestSense_Cmd
    165          * Description    : SCSI RequestSense Command routine.
    166          * Input          : None.
    167          * Output         : None.
    168          * Return         : None.
    169          *******************************************************************************/
    170          void SCSI_RequestSense_Cmd (u8 lun)
    171          {
    172            u8 Request_Sense_data_Length;
    173          
    174            if (CBW.CB[4] <= REQUEST_SENSE_DATA_LEN)
    175            {
    176              Request_Sense_data_Length = CBW.CB[4];
    177            }
    178            else
    179            {
    180              Request_Sense_data_Length = REQUEST_SENSE_DATA_LEN;
    181            }
    182            Transfer_Data_Request(Scsi_Sense_Data, Request_Sense_data_Length);
    183          }
    184          
    185          /*******************************************************************************
    186          * Function Name  : Set_Scsi_Sense_Data
    187          * Description    : Set Scsi Sense Data routine.
    188          * Input          : u8 Sens_Key
    189                             u8 Asc.
    190          * Output         : None.
    191          * Return         : None.
    192          *******************************************************************************/
    193          void Set_Scsi_Sense_Data(u8 lun, u8 Sens_Key, u8 Asc)
    194          {
    195            Scsi_Sense_Data[2] = Sens_Key;
    196            Scsi_Sense_Data[12] = Asc;
    197          }
    198          
    199          /*******************************************************************************
    200          * Function Name  : SCSI_Start_Stop_Unit_Cmd
    201          * Description    : SCSI Start_Stop_Unit Command routine.
    202          * Input          : None.
    203          * Output         : None.
    204          * Return         : None.
    205          *******************************************************************************/
    206          void SCSI_Start_Stop_Unit_Cmd(u8 lun)
    207          {
    208            Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
    209          }
    210          
    211          /*******************************************************************************
    212          * Function Name  : SCSI_Read10_Cmd
    213          * Description    : SCSI Read10 Command routine.
    214          * Input          : None.
    215          * Output         : None.
    216          * Return         : None.
    217          *******************************************************************************/
    218          void SCSI_Read10_Cmd(u8 lun , u32 LBA , u32 BlockNbr)
    219          {
    220          
    221            if (Bot_State == BOT_IDLE)
    222            {
    223              if (!(SCSI_Address_Management(CBW.bLUN, SCSI_READ10, LBA, BlockNbr)))/*address out of range*/
    224              {
    225                return;
    226              }
    227          
    228              if ((CBW.bmFlags & 0x80) != 0)
    229              {
    230                Bot_State = BOT_DATA_IN;
    231                TransferState = TXFR_IDLE;
    232                Read_Memory(lun, LBA , BlockNbr);
    233              }
    234              else
    235              {
    236                Bot_Abort(BOTH_DIR);
    237                Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
    238                Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
    239              }
    240              return;
    241            }
    242            else if (Bot_State == BOT_DATA_IN)
    243            {
    244              Read_Memory(lun , LBA , BlockNbr);
    245            }
    246          }
    247          
    248          /*******************************************************************************
    249          * Function Name  : SCSI_Write10_Cmd
    250          * Description    : SCSI Write10 Command routine.
    251          * Input          : None.
    252          * Output         : None.
    253          * Return         : None.
    254          *******************************************************************************/
    255          void SCSI_Write10_Cmd(u8 lun , u32 LBA , u32 BlockNbr)
    256          {
    257          
    258            if (Bot_State == BOT_IDLE)
    259            {
    260              if (!(SCSI_Address_Management(CBW.bLUN, SCSI_WRITE10 , LBA, BlockNbr)))/*address out of range*/
    261              {
    262                return;
    263              }
    264          
    265              if ((CBW.bmFlags & 0x80) == 0)
    266              {
    267                Bot_State = BOT_DATA_OUT;
    268              #ifndef STM32F10X_CL
    269                SetEPRxStatus(ENDP2, EP_RX_VALID);
    270              #endif /* STM32F10X_CL */
    271              }
    272              else
    273              {
    274                Bot_Abort(DIR_IN);
    275                Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
    276                Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
    277              }
    278              return;
    279            }
    280            else if (Bot_State == BOT_DATA_OUT)
    281            {
    282              Write_Memory(lun , LBA , BlockNbr);
    283            }
    284          }
    285          
    286          /*******************************************************************************
    287          * Function Name  : SCSI_Verify10_Cmd
    288          * Description    : SCSI Verify10 Command routine.
    289          * Input          : None.
    290          * Output         : None.
    291          * Return         : None.
    292          *******************************************************************************/
    293          void SCSI_Verify10_Cmd(u8 lun)
    294          {
    295            if ((CBW.dDataLength == 0) && !(CBW.CB[1] & BLKVFY))/* BLKVFY not set*/
    296            {
    297              Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
    298            }
    299            else
    300            {
    301              Bot_Abort(BOTH_DIR);
    302              Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
    303              Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
    304            }
    305          }
    306          /*******************************************************************************
    307          * Function Name  : SCSI_Valid_Cmd
    308          * Description    : Valid Commands routine.
    309          * Input          : None.
    310          * Output         : None.
    311          * Return         : None.
    312          *******************************************************************************/
    313          void SCSI_Valid_Cmd(u8 lun)
    314          {
    315            if (CBW.dDataLength != 0)
    316            {
    317              Bot_Abort(BOTH_DIR);
    318              Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
    319              Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
    320            }
    321            else
    322              Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
    323          }
    324          /*******************************************************************************
    325          * Function Name  : SCSI_Valid_Cmd
    326          * Description    : Valid Commands routine.
    327          * Input          : None.
    328          * Output         : None.
    329          * Return         : None.
    330          *******************************************************************************/
    331          void SCSI_TestUnitReady_Cmd(u8 lun)
    332          {
    333            if (MAL_GetStatus(lun))
    334            {
    335              Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    336              Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
    337              Bot_Abort(DIR_IN);
    338              return;
    339            }
    340            else
    341            {
    342              Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
    343            }
    344          }
    345          /*******************************************************************************
    346          * Function Name  : SCSI_Format_Cmd
    347          * Description    : Format Commands routine.
    348          * Input          : None.
    349          * Output         : None.
    350          * Return         : None.
    351          *******************************************************************************/
    352          void SCSI_Format_Cmd(u8 lun)
    353          {
    354            if (MAL_GetStatus(lun))
    355            {
    356              Set_Scsi_Sense_Data(CBW.bLUN, NOT_READY, MEDIUM_NOT_PRESENT);
    357              Set_CSW (CSW_CMD_FAILED, SEND_CSW_ENABLE);
    358              Bot_Abort(DIR_IN);
    359              return;
    360            }
    361          #ifdef USE_STM3210E_EVAL
    362            else
    363            {
    364              NAND_Format();
    365              Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
    366            }
    367          #endif
    368          }
    369          /*******************************************************************************
    370          * Function Name  : SCSI_Invalid_Cmd
    371          * Description    : Invalid Commands routine
    372          * Input          : None.
    373          * Output         : None.
    374          * Return         : None.
    375          *******************************************************************************/
    376          void SCSI_Invalid_Cmd(u8 lun)
    377          {
    378            if (CBW.dDataLength == 0)
    379            {
    380              Bot_Abort(DIR_IN);
    381            }
    382            else
    383            {
    384              if ((CBW.bmFlags & 0x80) != 0)
    385              {
    386                Bot_Abort(DIR_IN);
    387              }
    388              else
    389              {
    390                Bot_Abort(BOTH_DIR);
    391              }
    392            }
    393            Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
    394            Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
    395          }
    396          
    397          /*******************************************************************************
    398          * Function Name  : SCSI_Address_Management
    399          * Description    : Test the received address.
    400          * Input          : u8 Cmd : the command can be SCSI_READ10 or SCSI_WRITE10.
    401          * Output         : None.
    402          * Return         : Read\Write status (bool).
    403          *******************************************************************************/
    404          bool SCSI_Address_Management(u8 lun , u8 Cmd , u32 LBA , u32 BlockNbr)
    405          {
    406          
    407            if ((LBA + BlockNbr) > Mass_Block_Count[lun] )
    408            {
    409              if (Cmd == SCSI_WRITE10)
    410              {
    411                Bot_Abort(BOTH_DIR);
    412              }
    413              Bot_Abort(DIR_IN);
    414              Set_Scsi_Sense_Data(lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
    415              Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
    416              return (FALSE);
    417            }
    418          
    419          
    420            if (CBW.dDataLength != BlockNbr * Mass_Block_Size[lun])
    421            {
    422              if (Cmd == SCSI_WRITE10)
    423              {
    424                Bot_Abort(BOTH_DIR);
    425              }
    426              else
    427              {
    428                Bot_Abort(DIR_IN);
    429              }
    430              Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
    431              Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
    432              return (FALSE);
    433            }
    434            return (TRUE);
    435          }
    436          /******************* (C) COPYRIGHT 2010 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function                    .cstack
     --------                    -------
     SCSI_Address_Management          8
     SCSI_Format_Cmd                  8
     SCSI_Inquiry_Cmd                 8
     SCSI_Invalid_Cmd                 8
     SCSI_ModeSense10_Cmd             8
     SCSI_ModeSense6_Cmd              8
     SCSI_Read10_Cmd                 16
     SCSI_ReadCapacity10_Cmd          8
     SCSI_ReadFormatCapacity_Cmd      8
     SCSI_RequestSense_Cmd            8
     SCSI_Start_Stop_Unit_Cmd         8
     SCSI_TestUnitReady_Cmd           8
     SCSI_Valid_Cmd                   8
     SCSI_Verify10_Cmd                8
     SCSI_Write10_Cmd                 8
     Set_Scsi_Sense_Data              0


   Section sizes:

     Function/Label              Bytes
     --------------              -----
     SCSI_Inquiry_Cmd              72
     SCSI_ReadFormatCapacity_Cmd  168
     SCSI_ReadCapacity10_Cmd      180
     SCSI_ModeSense6_Cmd           16
     SCSI_ModeSense10_Cmd          16
     SCSI_RequestSense_Cmd         30
     Set_Scsi_Sense_Data           10
     SCSI_Start_Stop_Unit_Cmd      12
     SCSI_Read10_Cmd              124
     SCSI_Write10_Cmd             100
     SCSI_Verify10_Cmd             58
     SCSI_Valid_Cmd                48
     SCSI_TestUnitReady_Cmd        50
     SCSI_Format_Cmd               42
     SCSI_Invalid_Cmd              64
     SCSI_Address_Management      126
     ??DataTable24                  4
     ??DataTable36                  4
     ??DataTable47                  4
     ??DataTable49                  4
     ??DataTable50                  4

 
 1 136 bytes in section .text
 
 1 136 bytes of CODE memory

Errors: none
Warnings: none
